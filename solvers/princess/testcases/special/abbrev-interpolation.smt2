(reset)
(set-logic AUFLIA)
; setConstructProofs(true)
(set-option :produce-interpolants true)
(set-option :produce-proofs true)
(declare-fun PRED0 () Bool)
(declare-fun PRED12 () Bool)
(declare-fun PRED11 () Bool)
(declare-fun PRED10 () Bool)
(declare-fun PRED9 () Bool)
(declare-fun PRED6 () Bool)
(declare-fun PRED5 () Bool)
(declare-fun PRED8 () Bool)
(declare-fun PRED7 () Bool)
(declare-fun PRED2 () Bool)
(declare-fun PRED1 () Bool)
(declare-fun PRED4 () Bool)
(declare-fun PRED3 () Bool)
(declare-fun |main::B2@3| () Int)
(declare-fun __+Infinity__ () Int)
(declare-fun |main::__retval__@2| () Int)
(declare-fun |__VERIFIER_assert::cond| () Int)
(declare-fun __NaN__ () Int)
(declare-fun |main::i@4| () Int)
(declare-fun |main::i@3| () Int)
(declare-fun |main::S1@3| () Int)
(declare-fun |main::S1@4| () Int)
(declare-fun |main::E| () Int)
(declare-fun |main::__CPAchecker_TMP_2@3| () Int)
(declare-fun |main::E0@3| () Int)
(declare-fun |main::__CPAchecker_TMP_4@3| () Int)
(declare-fun |main::__CPAchecker_TMP_6@3| () Int)
(declare-fun |main::__CPAchecker_TMP_8@3| () Int)
(declare-fun |main::A2@3| () Int)
(declare-fun __VERIFIER_nondet_double@10 () Int)
(declare-fun |main::S| () Int)
(declare-fun |main::__CPAchecker_TMP_0@3| () Int)
(declare-fun |main::E0@4| () Int)
(declare-fun |main::E0@5| () Int)
(declare-fun __-Infinity__ () Int)
(declare-fun |main::S0| () Int)
(declare-fun |main::E@5| () Int)
(declare-fun |main::E@4| () Int)
(declare-fun |main::S@3| () Int)
(declare-fun |main::__CPAchecker_TMP_8@5| () Int)
(declare-fun |__VERIFIER_assert::cond@2| () Int)
(declare-fun |main::S@5| () Int)
(declare-fun |main::S@4| () Int)
(declare-fun |__VERIFIER_assert::cond@1| () Int)
(declare-fun |__VERIFIER_assert::cond@3| () Int)
(declare-fun __VERIFIER_nondet_double@9 () Int)
(declare-fun __VERIFIER_nondet_double@8 () Int)
(declare-fun __VERIFIER_nondet_double@7 () Int)
(declare-fun __VERIFIER_error () Int)
(declare-fun __VERIFIER_nondet_double@6 () Int)
(declare-fun __VERIFIER_nondet_double@5 () Int)
(declare-fun __VERIFIER_nondet_double@4 () Int)
(declare-fun |main::B1| () Int)
(declare-fun __VERIFIER_nondet_double@3 () Int)
(declare-fun |main::B2| () Int)
(declare-fun __VERIFIER_nondet_double@2 () Int)
(declare-fun |main::B1@3| () Int)
(declare-fun |main::S0@3| () Int)
(declare-fun |main::S0@4| () Int)
(declare-fun |main::S0@5| () Int)
(declare-fun |main::__CPAchecker_TMP_3@3| () Int)
(declare-fun |main::__CPAchecker_TMP_5@3| () Int)
(declare-fun |main::__CPAchecker_TMP_7@3| () Int)
(declare-fun |main::E0| () Int)
(declare-fun |main::__CPAchecker_TMP_7@5| () Int)
(declare-fun |main::A1@3| () Int)
(declare-fun |main::A2| () Int)
(declare-fun |main::A3| () Int)
(declare-fun |main::A3@3| () Int)
(declare-fun |main::E@3| () Int)
(declare-fun |main::A1| () Int)
(declare-fun |main::E1@3| () Int)
(declare-fun |main::__CPAchecker_TMP_1@3| () Int)
(declare-fun |main::E1@4| () Int)
(declare-fun _^_ (Int Int) Int)
(declare-fun _~_ (Int) Int)
(declare-fun Integer__/_ (Int Int) Int)
(declare-fun __string__ (Int) Int)
(declare-fun Integer__%_ (Int Int) Int)
(declare-fun __isSubnormal__ (Int) Int)
(declare-fun _&_ (Int Int) Int)
(declare-fun _!!_ (Int Int) Int)
(declare-fun _<<_ (Int Int) Int)
(declare-fun _>>_ (Int Int) Int)
(declare-fun Integer__*_ (Int Int) Int)
(push 1)
(push 1)
; setPartitionNumber(4)
(define-fun abbrev_24 () Bool (and (or (and (and (and (and (and (and (and (= |main::A1@3| __VERIFIER_nondet_double@2 ) (= |main::A2@3| __VERIFIER_nondet_double@3 ) ) (= |main::A3@3| __VERIFIER_nondet_double@4 ) ) (= |main::B1@3| __VERIFIER_nondet_double@5 ) ) (= |main::B2@3| __VERIFIER_nondet_double@6 ) ) (<= 0 (+ |main::A1@3| (* (- 1) (div 69  100)) ) ) ) (<= 0 (+ (div 71  100)(* (- 1) |main::A1@3| ) ) ) ) (= |main::__CPAchecker_TMP_0@3| 1 ) ) (and (or (and (and (and (and (and (and (= |main::A1@3| __VERIFIER_nondet_double@2 ) (= |main::A2@3| __VERIFIER_nondet_double@3 ) ) (= |main::A3@3| __VERIFIER_nondet_double@4 ) ) (= |main::B1@3| __VERIFIER_nondet_double@5 ) ) (= |main::B2@3| __VERIFIER_nondet_double@6 ) ) (<= 0 (+ |main::A1@3| (* (- 1) (div 69  100)) ) ) ) (not (<= 0 (+ (div 71  100)(* (- 1) |main::A1@3| ) ) ) ) ) (and (and (and (and (and (= |main::A1@3| __VERIFIER_nondet_double@2 ) (= |main::A2@3| __VERIFIER_nondet_double@3 ) ) (= |main::A3@3| __VERIFIER_nondet_double@4 ) ) (= |main::B1@3| __VERIFIER_nondet_double@5 ) ) (= |main::B2@3| __VERIFIER_nondet_double@6 ) ) (not (<= 0 (+ |main::A1@3| (* (- 1) (div 69  100)) ) ) ) ) ) (= |main::__CPAchecker_TMP_0@3| 0 ) ) ) (not (= |main::__CPAchecker_TMP_0@3| 0 ) ) ) )
(define-fun abbrev_26 () Bool (and (or (and (and (and abbrev_24 (<= 0 (+ |main::A2@3| (* (- 1) (div (- 131)  100)) ) ) ) (<= 0 (+ (div (- 129)  100)(* (- 1) |main::A2@3| ) ) ) ) (= |main::__CPAchecker_TMP_1@3| 1 ) ) (and (or (and (and abbrev_24 (<= 0 (+ |main::A2@3| (* (- 1) (div (- 131)  100)) ) ) ) (not (<= 0 (+ (div (- 129)  100)(* (- 1) |main::A2@3| ) ) ) ) ) (and abbrev_24 (not (<= 0 (+ |main::A2@3| (* (- 1) (div (- 131)  100)) ) ) ) ) ) (= |main::__CPAchecker_TMP_1@3| 0 ) ) ) (not (= |main::__CPAchecker_TMP_1@3| 0 ) ) ) )
(define-fun abbrev_28 () Bool (and (or (and (and (and abbrev_26 (<= 0 (+ |main::A3@3| (* (- 1) (div 109  100)) ) ) ) (<= 0 (+ (div 111  100)(* (- 1) |main::A3@3| ) ) ) ) (= |main::__CPAchecker_TMP_2@3| 1 ) ) (and (or (and (and abbrev_26 (<= 0 (+ |main::A3@3| (* (- 1) (div 109  100)) ) ) ) (not (<= 0 (+ (div 111  100)(* (- 1) |main::A3@3| ) ) ) ) ) (and abbrev_26 (not (<= 0 (+ |main::A3@3| (* (- 1) (div 109  100)) ) ) ) ) ) (= |main::__CPAchecker_TMP_2@3| 0 ) ) ) (not (= |main::__CPAchecker_TMP_2@3| 0 ) ) ) )
(define-fun abbrev_30 () Bool (and (or (and (and (and abbrev_28 (<= 0 (+ |main::B1@3| (* (- 1) (div 139  100)) ) ) ) (<= 0 (+ (div 141  100)(* (- 1) |main::B1@3| ) ) ) ) (= |main::__CPAchecker_TMP_3@3| 1 ) ) (and (or (and (and abbrev_28 (<= 0 (+ |main::B1@3| (* (- 1) (div 139  100)) ) ) ) (not (<= 0 (+ (div 141  100)(* (- 1) |main::B1@3| ) ) ) ) ) (and abbrev_28 (not (<= 0 (+ |main::B1@3| (* (- 1) (div 139  100)) ) ) ) ) ) (= |main::__CPAchecker_TMP_3@3| 0 ) ) ) (not (= |main::__CPAchecker_TMP_3@3| 0 ) ) ) )
(define-fun abbrev_32 () Bool (and (and (and (or (and (and (and abbrev_30 (<= 0 (+ |main::B2@3| (* (- 1) (div (- 71)  100)) ) ) ) (<= 0 (+ (div (- 69)  100)(* (- 1) |main::B2@3| ) ) ) ) (= |main::__CPAchecker_TMP_4@3| 1 ) ) (and (or (and (and abbrev_30 (<= 0 (+ |main::B2@3| (* (- 1) (div (- 71)  100)) ) ) ) (not (<= 0 (+ (div (- 69)  100)(* (- 1) |main::B2@3| ) ) ) ) ) (and abbrev_30 (not (<= 0 (+ |main::B2@3| (* (- 1) (div (- 71)  100)) ) ) ) ) ) (= |main::__CPAchecker_TMP_4@3| 0 ) ) ) (not (= |main::__CPAchecker_TMP_4@3| 0 ) ) ) (= |main::E@3| __VERIFIER_nondet_double@7 ) ) (= |main::E0@3| __VERIFIER_nondet_double@8 ) ) )
(define-fun abbrev_34 () Bool (and (or (and (and (and abbrev_32 (<= 0 (+ |main::E@3| (* (- 1) (div 0  10)) ) ) ) (<= 0 (+ (_eps ((var0 Int)) (and (<= 0 (+ 10 (* (- 1) (* 10 var0 ) ) ) ) (<= 0 (+ (* 10 var0 ) (- 1) ) ) ) ) (* (- 1) |main::E@3| ) ) ) ) (= |main::__CPAchecker_TMP_5@3| 1 ) ) (and (or (and (and abbrev_32 (<= 0 (+ |main::E@3| (* (- 1) (div 0  10)) ) ) ) (not (<= 0 (+ (_eps ((var0 Int)) (and (<= 0 (+ 10 (* (- 1) (* 10 var0 ) ) ) ) (<= 0 (+ (* 10 var0 ) (- 1) ) ) ) ) (* (- 1) |main::E@3| ) ) ) ) ) (and abbrev_32 (not (<= 0 (+ |main::E@3| (* (- 1) (div 0  10)) ) ) ) ) ) (= |main::__CPAchecker_TMP_5@3| 0 ) ) ) (not (= |main::__CPAchecker_TMP_5@3| 0 ) ) ) )
(assert (and (and (and (and (or (and (and (and abbrev_34 (<= 0 (+ |main::E0@3| (* (- 1) (div 0  10)) ) ) ) (<= 0 (+ (_eps ((var0 Int)) (and (<= 0 (+ 10 (* (- 1) (* 10 var0 ) ) ) ) (<= 0 (+ (* 10 var0 ) (- 1) ) ) ) ) (* (- 1) |main::E0@3| ) ) ) ) (= |main::__CPAchecker_TMP_6@3| 1 ) ) (and (or (and (and abbrev_34 (<= 0 (+ |main::E0@3| (* (- 1) (div 0  10)) ) ) ) (not (<= 0 (+ (_eps ((var0 Int)) (and (<= 0 (+ 10 (* (- 1) (* 10 var0 ) ) ) ) (<= 0 (+ (* 10 var0 ) (- 1) ) ) ) ) (* (- 1) |main::E0@3| ) ) ) ) ) (and abbrev_34 (not (<= 0 (+ |main::E0@3| (* (- 1) (div 0  10)) ) ) ) ) ) (= |main::__CPAchecker_TMP_6@3| 0 ) ) ) (not (= |main::__CPAchecker_TMP_6@3| 0 ) ) ) (= |main::S0@3| (div 0  10)) ) (= |main::S@3| (div 0  10)) ) (= |main::i@3| 0 ) ) )
; setPartitionNumber(-1)
(push 1)
; setPartitionNumber(5)
(define-fun abbrev_36 () Bool (and (and (and (and (or (and (and (and (and (and (and (<= 0 (+ 1000000 (* (- 1) |main::i@3| ) ) ) (= |main::E1@3| |main::E0@3| ) ) (= |main::E0@4| |main::E@3| ) ) (= |main::E@4| __VERIFIER_nondet_double@9 ) ) (<= 0 (+ |main::E@4| (* (- 1) (div 0  10)) ) ) ) (<= 0 (+ (_eps ((var0 Int)) (and (<= 0 (+ 10 (* (- 1) (* 10 var0 ) ) ) ) (<= 0 (+ (* 10 var0 ) (- 1) ) ) ) ) (* (- 1) |main::E@4| ) ) ) ) (= |main::__CPAchecker_TMP_7@3| 1 ) ) (and (or (and (and (and (and (and (<= 0 (+ 1000000 (* (- 1) |main::i@3| ) ) ) (= |main::E1@3| |main::E0@3| ) ) (= |main::E0@4| |main::E@3| ) ) (= |main::E@4| __VERIFIER_nondet_double@9 ) ) (<= 0 (+ |main::E@4| (* (- 1) (div 0  10)) ) ) ) (not (<= 0 (+ (_eps ((var0 Int)) (and (<= 0 (+ 10 (* (- 1) (* 10 var0 ) ) ) ) (<= 0 (+ (* 10 var0 ) (- 1) ) ) ) ) (* (- 1) |main::E@4| ) ) ) ) ) (and (and (and (and (<= 0 (+ 1000000 (* (- 1) |main::i@3| ) ) ) (= |main::E1@3| |main::E0@3| ) ) (= |main::E0@4| |main::E@3| ) ) (= |main::E@4| __VERIFIER_nondet_double@9 ) ) (not (<= 0 (+ |main::E@4| (* (- 1) (div 0  10)) ) ) ) ) ) (= |main::__CPAchecker_TMP_7@3| 0 ) ) ) (not (= |main::__CPAchecker_TMP_7@3| 0 ) ) ) (= |main::S1@3| |main::S0@3| ) ) (= |main::S0@4| |main::S@3| ) ) (= |main::S@4| (+ (+ (+ (+ (* |main::A1@3| |main::E@4| ) (* (- 1) (* |main::E0@4| |main::A2@3| ) ) ) (* |main::E1@3| |main::A3@3| ) ) (* |main::S0@4| |main::B1@3| ) ) (* |main::S1@3| |main::B2@3| ) ) ) ) )
(assert (and (and (and (or (and (and (and abbrev_36 (<= 0 (+ |main::S@4| (* (- 1) (div (- 1000)  10)) ) ) ) (<= 0 (+ (div 1000  10)(* (- 1) |main::S@4| ) ) ) ) (= |main::__CPAchecker_TMP_8@3| 1 ) ) (and (or (and (and abbrev_36 (<= 0 (+ |main::S@4| (* (- 1) (div (- 1000)  10)) ) ) ) (not (<= 0 (+ (div 1000  10)(* (- 1) |main::S@4| ) ) ) ) ) (and abbrev_36 (not (<= 0 (+ |main::S@4| (* (- 1) (div (- 1000)  10)) ) ) ) ) ) (= |main::__CPAchecker_TMP_8@3| 0 ) ) ) (= |__VERIFIER_assert::cond@2| |main::__CPAchecker_TMP_8@3| ) ) (not (= |__VERIFIER_assert::cond@2| 0 ) ) ) (= |main::i@4| (+ |main::i@3| 1 ) ) ) )
; setPartitionNumber(-1)
(push 1)
; setPartitionNumber(6)
(define-fun abbrev_39 () Bool (and (and (and (and (or (and (and (and (and (and (and (<= 0 (+ 1000000 (* (- 1) |main::i@4| ) ) ) (= |main::E1@4| |main::E0@4| ) ) (= |main::E0@5| |main::E@4| ) ) (= |main::E@5| __VERIFIER_nondet_double@10 ) ) (<= 0 (+ |main::E@5| (* (- 1) (div 0  10)) ) ) ) (<= 0 (+ (_eps ((var0 Int)) (and (<= 0 (+ 10 (* (- 1) (* 10 var0 ) ) ) ) (<= 0 (+ (* 10 var0 ) (- 1) ) ) ) ) (* (- 1) |main::E@5| ) ) ) ) (= |main::__CPAchecker_TMP_7@5| 1 ) ) (and (or (and (and (and (and (and (<= 0 (+ 1000000 (* (- 1) |main::i@4| ) ) ) (= |main::E1@4| |main::E0@4| ) ) (= |main::E0@5| |main::E@4| ) ) (= |main::E@5| __VERIFIER_nondet_double@10 ) ) (<= 0 (+ |main::E@5| (* (- 1) (div 0  10)) ) ) ) (not (<= 0 (+ (_eps ((var0 Int)) (and (<= 0 (+ 10 (* (- 1) (* 10 var0 ) ) ) ) (<= 0 (+ (* 10 var0 ) (- 1) ) ) ) ) (* (- 1) |main::E@5| ) ) ) ) ) (and (and (and (and (<= 0 (+ 1000000 (* (- 1) |main::i@4| ) ) ) (= |main::E1@4| |main::E0@4| ) ) (= |main::E0@5| |main::E@4| ) ) (= |main::E@5| __VERIFIER_nondet_double@10 ) ) (not (<= 0 (+ |main::E@5| (* (- 1) (div 0  10)) ) ) ) ) ) (= |main::__CPAchecker_TMP_7@5| 0 ) ) ) (not (= |main::__CPAchecker_TMP_7@5| 0 ) ) ) (= |main::S1@4| |main::S0@4| ) ) (= |main::S0@5| |main::S@4| ) ) (= |main::S@5| (+ (+ (+ (+ (* |main::A1@3| |main::E@5| ) (* (- 1) (* |main::E0@5| |main::A2@3| ) ) ) (* |main::E1@4| |main::A3@3| ) ) (* |main::S0@5| |main::B1@3| ) ) (* |main::S1@4| |main::B2@3| ) ) ) ) )
(assert (and (and (or (and (and (and abbrev_39 (<= 0 (+ |main::S@5| (* (- 1) (div (- 1000)  10)) ) ) ) (<= 0 (+ (div 1000  10)(* (- 1) |main::S@5| ) ) ) ) (= |main::__CPAchecker_TMP_8@5| 1 ) ) (and (or (and (and abbrev_39 (<= 0 (+ |main::S@5| (* (- 1) (div (- 1000)  10)) ) ) ) (not (<= 0 (+ (div 1000  10)(* (- 1) |main::S@5| ) ) ) ) ) (and abbrev_39 (not (<= 0 (+ |main::S@5| (* (- 1) (div (- 1000)  10)) ) ) ) ) ) (= |main::__CPAchecker_TMP_8@5| 0 ) ) ) (= |__VERIFIER_assert::cond@3| |main::__CPAchecker_TMP_8@5| ) ) (= |__VERIFIER_assert::cond@3| 0 ) ) )
; setPartitionNumber(-1)
(check-sat)
; getInterpolants(List(Set(4), Set(5, 6)))
; getInterpolants(List(Set(4, 5), Set(6)))
;(get-proof)
(get-interpolants)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
