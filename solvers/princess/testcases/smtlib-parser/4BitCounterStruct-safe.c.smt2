(set-option :produce-models true)
(set-option :produce-interpolants true)
(set-logic AUFNIRA)
(set-info :source |
    SMT script generated on 2015/05/17 by Ultimate. http://ultimate.informatik.uni-freiburg.de/
|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(declare-fun |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~zero| () Int)
(declare-fun |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~one| () Int)
(declare-fun |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~two| () Int)
(declare-fun |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~three| () Int)
(declare-fun |#sizeof~INT| () Int)
(declare-fun |c_old(#NULL.base)| () Int)
(declare-fun |c_old(#NULL.base)_primed| () Int)
(declare-fun |c_#NULL.base| () Int)
(declare-fun |c_#NULL.base_primed| () Int)
(declare-fun |c_old(#NULL.offset)| () Int)
(declare-fun |c_old(#NULL.offset)_primed| () Int)
(declare-fun |c_#NULL.offset| () Int)
(declare-fun |c_#NULL.offset_primed| () Int)
(declare-fun |c_old(#memory_int)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#valid)| () (Array Int Bool))
(declare-fun |c_old(#valid)_primed| () (Array Int Bool))
(declare-fun |c_#valid| () (Array Int Bool))
(declare-fun |c_#valid_primed| () (Array Int Bool))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun c_~malloc_~size () Int)
(declare-fun c_~malloc_~size_primed () Int)
(declare-fun |c_~malloc_#res.base| () Int)
(declare-fun |c_~malloc_#res.base_primed| () Int)
(declare-fun |c_~malloc_#res.offset| () Int)
(declare-fun |c_~malloc_#res.offset_primed| () Int)
(declare-fun |c_read~int_#ptr.base| () Int)
(declare-fun |c_read~int_#ptr.base_primed| () Int)
(declare-fun |c_read~int_#ptr.offset| () Int)
(declare-fun |c_read~int_#ptr.offset_primed| () Int)
(declare-fun |c_read~int_#sizeOfReadType| () Int)
(declare-fun |c_read~int_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int_#value| () Int)
(declare-fun |c_read~int_#value_primed| () Int)
(declare-fun |c_write~int_#value| () Int)
(declare-fun |c_write~int_#value_primed| () Int)
(declare-fun |c_write~int_#ptr.base| () Int)
(declare-fun |c_write~int_#ptr.base_primed| () Int)
(declare-fun |c_write~int_#ptr.offset| () Int)
(declare-fun |c_write~int_#ptr.offset_primed| () Int)
(declare-fun |c_write~int_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int_#sizeOfWrittenType_primed| () Int)
(declare-fun c_~free_~addr.base () Int)
(declare-fun c_~free_~addr.base_primed () Int)
(declare-fun c_~free_~addr.offset () Int)
(declare-fun c_~free_~addr.offset_primed () Int)
(declare-fun |c_ULTIMATE.start_#t~ret17| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret17_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~malloc0.base| () Int)
(declare-fun |c_main_#t~malloc0.base_primed| () Int)
(declare-fun |c_main_#t~malloc0.offset| () Int)
(declare-fun |c_main_#t~malloc0.offset_primed| () Int)
(declare-fun |c_main_#t~mem6| () Int)
(declare-fun |c_main_#t~mem6_primed| () Int)
(declare-fun |c_main_#t~mem9| () Int)
(declare-fun |c_main_#t~mem9_primed| () Int)
(declare-fun |c_main_#t~mem12| () Int)
(declare-fun |c_main_#t~mem12_primed| () Int)
(declare-fun |c_main_#t~mem5| () Int)
(declare-fun |c_main_#t~mem5_primed| () Int)
(declare-fun |c_main_#t~mem16| () Int)
(declare-fun |c_main_#t~mem16_primed| () Int)
(declare-fun c_main_~fb~1.base () Int)
(declare-fun c_main_~fb~1.base_primed () Int)
(declare-fun c_main_~fb~1.offset () Int)
(declare-fun c_main_~fb~1.offset_primed () Int)
(declare-fun c_main_~x3Value~1 () Int)
(declare-fun c_main_~x3Value~1_primed () Int)
(push 1)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#NULL.offset_-1| () Int)
(declare-fun |#valid_-1| () (Array Int Bool))
(declare-fun |#memory_int_-1| () (Array Int (Array Int Int)))
(declare-fun |#NULL.base_-1| () Int)
(declare-fun |old(#length)_-1| () (Array Int Int))
(declare-fun |old(#valid)_-1| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_-1| () Int)
(declare-fun |old(#memory_int)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#NULL.base)_-1| () Int)
(declare-fun |old(#valid)_0| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_0| () Int)
(declare-fun |old(#NULL.base)_0| () Int)
(declare-fun |#NULL.offset_0| () Int)
(declare-fun |#valid_0| () (Array Int Bool))
(declare-fun |#NULL.base_0| () Int)
(declare-fun |#NULL.offset_1| () Int)
(declare-fun |#valid_1| () (Array Int Bool))
(declare-fun |#NULL.base_1| () Int)
(declare-fun |old(#length)_4| () (Array Int Int))
(declare-fun |old(#valid)_4| () (Array Int Bool))
(declare-fun |old(#memory_int)_4| () (Array Int (Array Int Int)))
(declare-fun |#length_4| () (Array Int Int))
(declare-fun |#valid_4| () (Array Int Bool))
(declare-fun |#memory_int_4| () (Array Int (Array Int Int)))
(declare-fun |#length_5| () (Array Int Int))
(declare-fun |main_#t~malloc0.offset_5| () Int)
(declare-fun |main_#t~malloc0.base_5| () Int)
(declare-fun |#valid_5| () (Array Int Bool))
(declare-fun |main_#t~malloc0.offset_6| () Int)
(declare-fun |main_#t~malloc0.base_6| () Int)
(declare-fun main_~fb~1.base_6 () Int)
(declare-fun main_~fb~1.offset_6 () Int)
(declare-fun |#memory_int_7| () (Array Int (Array Int Int)))
(declare-fun |#memory_int_8| () (Array Int (Array Int Int)))
(declare-fun |#memory_int_9| () (Array Int (Array Int Int)))
(declare-fun |#memory_int_10| () (Array Int (Array Int Int)))
(declare-fun |main_#t~mem5_12| () Int)
(declare-fun |main_#t~mem5_13| () Int)
(declare-fun |main_#t~mem16_14| () Int)
(declare-fun main_~x3Value~1_15 () Int)
(declare-fun |main_#t~mem16_15| () Int)


(assert (! (= |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~zero| 0) :named ctxt))
(assert (! (= |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~one| 4) :named ctxt))
(assert (! (= |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~two| 8) :named ctxt))
(assert (! (= |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~three| 12) :named ctxt))
(assert (! (= |#sizeof~INT| 4) :named ctxt))


(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= |#NULL.offset_0| |old(#NULL.offset)_0|) (= |#valid_0| |old(#valid)_0|) (= |#NULL.base_0| |old(#NULL.base)_0|)) :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! (and (= |old(#NULL.offset)_0| |#NULL.offset_-1|) (= |old(#valid)_0| |#valid_-1|) (= |old(#NULL.base)_0| |#NULL.base_-1|)) :named ssa_0_OldVarAssigCall))
(assert (! (and (= |#NULL.base_1| 0) (= |#NULL.offset_1| 0) (= |#valid_1| (store |#valid_0| 0 false))) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (and (= |#valid_4| |old(#valid)_4|) (= |#length_4| |old(#length)_4|) (= |#memory_int_4| |old(#memory_int)_4|)) :named ssa_4_GlobVarAssigCall))
(assert (! true :named ssa_4_LocVarAssigCall))
(assert (! (and (= |old(#valid)_4| |#valid_1|) (= |old(#length)_4| |#length_-1|) (= |old(#memory_int)_4| |#memory_int_-1|)) :named ssa_4_OldVarAssigCall))
(assert (! (and (= |#length_5| (store |#length_4| |main_#t~malloc0.base_5| 16)) (not (= |main_#t~malloc0.base_5| 0)) (= |main_#t~malloc0.offset_5| 0) (= |#valid_5| (store |#valid_4| |main_#t~malloc0.base_5| true)) (= (select |#valid_4| |main_#t~malloc0.base_5|) false)) :named ssa_5))
(assert (! (and (= main_~fb~1.base_6 |main_#t~malloc0.base_5|) (= main_~fb~1.offset_6 |main_#t~malloc0.offset_5|)) :named ssa_6))
(assert (! (and (<= (+ 4 (+ main_~fb~1.offset_6 |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~zero|)) (select |#length_5| main_~fb~1.base_6)) (select |#valid_5| main_~fb~1.base_6) (= |#memory_int_7| (store |#memory_int_4| main_~fb~1.base_6 (store (select |#memory_int_4| main_~fb~1.base_6) (+ main_~fb~1.offset_6 |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~zero|) 0)))) :named ssa_7))
(assert (! (and (<= (+ 4 (+ main_~fb~1.offset_6 |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~one|)) (select |#length_5| main_~fb~1.base_6)) (select |#valid_5| main_~fb~1.base_6) (= |#memory_int_8| (store |#memory_int_7| main_~fb~1.base_6 (store (select |#memory_int_7| main_~fb~1.base_6) (+ main_~fb~1.offset_6 |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~one|) 0)))) :named ssa_8))
(assert (! (and (<= (+ 4 (+ main_~fb~1.offset_6 |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~two|)) (select |#length_5| main_~fb~1.base_6)) (select |#valid_5| main_~fb~1.base_6) (= |#memory_int_9| (store |#memory_int_8| main_~fb~1.base_6 (store (select |#memory_int_8| main_~fb~1.base_6) (+ main_~fb~1.offset_6 |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~two|) 0)))) :named ssa_9))
(assert (! (and (<= (+ 4 (+ main_~fb~1.offset_6 |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~three|)) (select |#length_5| main_~fb~1.base_6)) (select |#valid_5| main_~fb~1.base_6) (= |#memory_int_10| (store |#memory_int_9| main_~fb~1.base_6 (store (select |#memory_int_9| main_~fb~1.base_6) (+ main_~fb~1.offset_6 |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~three|) 0)))) :named ssa_10))
(assert (! true :named ssa_11))
(assert (! (and (<= (+ 4 (+ main_~fb~1.offset_6 |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~three|)) (select |#length_5| main_~fb~1.base_6)) (select |#valid_5| main_~fb~1.base_6) (= |main_#t~mem5_12| (select (select |#memory_int_10| main_~fb~1.base_6) (+ main_~fb~1.offset_6 |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~three|)))) :named ssa_12))
(assert (! (not (= |main_#t~mem5_12| 0)) :named ssa_13))
(assert (! (and (<= (+ 4 (+ main_~fb~1.offset_6 |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~three|)) (select |#length_5| main_~fb~1.base_6)) (select |#valid_5| main_~fb~1.base_6) (= |main_#t~mem16_14| (select (select |#memory_int_10| main_~fb~1.base_6) (+ main_~fb~1.offset_6 |#offset~STRUCT#?zero~INT?one~INT?two~INT?three~INT#~three|)))) :named ssa_14))
(assert (! (= main_~x3Value~1_15 |main_#t~mem16_14|) :named ssa_15))
(assert (! (= main_~x3Value~1_15 0) :named ssa_16))
(check-sat)
(get-interpolants ctxt ssa_0_GlobVarAssigCall ssa_1 ssa_2 (and ssa_3_return ssa_0_LocVarAssigCall ssa_0_OldVarAssigCall ssa_precond) (and ssa_4_GlobVarAssigCall ssa_4_LocVarAssigCall ssa_4_OldVarAssigCall) ssa_5 ssa_6 ssa_7 ssa_8 ssa_9 ssa_10 ssa_11 ssa_12 ssa_13 ssa_14 ssa_15 (and ssa_16 ssa_postcond))
(pop 1)
(exit)
