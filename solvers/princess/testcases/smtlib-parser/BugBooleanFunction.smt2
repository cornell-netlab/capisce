(set-option :produce-models true)
(set-option :produce-interpolants true)
(set-logic QF_UFLIA)
(set-info :source |
    SMT script generated on 2015/01/29 by Ultimate. http://ultimate.informatik.uni-freiburg.de/
|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(declare-fun myFunc (Int) Bool)
(declare-fun myFunc2 (Bool) Bool)
(declare-fun c_proc_x () Int)
(declare-fun c_proc_x_primed () Int)
(declare-fun proc_x_0 () Int)
(declare-fun proc_x_0_2 () Bool)
(push 1)
(assert (distinct (and (= (myFunc 7) true) (= proc_x_0 7)) (and (= (myFunc 7) true) (= proc_x_0 7))))
(check-sat)
(pop 1)
(push 1)
(assert (distinct (not (= (myFunc proc_x_0) true)) (not (= (myFunc proc_x_0) true))))
(check-sat)
(pop 1)
(push 1)
(assert (distinct false false))
(check-sat)
(pop 1)
(push 1)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= (myFunc 7) true) (= proc_x_0 7)) :named ssa_0))
(assert (! (not (= (myFunc proc_x_0) true)) :named ssa_1))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_1 ssa_postcond))
(pop 1)
(push 1)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= (myFunc2 true) true) (= proc_x_0_2 true)) :named ssa_0))
(assert (! (not (= (myFunc2 proc_x_0_2) true)) :named ssa_1))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_1 ssa_postcond))
(pop 1)
(push 1)
(declare-fun ar () (Array Int Bool))
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= (select ar 7) true) (= proc_x_0 7)) :named ssa_0))
(assert (! (not (= (select ar proc_x_0) true)) :named ssa_1))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_1 ssa_postcond))
(pop 1)
(push 1)
(declare-fun ar () (Array Bool Bool))
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= (select ar true) true) (= proc_x_0_2 true)) :named ssa_0))
(assert (! (not (= (select ar proc_x_0_2) true)) :named ssa_1))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_1 ssa_postcond))
(pop 1)
(push 1)
(declare-fun ar () (Array Bool Bool))
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= (select ar false) true) (= proc_x_0_2 false)) :named ssa_0))
(assert (! (not (= (select ar proc_x_0_2) true)) :named ssa_1))
(check-sat)
(get-interpolants (and ssa_0 ssa_precond) (and ssa_1 ssa_postcond))
(pop 1)
