
; Previously, the last get-value command of the script would lead
; to an exception

(reset)
(set-logic AUFLIA)
(set-option :produce-interpolants true)
; setConstructProofs(true)
(declare-fun __VERIFIER_nondet_uint@2 () Int)
(declare-fun __-Infinity__ () Int)
(declare-fun |main::i@3| () Int)
(declare-fun __VERIFIER_error () Int)
(declare-fun |main::sn@2| () Int)
(declare-fun |__VERIFIER_assert::cond@2| () Int)
(declare-fun __+Infinity__ () Int)
(declare-fun |main::n@3| () Int)
(declare-fun |main::__CPAchecker_TMP_0@3| () Int)
(declare-fun __NaN__ () Int)
(declare-fun _^_ (Int Int) Int)
(declare-fun _~_ (Int) Int)
(declare-fun Integer__/_ (Int Int) Int)
(declare-fun __string__ (Int) Int)
(declare-fun Integer__%_ (Int Int) Int)
(declare-fun __isSubnormal__ (Int) Int)
(declare-fun _&_ (Int Int) Int)
(declare-fun _!!_ (Int Int) Int)
(declare-fun _<<_ (Int Int) Int)
(declare-fun _>>_ (Int Int) Int)
(declare-fun Integer__*_ (Int Int) Int)
(push 1)
(push 1)
; setPartitionNumber(0)
(assert (and (and (= |main::sn@2| 0 ) (= |main::n@3| __VERIFIER_nondet_uint@2 ) ) (= |main::i@3| 1 ) ) )
; setPartitionNumber(-1)
(push 1)
; setPartitionNumber(1)
(assert (and (and (or (and (or (and (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) ) (not (= |main::sn@2| (* 2 |main::n@3| ) ) ) ) (= |main::sn@2| 0 ) ) (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) ) (= |main::sn@2| (* 2 |main::n@3| ) ) ) ) (= |main::__CPAchecker_TMP_0@3| 1 ) ) (and (and (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) ) (not (= |main::sn@2| (* 2 |main::n@3| ) ) ) ) (not (= |main::sn@2| 0 ) ) ) (= |main::__CPAchecker_TMP_0@3| 0 ) ) ) (= |__VERIFIER_assert::cond@2| |main::__CPAchecker_TMP_0@3| ) ) (= |__VERIFIER_assert::cond@2| 0 ) ) )
; setPartitionNumber(-1)
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(declare-fun |__VERIFIER_assert::cond@1| () Int)
(declare-fun |__VERIFIER_assert::cond| () Int)
(declare-fun PRED0 () Bool)
(push 1)
(push 1)
(assert (and (and (or (and (or (and (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) ) (not (= |main::sn@2| (* 2 |main::n@3| ) ) ) ) (= |main::sn@2| 0 ) ) (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) ) (= |main::sn@2| (* 2 |main::n@3| ) ) ) ) (= |main::__CPAchecker_TMP_0@3| 1 ) ) (and (and (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) ) (not (= |main::sn@2| (* 2 |main::n@3| ) ) ) ) (not (= |main::sn@2| 0 ) ) ) (= |main::__CPAchecker_TMP_0@3| 0 ) ) ) (= |__VERIFIER_assert::cond@2| |main::__CPAchecker_TMP_0@3| ) ) (= |__VERIFIER_assert::cond@2| 0 ) ) )
(push 1)
(assert (= PRED0 (= |__VERIFIER_assert::cond@2| 0 ) ) )
(push 1)
(check-sat)
(get-value (PRED0 ))
(assert (not (and true PRED0 ) ) )
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(push 1)
(push 1)
; setPartitionNumber(2)
(assert (and (and (= |main::sn@2| 0 ) (= |main::n@3| __VERIFIER_nondet_uint@2 ) ) (= |main::i@3| 1 ) ) )
; setPartitionNumber(-1)
(push 1)
; setPartitionNumber(3)
(assert (and (and (or (and (or (and (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) ) (not (= |main::sn@2| (* 2 |main::n@3| ) ) ) ) (= |main::sn@2| 0 ) ) (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) ) (= |main::sn@2| (* 2 |main::n@3| ) ) ) ) (= |main::__CPAchecker_TMP_0@3| 1 ) ) (and (and (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) ) (not (= |main::sn@2| (* 2 |main::n@3| ) ) ) ) (not (= |main::sn@2| 0 ) ) ) (= |main::__CPAchecker_TMP_0@3| 0 ) ) ) (= |__VERIFIER_assert::cond@2| |main::__CPAchecker_TMP_0@3| ) ) (= |__VERIFIER_assert::cond@2| 0 ) ) )
; setPartitionNumber(-1)
(check-sat)
; getInterpolants(List(Set(2), Set(3)))
(pop 1)
(pop 1)
(pop 1)
(declare-fun |main::sn| () Int)
(declare-fun PRED1 () Bool)
(declare-fun PRED2 () Bool)
(push 1)
(push 1)
(assert (and (and (= |main::sn@2| 0 ) (= |main::n@3| __VERIFIER_nondet_uint@2 ) ) (= |main::i@3| 1 ) ) )
(push 1)
(assert (= PRED1 (= |main::sn@2| 0 ) ) )
(push 1)
(check-sat)
(get-value (PRED1 ))
(assert (not (and true PRED1 ) ) )
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(push 1)
(push 1)
(assert (and (= |main::sn@2| 0 ) (and (and (or (and (or (and (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) ) (not (= |main::sn@2| (* 2 |main::n@3| ) ) ) ) (= |main::sn@2| 0 ) ) (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) ) (= |main::sn@2| (* 2 |main::n@3| ) ) ) ) (= |main::__CPAchecker_TMP_0@3| 1 ) ) (and (and (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) ) (not (= |main::sn@2| (* 2 |main::n@3| ) ) ) ) (not (= |main::sn@2| 0 ) ) ) (= |main::__CPAchecker_TMP_0@3| 0 ) ) ) (= |__VERIFIER_assert::cond@2| |main::__CPAchecker_TMP_0@3| ) ) (= |__VERIFIER_assert::cond@2| 0 ) ) ) )
(push 1)
(assert (= PRED0 (= |__VERIFIER_assert::cond@2| 0 ) ) )
(push 1)
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(declare-fun |main::sn@3| () Int)
(declare-fun |main::sn@4| () Int)
(declare-fun |main::i@4| () Int)
(push 1)
(push 1)
(assert (and (= |main::sn@2| 0 ) (and (or (and (and (and (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) (= |main::sn@3| (+ |main::sn@2| 2 ) ) ) (= |main::i@3| 4 ) ) (= |main::sn@4| (- 10) ) ) (and (and (and (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) (= |main::sn@3| (+ |main::sn@2| 2 ) ) ) (not (= |main::i@3| 4 ) ) ) (= |main::sn@4| |main::sn@3| ) ) ) (= |main::i@4| (+ |main::i@3| 1 ) ) ) ) )
(push 1)
(assert (= PRED1 (= |main::sn@4| 0 ) ) )
(push 1)
(check-sat)
(get-value (PRED1 ))
(assert (not (and true (not PRED1 ) ) ) )
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(push 1)
(push 1)
(assert (and (not (= |main::sn@4| 0 ) ) (and (and (or (and (or (and (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@4| ) ) ) ) (not (= |main::sn@4| (* 2 |main::n@3| ) ) ) ) (= |main::sn@4| 0 ) ) (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@4| ) ) ) ) (= |main::sn@4| (* 2 |main::n@3| ) ) ) ) (= |main::__CPAchecker_TMP_0@3| 1 ) ) (and (and (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@4| ) ) ) ) (not (= |main::sn@4| (* 2 |main::n@3| ) ) ) ) (not (= |main::sn@4| 0 ) ) ) (= |main::__CPAchecker_TMP_0@3| 0 ) ) ) (= |__VERIFIER_assert::cond@2| |main::__CPAchecker_TMP_0@3| ) ) (= |__VERIFIER_assert::cond@2| 0 ) ) ) )
(push 1)
(assert (= PRED0 (= |__VERIFIER_assert::cond@2| 0 ) ) )
(push 1)
(check-sat)
(get-value (PRED0 ))
(assert (not (and true PRED0 ) ) )
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(push 1)
(push 1)
; setPartitionNumber(4)
(assert (and (and (= |main::sn@2| 0 ) (= |main::n@3| __VERIFIER_nondet_uint@2 ) ) (= |main::i@3| 1 ) ) )
; setPartitionNumber(-1)
(push 1)
; setPartitionNumber(5)
(assert (and (or (and (and (and (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) (= |main::sn@3| (+ |main::sn@2| 2 ) ) ) (= |main::i@3| 4 ) ) (= |main::sn@4| (- 10) ) ) (and (and (and (<= 0 (+ |main::n@3| (* (- 1) |main::i@3| ) ) ) (= |main::sn@3| (+ |main::sn@2| 2 ) ) ) (not (= |main::i@3| 4 ) ) ) (= |main::sn@4| |main::sn@3| ) ) ) (= |main::i@4| (+ |main::i@3| 1 ) ) ) )
; setPartitionNumber(-1)
(push 1)
; setPartitionNumber(6)
(assert (and (and (or (and (or (and (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@4| ) ) ) ) (not (= |main::sn@4| (* 2 |main::n@3| ) ) ) ) (= |main::sn@4| 0 ) ) (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@4| ) ) ) ) (= |main::sn@4| (* 2 |main::n@3| ) ) ) ) (= |main::__CPAchecker_TMP_0@3| 1 ) ) (and (and (and (not (<= 0 (+ |main::n@3| (* (- 1) |main::i@4| ) ) ) ) (not (= |main::sn@4| (* 2 |main::n@3| ) ) ) ) (not (= |main::sn@4| 0 ) ) ) (= |main::__CPAchecker_TMP_0@3| 0 ) ) ) (= |__VERIFIER_assert::cond@2| |main::__CPAchecker_TMP_0@3| ) ) (= |__VERIFIER_assert::cond@2| 0 ) ) )
; setPartitionNumber(-1)
(check-sat)
; getInterpolants(List(Set(4), Set(5, 6)))
; getInterpolants(List(Set(4, 5), Set(6)))
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(declare-fun |main::i| () Int)
(declare-fun PRED3 () Bool)
(declare-fun |main::n| () Int)
(declare-fun PRED4 () Bool)
(declare-fun PRED5 () Bool)
(push 1)
(push 1)
(assert (and (and (= |main::sn@2| 0 ) (= |main::n@3| __VERIFIER_nondet_uint@2 ) ) (= |main::i@3| 1 ) ) )
(push 1)
(assert (and (and (and (= PRED1 (= |main::sn@2| 0 ) ) (= PRED3 (= |main::i@3| 1 ) ) ) (= PRED4 (<= 0 (+ (* (- 1) |main::i@3| ) |main::n@3| ) ) ) ) (= PRED5 (= (+ |main::sn@2| (* (- 2) |main::n@3| ) ) 0 ) ) ) )
(push 1)
(check-sat)
(get-value (PRED1 ))
(get-value (PRED3 ))
(get-value (PRED4 ))
(get-value (PRED5 ))
(assert (not (and (and (and (and true PRED1 ) PRED3 ) (not PRED4 ) ) PRED5 ) ) )
(check-sat)
(get-value (PRED1 ))
(get-value (PRED3 ))


(get-value (PRED4 ))
(pop 1)
(pop 1)
(pop 1)
