fof('EQ-acons', axiom, ![VAName0, VAName1, VAList0, VAList1] : ((VAName0 = VAName1 & VAList0 = VAList1) <=> vacons(VAName0, VAList0) = vacons(VAName1, VAList1))).
fof('DIFF-aempty-acons', axiom, ![VAName0, VAList0] : vaempty != vacons(VAName0, VAList0)).
fof('append0', axiom, ![Vy] : vappend(vaempty, Vy) = Vy).
fof('append1', axiom, ![Va, Val, Vy] : vappend(vacons(Va, Val), Vy) = vacons(Va, vappend(Val, Vy))).
fof('append-INV', axiom, ![VAList0, VAList1, VRESULT] : (vappend(VAList0, VAList1) = VRESULT => (?[Vy] : (VAList0 = vaempty & VAList1 = Vy & VRESULT = Vy) | ?[Va, Val, Vy] : (VAList0 = vacons(Va, Val) & VAList1 = Vy & VRESULT = vacons(Va, vappend(Val, Vy)))))).
fof('EQ-ctype', axiom, ![VAName0, VAName1, VFType0, VFType1] : ((VAName0 = VAName1 & VFType0 = VFType1) <=> vctype(VAName0, VFType0) = vctype(VAName1, VFType1))).
fof('EQ-ttcons', axiom, ![VCType0, VCType1, VTType0, VTType1] : ((VCType0 = VCType1 & VTType0 = VTType1) <=> vttcons(VCType0, VTType0) = vttcons(VCType1, VTType1))).
fof('DIFF-ttempty-ttcons', axiom, ![VCType0, VTType0] : vttempty != vttcons(VCType0, VTType0)).
fof('EQ-rtcons', axiom, ![VFType0, VFType1, VRawType0, VRawType1] : ((VFType0 = VFType1 & VRawType0 = VRawType1) <=> vrtcons(VFType0, VRawType0) = vrtcons(VFType1, VRawType1))).
fof('DIFF-rtempty-rtcons', axiom, ![VFType0, VRawType0] : vrtempty != vrtcons(VFType0, VRawType0)).
fof('EQ-rcons', axiom, ![VFVal0, VFVal1, VRow0, VRow1] : ((VFVal0 = VFVal1 & VRow0 = VRow1) <=> vrcons(VFVal0, VRow0) = vrcons(VFVal1, VRow1))).
fof('DIFF-rempty-rcons', axiom, ![VFVal0, VRow0] : vrempty != vrcons(VFVal0, VRow0)).
fof('EQ-tcons', axiom, ![VRow0, VRow1, VRawTable0, VRawTable1] : ((VRow0 = VRow1 & VRawTable0 = VRawTable1) <=> vtcons(VRow0, VRawTable0) = vtcons(VRow1, VRawTable1))).
fof('DIFF-tempty-tcons', axiom, ![VRow0, VRawTable0] : vtempty != vtcons(VRow0, VRawTable0)).
fof('EQ-table', axiom, ![VAList0, VAList1, VRawTable0, VRawTable1] : ((VAList0 = VAList1 & VRawTable0 = VRawTable1) <=> vtable(VAList0, VRawTable0) = vtable(VAList1, VRawTable1))).
fof('getRaw0', axiom, ![Val, Vrt] : vgetRaw(vtable(Val, Vrt)) = Vrt).
fof('getAL0', axiom, ![Val, Vrt] : vgetAL(vtable(Val, Vrt)) = Val).
fof('matchingAList0', axiom, vmatchingAList(vttempty, vaempty)).
fof('matchingAList1', axiom, ![Va1, Va2, Val, Vf, Vtt] : (vmatchingAList(vttcons(vctype(Va1, Vf), Vtt), vacons(Va2, Val)) <=> (Va1 = Va2 & vmatchingAList(Vtt, Val)))).
fof('matchingAList2', axiom, ![Vtt, Val] : (((Vtt != vttempty | Val != vaempty) & (![Va10, Vf0, Vtt0] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20, Val0] : Val != vacons(Va20, Val0))) => (~vmatchingAList(Vtt, Val)))).
fof('matchingAList-true-INV', axiom, ![VTType0, VAList0] : (vmatchingAList(VTType0, VAList0) => ((VTType0 = vttempty & VAList0 = vaempty) | ?[Va1, Va2, Val, Vf, Vtt] : (VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val) & (Va1 = Va2 & vmatchingAList(Vtt, Val)))))).
fof('matchingAList-false-INV', axiom, ![VTType0, VAList0] : ((~vmatchingAList(VTType0, VAList0)) => (?[Va1, Va2, Val, Vf, Vtt] : (VTType0 = vttcons(vctype(Va1, Vf), Vtt) & VAList0 = vacons(Va2, Val) & (~(Va1 = Va2 & vmatchingAList(Vtt, Val)))) | ?[Vtt, Val] : ((Vtt != vttempty | Val != vaempty) & (![Va10, Vf0, Vtt0] : Vtt != vttcons(vctype(Va10, Vf0), Vtt0) | ![Va20, Val0] : Val != vacons(Va20, Val0)) & VTType0 = Vtt & VAList0 = Val)))).
fof('welltypedtable0', axiom, ![Vtt, Val, Vt] : (vwelltypedtable(Vtt, vtable(Val, Vt)) <=> (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))).
fof('welltypedtable-true-INV', axiom, ![VTType0, VTable0] : (vwelltypedtable(VTType0, VTable0) => ?[Vtt, Val, Vt] : (VTType0 = Vtt & VTable0 = vtable(Val, Vt) & (vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt))))).
fof('welltypedtable-false-INV', axiom, ![VTType0, VTable0] : ((~vwelltypedtable(VTType0, VTable0)) => ?[Vtt, Val, Vt] : (VTType0 = Vtt & VTable0 = vtable(Val, Vt) & (~(vmatchingAList(Vtt, Val) & vwelltypedRawtable(vrawType(Vtt), Vt)))))).
fof('rawType0', axiom, vrawType(vttempty) = vrtempty).
fof('rawType1', axiom, ![Va, Vft, Vtt] : vrawType(vttcons(vctype(Va, Vft), Vtt)) = vrtcons(Vft, vrawType(Vtt))).
fof('rawType-INV', axiom, ![VTType0, VRESULT] : (vrawType(VTType0) = VRESULT => ((VTType0 = vttempty & VRESULT = vrtempty) | ?[Va, Vft, Vtt] : (VTType0 = vttcons(vctype(Va, Vft), Vtt) & VRESULT = vrtcons(Vft, vrawType(Vtt)))))).
fof('welltypedRawtable0', axiom, ![Vrt] : vwelltypedRawtable(Vrt, vtempty)).
fof('welltypedRawtable1', axiom, ![Vrt, Vr, Vt] : (vwelltypedRawtable(Vrt, vtcons(Vr, Vt)) <=> (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))).
fof('welltypedRawtable-true-INV', axiom, ![VRawType0, VRawTable0] : (vwelltypedRawtable(VRawType0, VRawTable0) => (?[Vrt] : (VRawType0 = Vrt & VRawTable0 = vtempty) | ?[Vrt, Vr, Vt] : (VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt) & (vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))))).
fof('welltypedRawtable-false-INV', axiom, ![VRawType0, VRawTable0] : ((~vwelltypedRawtable(VRawType0, VRawTable0)) => ?[Vrt, Vr, Vt] : (VRawType0 = Vrt & VRawTable0 = vtcons(Vr, Vt) & (~(vwelltypedRow(Vrt, Vr) & vwelltypedRawtable(Vrt, Vt)))))).
fof('welltypedRow0', axiom, vwelltypedRow(vrtempty, vrempty)).
fof('welltypedRow1', axiom, ![Vft, Vrt, Vv, Vr] : (vwelltypedRow(vrtcons(Vft, Vrt), vrcons(Vv, Vr)) <=> (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))).
fof('welltypedRow2', axiom, ![Vrt, Vr] : (((Vrt != vrtempty | Vr != vrempty) & (![Vft0, Vrt0] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0, Vr0] : Vr != vrcons(Vv0, Vr0))) => (~vwelltypedRow(Vrt, Vr)))).
fof('welltypedRow-true-INV', axiom, ![VRawType0, VRow0] : (vwelltypedRow(VRawType0, VRow0) => ((VRawType0 = vrtempty & VRow0 = vrempty) | ?[Vft, Vrt, Vv, Vr] : (VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr) & (vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))))).
fof('welltypedRow-false-INV', axiom, ![VRawType0, VRow0] : ((~vwelltypedRow(VRawType0, VRow0)) => (?[Vft, Vrt, Vv, Vr] : (VRawType0 = vrtcons(Vft, Vrt) & VRow0 = vrcons(Vv, Vr) & (~(vfieldType(Vv) = Vft & vwelltypedRow(Vrt, Vr)))) | ?[Vrt, Vr] : ((Vrt != vrtempty | Vr != vrempty) & (![Vft0, Vrt0] : Vrt != vrtcons(Vft0, Vrt0) | ![Vv0, Vr0] : Vr != vrcons(Vv0, Vr0)) & VRawType0 = Vrt & VRow0 = Vr)))).
fof('EQ-someTable', axiom, ![VTable0, VTable1] : (VTable0 = VTable1 <=> vsomeTable(VTable0) = vsomeTable(VTable1))).
fof('DIFF-noTable-someTable', axiom, ![VTable0] : vnoTable != vsomeTable(VTable0)).
fof('isSomeTable0', axiom, (~visSomeTable(vnoTable))).
fof('isSomeTable1', axiom, ![Vt] : visSomeTable(vsomeTable(Vt))).
fof('isSomeTable-true-INV', axiom, ![VOptTable0] : (visSomeTable(VOptTable0) => ?[Vt] : VOptTable0 = vsomeTable(Vt))).
fof('isSomeTable-false-INV', axiom, ![VOptTable0] : ((~visSomeTable(VOptTable0)) => VOptTable0 = vnoTable)).
fof('getSomeTable0', axiom, ![Vt] : vgetSomeTable(vsomeTable(Vt)) = Vt).
fof('EQ-bindStore', axiom, ![VTable1, VTStore1, VTName0, VTStore0, VTName1, VTable0] : ((VTName0 = VTName1 & (VTable0 = VTable1 & VTStore0 = VTStore1)) <=> vbindStore(VTName0, VTable0, VTStore0) = vbindStore(VTName1, VTable1, VTStore1))).
fof('DIFF-emptyStore-bindStore', axiom, ![VTName0, VTable0, VTStore0] : vemptyStore != vbindStore(VTName0, VTable0, VTStore0)).
fof('lookupStore0', axiom, ![Vn] : vlookupStore(Vn, vemptyStore) = vnoTable).
fof('lookupStore1', axiom, ![Vn, Vm, Vt, VTS] : (Vn = Vm => vlookupStore(Vn, vbindStore(Vm, Vt, VTS)) = vsomeTable(Vt))).
fof('lookupStore2', axiom, ![Vn, Vm, Vt, VTS] : (Vn != Vm => vlookupStore(Vn, vbindStore(Vm, Vt, VTS)) = vlookupStore(Vn, VTS))).
fof('lookupStore-INV', axiom, ![VTName0, VTStore0, VRESULT] : (vlookupStore(VTName0, VTStore0) = VRESULT => (?[Vn] : (VTName0 = Vn & VTStore0 = vemptyStore & VRESULT = vnoTable) | ?[Vn, Vm, Vt, VTS] : (Vn = Vm & VTName0 = Vn & VTStore0 = vbindStore(Vm, Vt, VTS) & VRESULT = vsomeTable(Vt)) | ?[Vn, Vm, Vt, VTS] : (Vn != Vm & VTName0 = Vn & VTStore0 = vbindStore(Vm, Vt, VTS) & VRESULT = vlookupStore(Vn, VTS))))).
fof('EQ-VEquals', axiom, ![VAName0, VAName1, VFVal0, VFVal1] : ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVEquals(VAName0, VFVal0) = vVEquals(VAName1, VFVal1))).
fof('EQ-VGreater', axiom, ![VAName0, VAName1, VFVal0, VFVal1] : ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVGreater(VAName0, VFVal0) = vVGreater(VAName1, VFVal1))).
fof('EQ-VSmaller', axiom, ![VAName0, VAName1, VFVal0, VFVal1] : ((VAName0 = VAName1 & VFVal0 = VFVal1) <=> vVSmaller(VAName0, VFVal0) = vVSmaller(VAName1, VFVal1))).
fof('DIFF-VEquals-VGreater', axiom, ![VAName0, VFVal0, VAName1, VFVal1] : vVEquals(VAName0, VFVal0) != vVGreater(VAName1, VFVal1)).
fof('DIFF-VEquals-VSmaller', axiom, ![VAName0, VFVal0, VAName1, VFVal1] : vVEquals(VAName0, VFVal0) != vVSmaller(VAName1, VFVal1)).
fof('DIFF-VGreater-VSmaller', axiom, ![VAName0, VFVal0, VAName1, VFVal1] : vVGreater(VAName0, VFVal0) != vVSmaller(VAName1, VFVal1)).
fof('EQ-Ref', axiom, ![VTName0, VTName1] : (VTName0 = VTName1 <=> vRef(VTName0) = vRef(VTName1))).
fof('EQ-Tvalue', axiom, ![VTable0, VTable1] : (VTable0 = VTable1 <=> vTvalue(VTable0) = vTvalue(VTable1))).
fof('EQ-SelectAllFrom', axiom, ![VTRef0, VTRef1] : (VTRef0 = VTRef1 <=> vSelectAllFrom(VTRef0) = vSelectAllFrom(VTRef1))).
fof('EQ-SelectSomeFrom', axiom, ![VAList0, VAList1, VTRef0, VTRef1] : ((VAList0 = VAList1 & VTRef0 = VTRef1) <=> vSelectSomeFrom(VAList0, VTRef0) = vSelectSomeFrom(VAList1, VTRef1))).
fof('EQ-SelectAllFromWhere', axiom, ![VTRef0, VTRef1, VPred0, VPred1] : ((VTRef0 = VTRef1 & VPred0 = VPred1) <=> vSelectAllFromWhere(VTRef0, VPred0) = vSelectAllFromWhere(VTRef1, VPred1))).
fof('EQ-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VPred1, VAList1, VTRef1, VTRef0] : ((VAList0 = VAList1 & (VTRef0 = VTRef1 & VPred0 = VPred1)) <=> vSelectSomeFromWhere(VAList0, VTRef0, VPred0) = vSelectSomeFromWhere(VAList1, VTRef1, VPred1))).
fof('EQ-Union', axiom, ![VQuery0, VQuery2, VQuery1, VQuery3] : ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vUnion(VQuery0, VQuery1) = vUnion(VQuery2, VQuery3))).
fof('EQ-Intersection', axiom, ![VQuery0, VQuery2, VQuery1, VQuery3] : ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vIntersection(VQuery0, VQuery1) = vIntersection(VQuery2, VQuery3))).
fof('EQ-Difference', axiom, ![VQuery0, VQuery2, VQuery1, VQuery3] : ((VQuery0 = VQuery2 & VQuery1 = VQuery3) <=> vDifference(VQuery0, VQuery1) = vDifference(VQuery2, VQuery3))).
fof('DIFF-Tvalue-SelectAllFrom', axiom, ![VTable0, VTRef0] : vTvalue(VTable0) != vSelectAllFrom(VTRef0)).
fof('DIFF-Tvalue-SelectSomeFrom', axiom, ![VTable0, VAList0, VTRef0] : vTvalue(VTable0) != vSelectSomeFrom(VAList0, VTRef0)).
fof('DIFF-Tvalue-SelectAllFromWhere', axiom, ![VTable0, VTRef0, VPred0] : vTvalue(VTable0) != vSelectAllFromWhere(VTRef0, VPred0)).
fof('DIFF-Tvalue-SelectSomeFromWhere', axiom, ![VTable0, VAList0, VTRef0, VPred0] : vTvalue(VTable0) != vSelectSomeFromWhere(VAList0, VTRef0, VPred0)).
fof('DIFF-Tvalue-Union', axiom, ![VTable0, VQuery0, VQuery1] : vTvalue(VTable0) != vUnion(VQuery0, VQuery1)).
fof('DIFF-Tvalue-Intersection', axiom, ![VTable0, VQuery0, VQuery1] : vTvalue(VTable0) != vIntersection(VQuery0, VQuery1)).
fof('DIFF-Tvalue-Difference', axiom, ![VTable0, VQuery0, VQuery1] : vTvalue(VTable0) != vDifference(VQuery0, VQuery1)).
fof('DIFF-SelectAllFrom-SelectSomeFrom', axiom, ![VTRef0, VAList0, VTRef1] : vSelectAllFrom(VTRef0) != vSelectSomeFrom(VAList0, VTRef1)).
fof('DIFF-SelectAllFrom-SelectAllFromWhere', axiom, ![VTRef0, VTRef1, VPred0] : vSelectAllFrom(VTRef0) != vSelectAllFromWhere(VTRef1, VPred0)).
fof('DIFF-SelectAllFrom-SelectSomeFromWhere', axiom, ![VTRef0, VAList0, VTRef1, VPred0] : vSelectAllFrom(VTRef0) != vSelectSomeFromWhere(VAList0, VTRef1, VPred0)).
fof('DIFF-SelectAllFrom-Union', axiom, ![VTRef0, VQuery0, VQuery1] : vSelectAllFrom(VTRef0) != vUnion(VQuery0, VQuery1)).
fof('DIFF-SelectAllFrom-Intersection', axiom, ![VTRef0, VQuery0, VQuery1] : vSelectAllFrom(VTRef0) != vIntersection(VQuery0, VQuery1)).
fof('DIFF-SelectAllFrom-Difference', axiom, ![VTRef0, VQuery0, VQuery1] : vSelectAllFrom(VTRef0) != vDifference(VQuery0, VQuery1)).
fof('DIFF-SelectSomeFrom-SelectAllFromWhere', axiom, ![VAList0, VTRef0, VTRef1, VPred0] : vSelectSomeFrom(VAList0, VTRef0) != vSelectAllFromWhere(VTRef1, VPred0)).
fof('DIFF-SelectSomeFrom-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VAList1, VTRef1, VTRef0] : vSelectSomeFrom(VAList0, VTRef0) != vSelectSomeFromWhere(VAList1, VTRef1, VPred0)).
fof('DIFF-SelectSomeFrom-Union', axiom, ![VAList0, VTRef0, VQuery0, VQuery1] : vSelectSomeFrom(VAList0, VTRef0) != vUnion(VQuery0, VQuery1)).
fof('DIFF-SelectSomeFrom-Intersection', axiom, ![VAList0, VTRef0, VQuery0, VQuery1] : vSelectSomeFrom(VAList0, VTRef0) != vIntersection(VQuery0, VQuery1)).
fof('DIFF-SelectSomeFrom-Difference', axiom, ![VAList0, VTRef0, VQuery0, VQuery1] : vSelectSomeFrom(VAList0, VTRef0) != vDifference(VQuery0, VQuery1)).
fof('DIFF-SelectAllFromWhere-SelectSomeFromWhere', axiom, ![VAList0, VPred0, VPred1, VTRef1, VTRef0] : vSelectAllFromWhere(VTRef0, VPred0) != vSelectSomeFromWhere(VAList0, VTRef1, VPred1)).
fof('DIFF-SelectAllFromWhere-Union', axiom, ![VTRef0, VPred0, VQuery0, VQuery1] : vSelectAllFromWhere(VTRef0, VPred0) != vUnion(VQuery0, VQuery1)).
fof('DIFF-SelectAllFromWhere-Intersection', axiom, ![VTRef0, VPred0, VQuery0, VQuery1] : vSelectAllFromWhere(VTRef0, VPred0) != vIntersection(VQuery0, VQuery1)).
fof('DIFF-SelectAllFromWhere-Difference', axiom, ![VTRef0, VPred0, VQuery0, VQuery1] : vSelectAllFromWhere(VTRef0, VPred0) != vDifference(VQuery0, VQuery1)).
fof('DIFF-SelectSomeFromWhere-Union', axiom, ![VAList0, VPred0, VQuery1, VQuery0, VTRef0] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vUnion(VQuery0, VQuery1)).
fof('DIFF-SelectSomeFromWhere-Intersection', axiom, ![VAList0, VPred0, VQuery1, VQuery0, VTRef0] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vIntersection(VQuery0, VQuery1)).
fof('DIFF-SelectSomeFromWhere-Difference', axiom, ![VAList0, VPred0, VQuery1, VQuery0, VTRef0] : vSelectSomeFromWhere(VAList0, VTRef0, VPred0) != vDifference(VQuery0, VQuery1)).
fof('DIFF-Union-Intersection', axiom, ![VQuery0, VQuery1, VQuery2, VQuery3] : vUnion(VQuery0, VQuery1) != vIntersection(VQuery2, VQuery3)).
fof('DIFF-Union-Difference', axiom, ![VQuery0, VQuery1, VQuery2, VQuery3] : vUnion(VQuery0, VQuery1) != vDifference(VQuery2, VQuery3)).
fof('DIFF-Intersection-Difference', axiom, ![VQuery0, VQuery1, VQuery2, VQuery3] : vIntersection(VQuery0, VQuery1) != vDifference(VQuery2, VQuery3)).
fof('isValue0', axiom, ![Vt] : visValue(vTvalue(Vt))).
fof('isValue1', axiom, ![Vn] : (~visValue(vSelectAllFrom(Vn)))).
fof('isValue2', axiom, ![Val, Vtr] : (~visValue(vSelectSomeFrom(Val, Vtr)))).
fof('isValue3', axiom, ![Vtr, Vp] : (~visValue(vSelectAllFromWhere(Vtr, Vp)))).
fof('isValue4', axiom, ![Val, Vtr, Vp] : (~visValue(vSelectSomeFromWhere(Val, Vtr, Vp)))).
fof('isValue5', axiom, ![Vq1, Vq2] : (~visValue(vUnion(Vq1, Vq2)))).
fof('isValue6', axiom, ![Vsql1, Vsql2] : (~visValue(vIntersection(Vsql1, Vsql2)))).
fof('isValue7', axiom, ![Vsql1, Vsql2] : (~visValue(vDifference(Vsql1, Vsql2)))).
fof('isValue-true-INV', axiom, ![VQuery0] : (visValue(VQuery0) => ?[Vt] : VQuery0 = vTvalue(Vt))).
fof('isValue-false-INV', axiom, ![VQuery0] : ((~visValue(VQuery0)) => (?[Vn] : VQuery0 = vSelectAllFrom(Vn) | ?[Val, Vtr] : VQuery0 = vSelectSomeFrom(Val, Vtr) | ?[Vtr, Vp] : VQuery0 = vSelectAllFromWhere(Vtr, Vp) | ?[Val, Vtr, Vp] : VQuery0 = vSelectSomeFromWhere(Val, Vtr, Vp) | ?[Vq1, Vq2] : VQuery0 = vUnion(Vq1, Vq2) | ?[Vsql1, Vsql2] : VQuery0 = vIntersection(Vsql1, Vsql2) | ?[Vsql1, Vsql2] : VQuery0 = vDifference(Vsql1, Vsql2)))).
fof('rowIn0', axiom, ![Vr1] : (~vrowIn(Vr1, vtempty))).
fof('rowIn1', axiom, ![Vr1, Vr2, Vrt] : (vrowIn(Vr1, vtcons(Vr2, Vrt)) <=> (Vr1 = Vr2 | vrowIn(Vr1, Vrt)))).
fof('rowIn-true-INV', axiom, ![VRow0, VRawTable0] : (vrowIn(VRow0, VRawTable0) => ?[Vr1, Vr2, Vrt] : (VRow0 = Vr1 & VRawTable0 = vtcons(Vr2, Vrt) & (Vr1 = Vr2 | vrowIn(Vr1, Vrt))))).
fof('rowIn-false-INV', axiom, ![VRow0, VRawTable0] : ((~vrowIn(VRow0, VRawTable0)) => (?[Vr1] : (VRow0 = Vr1 & VRawTable0 = vtempty) | ?[Vr1, Vr2, Vrt] : (VRow0 = Vr1 & VRawTable0 = vtcons(Vr2, Vrt) & (~(Vr1 = Vr2 | vrowIn(Vr1, Vrt))))))).
fof('projectFirstRaw0', axiom, vprojectFirstRaw(vtempty) = vtempty).
fof('projectFirstRaw1', axiom, ![Vrt] : vprojectFirstRaw(vtcons(vrempty, Vrt)) = vtcons(vrempty, vprojectFirstRaw(Vrt))).
fof('projectFirstRaw2', axiom, ![Vf, Vr, Vrt] : vprojectFirstRaw(vtcons(vrcons(Vf, Vr), Vrt)) = vtcons(vrcons(Vf, vrempty), vprojectFirstRaw(Vrt))).
fof('dropFirstColRaw0', axiom, vdropFirstColRaw(vtempty) = vtempty).
fof('dropFirstColRaw1', axiom, ![Vrt] : vdropFirstColRaw(vtcons(vrempty, Vrt)) = vtcons(vrempty, vdropFirstColRaw(Vrt))).
fof('dropFirstColRaw2', axiom, ![Vf, Vr, Vrt] : vdropFirstColRaw(vtcons(vrcons(Vf, Vr), Vrt)) = vtcons(Vr, vdropFirstColRaw(Vrt))).
fof('dropFirstColRaw-INV', axiom, ![VRawTable0, VRESULT] : (vdropFirstColRaw(VRawTable0) = VRESULT => ((VRawTable0 = vtempty & VRESULT = vtempty) | ?[Vrt] : (VRawTable0 = vtcons(vrempty, Vrt) & VRESULT = vtcons(vrempty, vdropFirstColRaw(Vrt))) | ?[Vf, Vr, Vrt] : (VRawTable0 = vtcons(vrcons(Vf, Vr), Vrt) & VRESULT = vtcons(Vr, vdropFirstColRaw(Vrt)))))).
fof('EQ-someRawTable', axiom, ![VRawTable0, VRawTable1] : (VRawTable0 = VRawTable1 <=> vsomeRawTable(VRawTable0) = vsomeRawTable(VRawTable1))).
fof('DIFF-noRawTable-someRawTable', axiom, ![VRawTable0] : vnoRawTable != vsomeRawTable(VRawTable0)).
fof('isSomeRawTable0', axiom, (~visSomeRawTable(vnoRawTable))).
fof('isSomeRawTable1', axiom, ![Vt] : visSomeRawTable(vsomeRawTable(Vt))).
fof('isSomeRawTable-true-INV', axiom, ![VOptRawTable0] : (visSomeRawTable(VOptRawTable0) => ?[Vt] : VOptRawTable0 = vsomeRawTable(Vt))).
fof('isSomeRawTable-false-INV', axiom, ![VOptRawTable0] : ((~visSomeRawTable(VOptRawTable0)) => VOptRawTable0 = vnoRawTable)).
fof('getSomeRawTable0', axiom, ![Vt] : vgetSomeRawTable(vsomeRawTable(Vt)) = Vt).
fof('attachColToFrontRaw0', axiom, vattachColToFrontRaw(vtempty, vtempty) = vsomeRawTable(vtempty)).
fof('attachColToFrontRaw1', axiom, ![Vrt1, Vrest, Vr, Vf, Vrt2] : ((Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & visSomeRawTable(Vrest)) => vattachColToFrontRaw(vtcons(vrcons(Vf, vrempty), Vrt1), vtcons(Vr, Vrt2)) = vsomeRawTable(vtcons(vrcons(Vf, Vr), vgetSomeRawTable(Vrest))))).
fof('attachColToFrontRaw2', axiom, ![Vrt1, Vrest, Vr, Vf, Vrt2] : ((Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & (~visSomeRawTable(Vrest))) => vattachColToFrontRaw(vtcons(vrcons(Vf, vrempty), Vrt1), vtcons(Vr, Vrt2)) = vnoRawTable)).
fof('attachColToFrontRaw3', axiom, ![Vrt1, Vrt2] : (((Vrt1 != vtempty | Vrt2 != vtempty) & (![Vf0, Vrt10] : Vrt1 != vtcons(vrcons(Vf0, vrempty), Vrt10) | ![Vr0, Vrt20] : Vrt2 != vtcons(Vr0, Vrt20))) => vattachColToFrontRaw(Vrt1, Vrt2) = vnoRawTable)).
fof('attachColToFrontRaw-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vattachColToFrontRaw(VRawTable0, VRawTable1) = VRESULT => ((VRawTable0 = vtempty & VRawTable1 = vtempty & VRESULT = vsomeRawTable(vtempty)) | ?[Vrt1, Vrest, Vr, Vf, Vrt2] : (Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & visSomeRawTable(Vrest) & VRawTable0 = vtcons(vrcons(Vf, vrempty), Vrt1) & VRawTable1 = vtcons(Vr, Vrt2) & VRESULT = vsomeRawTable(vtcons(vrcons(Vf, Vr), vgetSomeRawTable(Vrest)))) | ?[Vrt1, Vrest, Vr, Vf, Vrt2] : (Vrest = vattachColToFrontRaw(Vrt1, Vrt2) & (~visSomeRawTable(Vrest)) & VRawTable0 = vtcons(vrcons(Vf, vrempty), Vrt1) & VRawTable1 = vtcons(Vr, Vrt2) & VRESULT = vnoRawTable) | ?[Vrt1, Vrt2] : ((Vrt1 != vtempty | Vrt2 != vtempty) & (![Vf0, Vrt10] : Vrt1 != vtcons(vrcons(Vf0, vrempty), Vrt10) | ![Vr0, Vrt20] : Vrt2 != vtcons(Vr0, Vrt20)) & VRawTable0 = Vrt1 & VRawTable1 = Vrt2 & VRESULT = vnoRawTable)))).
fof('rawUnion0', axiom, ![Vrt2] : vrawUnion(vtempty, Vrt2) = Vrt2).
fof('rawUnion1', axiom, ![Vrt1] : vrawUnion(Vrt1, vtempty) = Vrt1).
fof('rawUnion2', axiom, ![Vurt1rt2, Vrt1, Vrt2, Vr1] : ((Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2))) => vrawUnion(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, Vurt1rt2))).
fof('rawUnion3', axiom, ![Vurt1rt2, Vrt1, Vrt2, Vr1] : ((Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & vrowIn(Vr1, Vrt2)) => vrawUnion(vtcons(Vr1, Vrt1), Vrt2) = Vurt1rt2)).
fof('rawUnion-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawUnion(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = Vrt2) | ?[Vrt1] : (VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = Vrt1) | ?[Vurt1rt2, Vrt1, Vrt2, Vr1] : (Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, Vurt1rt2)) | ?[Vurt1rt2, Vrt1, Vrt2, Vr1] : (Vurt1rt2 = vrawUnion(Vrt1, Vrt2) & vrowIn(Vr1, Vrt2) & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vurt1rt2)))).
fof('rawIntersection0', axiom, ![Vrt2] : vrawIntersection(vtempty, Vrt2) = vtempty).
fof('rawIntersection1', axiom, ![Vrt1] : vrawIntersection(Vrt1, vtempty) = vtempty).
fof('rawIntersection2', axiom, ![Vr1, Vrt2] : (vrowIn(Vr1, Vrt2) => vrawIntersection(vtcons(Vr1, vtempty), Vrt2) = vtcons(Vr1, vtempty))).
fof('rawIntersection3', axiom, ![Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) => vrawIntersection(vtcons(Vr1, vtempty), Vrt2) = vtempty)).
fof('rawIntersection4', axiom, ![Vurt1rt2, Vrt1, Vrt2, Vr1] : ((Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & vrowIn(Vr1, Vrt2) & Vrt1 != vtempty) => vrawIntersection(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, Vurt1rt2))).
fof('rawIntersection5', axiom, ![Vurt1rt2, Vrt1, Vrt2, Vr1] : ((Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt1 != vtempty) => vrawIntersection(vtcons(Vr1, Vrt1), Vrt2) = Vurt1rt2)).
fof('rawIntersection-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawIntersection(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1] : (VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = vtempty) | ?[Vr1, Vrt2] : (vrowIn(Vr1, Vrt2) & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vtempty)) | ?[Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vurt1rt2, Vrt1, Vrt2, Vr1] : (Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & vrowIn(Vr1, Vrt2) & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, Vurt1rt2)) | ?[Vurt1rt2, Vrt1, Vrt2, Vr1] : (Vurt1rt2 = vrawIntersection(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vurt1rt2)))).
fof('rawDifference0', axiom, ![Vrt2] : vrawDifference(vtempty, Vrt2) = vtempty).
fof('rawDifference1', axiom, ![Vrt1] : vrawDifference(Vrt1, vtempty) = Vrt1).
fof('rawDifference2', axiom, ![Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) => vrawDifference(vtcons(Vr1, vtempty), Vrt2) = vtcons(Vr1, vtempty))).
fof('rawDifference3', axiom, ![Vr1, Vrt2] : (vrowIn(Vr1, Vrt2) => vrawDifference(vtcons(Vr1, vtempty), Vrt2) = vtempty)).
fof('rawDifference4', axiom, ![Vdrt1rt2, Vrt1, Vrt2, Vr1] : ((Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt1 != vtempty) => vrawDifference(vtcons(Vr1, Vrt1), Vrt2) = vtcons(Vr1, Vdrt1rt2))).
fof('rawDifference5', axiom, ![Vdrt1rt2, Vrt1, Vrt2, Vr1] : ((Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & vrowIn(Vr1, Vrt2) & Vrt1 != vtempty) => vrawDifference(vtcons(Vr1, Vrt1), Vrt2) = Vdrt1rt2)).
fof('rawDifference-INV', axiom, ![VRawTable0, VRawTable1, VRESULT] : (vrawDifference(VRawTable0, VRawTable1) = VRESULT => (?[Vrt2] : (VRawTable0 = vtempty & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vrt1] : (VRawTable0 = Vrt1 & VRawTable1 = vtempty & VRESULT = Vrt1) | ?[Vr1, Vrt2] : ((~vrowIn(Vr1, Vrt2)) & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, vtempty)) | ?[Vr1, Vrt2] : (vrowIn(Vr1, Vrt2) & VRawTable0 = vtcons(Vr1, vtempty) & VRawTable1 = Vrt2 & VRESULT = vtempty) | ?[Vdrt1rt2, Vrt1, Vrt2, Vr1] : (Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & (~vrowIn(Vr1, Vrt2)) & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = vtcons(Vr1, Vdrt1rt2)) | ?[Vdrt1rt2, Vrt1, Vrt2, Vr1] : (Vdrt1rt2 = vrawDifference(Vrt1, Vrt2) & vrowIn(Vr1, Vrt2) & Vrt1 != vtempty & VRawTable0 = vtcons(Vr1, Vrt1) & VRawTable1 = Vrt2 & VRESULT = Vdrt1rt2)))).
fof('EQ-conf', axiom, ![VQuery0, VQuery1, VTStore0, VTStore1] : ((VQuery0 = VQuery1 & VTStore0 = VTStore1) <=> vconf(VQuery0, VTStore0) = vconf(VQuery1, VTStore1))).
fof('getQuery0', axiom, ![Vq, Vts] : vgetQuery(vconf(Vq, Vts)) = Vq).
fof('EQ-someConf', axiom, ![VConf0, VConf1] : (VConf0 = VConf1 <=> vsomeConf(VConf0) = vsomeConf(VConf1))).
fof('DIFF-noConf-someConf', axiom, ![VConf0] : vnoConf != vsomeConf(VConf0)).
fof('isSomeConf0', axiom, (~visSomeConf(vnoConf))).
fof('isSomeConf1', axiom, ![Vt] : visSomeConf(vsomeConf(Vt))).
fof('isSomeConf-true-INV', axiom, ![VOptConf0] : (visSomeConf(VOptConf0) => ?[Vt] : VOptConf0 = vsomeConf(Vt))).
fof('isSomeConf-false-INV', axiom, ![VOptConf0] : ((~visSomeConf(VOptConf0)) => VOptConf0 = vnoConf)).
fof('getSomeConf0', axiom, ![Vc] : vgetSomeConf(vsomeConf(Vc)) = Vc).
fof('findCol0', axiom, ![Va, Vrt] : vfindCol(Va, vtable(vaempty, Vrt)) = vnoRawTable).
fof('findCol1', axiom, ![Va, Va2, Val, Vrt] : (Va = Va2 => vfindCol(Va, vtable(vacons(Va2, Val), Vrt)) = vsomeRawTable(vprojectFirstRaw(Vrt)))).
fof('findCol2', axiom, ![Va, Va2, Val, Vrt] : (Va != Va2 => vfindCol(Va, vtable(vacons(Va2, Val), Vrt)) = vfindCol(Va, vtable(Val, vdropFirstColRaw(Vrt))))).
fof('findCol-INV', axiom, ![VAName0, VTable0, VRESULT] : (vfindCol(VAName0, VTable0) = VRESULT => (?[Va, Vrt] : (VAName0 = Va & VTable0 = vtable(vaempty, Vrt) & VRESULT = vnoRawTable) | ?[Va, Va2, Val, Vrt] : (Va = Va2 & VAName0 = Va & VTable0 = vtable(vacons(Va2, Val), Vrt) & VRESULT = vsomeRawTable(vprojectFirstRaw(Vrt))) | ?[Va, Va2, Val, Vrt] : (Va != Va2 & VAName0 = Va & VTable0 = vtable(vacons(Va2, Val), Vrt) & VRESULT = vfindCol(Va, vtable(Val, vdropFirstColRaw(Vrt))))))).
fof('projectEmptyCol0', axiom, vprojectEmptyCol(vtempty) = vtempty).
fof('projectEmptyCol1', axiom, ![Vr, Vt] : vprojectEmptyCol(vtcons(Vr, Vt)) = vtcons(vrempty, vprojectEmptyCol(Vt))).
fof('project0', axiom, ![Val, Vrt] : vproject(vaempty, vtable(Val, Vrt)) = vsomeRawTable(vprojectEmptyCol(Vrt))).
fof('project1', axiom, ![Vt, Va, Vrest, Vcol, Valr] : ((Vcol = vfindCol(Va, Vt) & Vrest = vproject(Valr, Vt) & (visSomeRawTable(Vcol) & visSomeRawTable(Vrest))) => vproject(vacons(Va, Valr), Vt) = vattachColToFrontRaw(vgetSomeRawTable(Vcol), vgetSomeRawTable(Vrest)))).
fof('project2', axiom, ![Vt, Va, Vrest, Vcol, Valr] : ((Vcol = vfindCol(Va, Vt) & Vrest = vproject(Valr, Vt) & (~(visSomeRawTable(Vcol) & visSomeRawTable(Vrest)))) => vproject(vacons(Va, Valr), Vt) = vnoRawTable)).
fof('project-INV', axiom, ![VAList0, VTable0, VRESULT] : (vproject(VAList0, VTable0) = VRESULT => (?[Val, Vrt] : (VAList0 = vaempty & VTable0 = vtable(Val, Vrt) & VRESULT = vsomeRawTable(vprojectEmptyCol(Vrt))) | ?[Vt, Va, Vrest, Vcol, Valr] : (Vcol = vfindCol(Va, Vt) & Vrest = vproject(Valr, Vt) & (visSomeRawTable(Vcol) & visSomeRawTable(Vrest)) & VAList0 = vacons(Va, Valr) & VTable0 = Vt & VRESULT = vattachColToFrontRaw(vgetSomeRawTable(Vcol), vgetSomeRawTable(Vrest))) | ?[Vt, Va, Vrest, Vcol, Valr] : (Vcol = vfindCol(Va, Vt) & Vrest = vproject(Valr, Vt) & (~(visSomeRawTable(Vcol) & visSomeRawTable(Vrest))) & VAList0 = vacons(Va, Valr) & VTable0 = Vt & VRESULT = vnoRawTable)))).
fof('DIFF-error-isTrue', axiom, verror != visTrue).
fof('DIFF-error-isFalse', axiom, verror != visFalse).
fof('DIFF-isTrue-isFalse', axiom, visTrue != visFalse).
fof('singleRowSelect0', axiom, ![Va1, Va2, Vf, Vfv] : ((Va1 = Va2 & Vf = Vfv) => vsingleRowSelect(vacons(Va1, vaempty), vVEquals(Va2, Vfv), vrcons(Vf, vrempty)) = visTrue)).
fof('singleRowSelect1', axiom, ![Va1, Va2, Vf, Vfv] : ((Va1 = Va2 & Vf != Vfv) => vsingleRowSelect(vacons(Va1, vaempty), vVEquals(Va2, Vfv), vrcons(Vf, vrempty)) = visFalse)).
fof('singleRowSelect2', axiom, ![Va1, Va2, Vfv, Vf] : (Va1 != Va2 => vsingleRowSelect(vacons(Va1, vaempty), vVEquals(Va2, Vfv), vrcons(Vf, vrempty)) = verror)).
fof('singleRowSelect3', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 = Va2 & Vf = Vfv & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va1, Var), vVEquals(Va2, Vfv), vrcons(Vf, Vr)) = visTrue)).
fof('singleRowSelect4', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 = Va2 & Vf != Vfv & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va1, Var), vVEquals(Va2, Vfv), vrcons(Vf, Vr)) = visFalse)).
fof('singleRowSelect5', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 != Va2 & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va1, Var), vVEquals(Va2, Vfv), vrcons(Vf, Vr)) = vsingleRowSelect(Var, vVEquals(Va2, Vfv), Vr))).
fof('singleRowSelect6', axiom, ![Va1, Va2, Vf, Vfv] : ((Va1 = Va2 & vge(Vf, Vfv)) => vsingleRowSelect(vacons(Va1, vaempty), vVGreater(Va2, Vfv), vrcons(Vf, vrempty)) = visTrue)).
fof('singleRowSelect7', axiom, ![Va1, Va2, Vf, Vfv] : ((Va1 = Va2 & (~vge(Vf, Vfv))) => vsingleRowSelect(vacons(Va1, vaempty), vVGreater(Va2, Vfv), vrcons(Vf, vrempty)) = visFalse)).
fof('singleRowSelect8', axiom, ![Va1, Va2, Vfv, Vf] : (Va1 != Va2 => vsingleRowSelect(vacons(Va1, vaempty), vVGreater(Va2, Vfv), vrcons(Vf, vrempty)) = verror)).
fof('singleRowSelect9', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 = Va2 & vge(Vf, Vfv) & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va1, Var), vVGreater(Va2, Vfv), vrcons(Vf, Vr)) = visTrue)).
fof('singleRowSelect10', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 = Va2 & (~vge(Vf, Vfv)) & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va1, Var), vVGreater(Va2, Vfv), vrcons(Vf, Vr)) = visFalse)).
fof('singleRowSelect11', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 != Va2 & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va1, Var), vVGreater(Va2, Vfv), vrcons(Vf, Vr)) = vsingleRowSelect(Var, vVGreater(Va2, Vfv), Vr))).
fof('singleRowSelect12', axiom, ![Va1, Va2, Vf, Vfv] : ((Va1 = Va2 & vle(Vf, Vfv)) => vsingleRowSelect(vacons(Va1, vaempty), vVSmaller(Va2, Vfv), vrcons(Vf, vrempty)) = visTrue)).
fof('singleRowSelect13', axiom, ![Va1, Va2, Vf, Vfv] : ((Va1 = Va2 & (~vle(Vf, Vfv))) => vsingleRowSelect(vacons(Va1, vaempty), vVSmaller(Va2, Vfv), vrcons(Vf, vrempty)) = visFalse)).
fof('singleRowSelect14', axiom, ![Va1, Va2, Vfv, Vf] : (Va1 != Va2 => vsingleRowSelect(vacons(Va1, vaempty), vVSmaller(Va2, Vfv), vrcons(Vf, vrempty)) = verror)).
fof('singleRowSelect15', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 = Va2 & vle(Vf, Vfv) & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va1, Var), vVSmaller(Va2, Vfv), vrcons(Vf, Vr)) = visTrue)).
fof('singleRowSelect16', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 = Va2 & (~vle(Vf, Vfv)) & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va1, Var), vVSmaller(Va2, Vfv), vrcons(Vf, Vr)) = visFalse)).
fof('singleRowSelect17', axiom, ![Va1, Va2, Var, Vr, Vfv, Vf] : ((Va1 != Va2 & (Var != vaempty | Vr != vrempty)) => vsingleRowSelect(vacons(Va1, Var), vVSmaller(Va2, Vfv), vrcons(Vf, Vr)) = vsingleRowSelect(Var, vVSmaller(Va2, Vfv), Vr))).
fof('singleRowSelect-INV', axiom, ![VAList0, VPred0, VRow0, VRESULT] : (vsingleRowSelect(VAList0, VPred0, VRow0) = VRESULT => (?[Va1, Va2, Vf, Vfv] : (Va1 = Va2 & Vf = Vfv & VAList0 = vacons(Va1, vaempty) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = visTrue) | ?[Va1, Va2, Vf, Vfv] : (Va1 = Va2 & Vf != Vfv & VAList0 = vacons(Va1, vaempty) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = visFalse) | ?[Va1, Va2, Vfv, Vf] : (Va1 != Va2 & VAList0 = vacons(Va1, vaempty) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = verror) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 = Va2 & Vf = Vfv & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va1, Var) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visTrue) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 = Va2 & Vf != Vfv & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va1, Var) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visFalse) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 != Va2 & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va1, Var) & VPred0 = vVEquals(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = vsingleRowSelect(Var, vVEquals(Va2, Vfv), Vr)) | ?[Va1, Va2, Vf, Vfv] : (Va1 = Va2 & vge(Vf, Vfv) & VAList0 = vacons(Va1, vaempty) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = visTrue) | ?[Va1, Va2, Vf, Vfv] : (Va1 = Va2 & (~vge(Vf, Vfv)) & VAList0 = vacons(Va1, vaempty) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = visFalse) | ?[Va1, Va2, Vfv, Vf] : (Va1 != Va2 & VAList0 = vacons(Va1, vaempty) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = verror) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 = Va2 & vge(Vf, Vfv) & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va1, Var) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visTrue) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 = Va2 & (~vge(Vf, Vfv)) & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va1, Var) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visFalse) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 != Va2 & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va1, Var) & VPred0 = vVGreater(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = vsingleRowSelect(Var, vVGreater(Va2, Vfv), Vr)) | ?[Va1, Va2, Vf, Vfv] : (Va1 = Va2 & vle(Vf, Vfv) & VAList0 = vacons(Va1, vaempty) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = visTrue) | ?[Va1, Va2, Vf, Vfv] : (Va1 = Va2 & (~vle(Vf, Vfv)) & VAList0 = vacons(Va1, vaempty) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = visFalse) | ?[Va1, Va2, Vfv, Vf] : (Va1 != Va2 & VAList0 = vacons(Va1, vaempty) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, vrempty) & VRESULT = verror) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 = Va2 & vle(Vf, Vfv) & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va1, Var) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visTrue) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 = Va2 & (~vle(Vf, Vfv)) & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va1, Var) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = visFalse) | ?[Va1, Va2, Var, Vr, Vfv, Vf] : (Va1 != Va2 & (Var != vaempty | Vr != vrempty) & VAList0 = vacons(Va1, Var) & VPred0 = vVSmaller(Va2, Vfv) & VRow0 = vrcons(Vf, Vr) & VRESULT = vsingleRowSelect(Var, vVSmaller(Va2, Vfv), Vr))))).
fof('select0', axiom, ![Val, Vpred] : vselect(vtable(Val, vtempty), Vpred) = vsomeTable(vtable(Val, vtempty))).
fof('select1', axiom, ![Vrt, Vpred, Vr, Vrb, Vrts, Val] : ((Vrts = vselect(vtable(Val, Vrt), Vpred) & Vrb = vsingleRowSelect(Val, Vpred, Vr) & Vrb = visTrue) => vselect(vtable(Val, vtcons(Vr, Vrt)), Vpred) = vsomeTable(vtable(Val, vtcons(Vr, vgetRaw(vgetSomeTable(Vrts))))))).
fof('select2', axiom, ![Vrt, Vpred, Vr, Vrb, Vrts, Val] : ((Vrts = vselect(vtable(Val, Vrt), Vpred) & Vrb = vsingleRowSelect(Val, Vpred, Vr) & Vrb != visTrue & Vrb = visFalse) => vselect(vtable(Val, vtcons(Vr, Vrt)), Vpred) = Vrts)).
fof('select3', axiom, ![Vrt, Vpred, Vr, Vrb, Vrts, Val] : ((Vrts = vselect(vtable(Val, Vrt), Vpred) & Vrb = vsingleRowSelect(Val, Vpred, Vr) & Vrb != visTrue & Vrb != visFalse) => vselect(vtable(Val, vtcons(Vr, Vrt)), Vpred) = vnoTable)).
fof('select-INV', axiom, ![VTable0, VPred0, VRESULT] : (vselect(VTable0, VPred0) = VRESULT => (?[Val, Vpred] : (VTable0 = vtable(Val, vtempty) & VPred0 = Vpred & VRESULT = vsomeTable(vtable(Val, vtempty))) | ?[Vrt, Vpred, Vr, Vrb, Vrts, Val] : (Vrts = vselect(vtable(Val, Vrt), Vpred) & Vrb = vsingleRowSelect(Val, Vpred, Vr) & Vrb = visTrue & VTable0 = vtable(Val, vtcons(Vr, Vrt)) & VPred0 = Vpred & VRESULT = vsomeTable(vtable(Val, vtcons(Vr, vgetRaw(vgetSomeTable(Vrts)))))) | ?[Vrt, Vpred, Vr, Vrb, Vrts, Val] : (Vrts = vselect(vtable(Val, Vrt), Vpred) & Vrb = vsingleRowSelect(Val, Vpred, Vr) & Vrb != visTrue & Vrb = visFalse & VTable0 = vtable(Val, vtcons(Vr, Vrt)) & VPred0 = Vpred & VRESULT = Vrts) | ?[Vrt, Vpred, Vr, Vrb, Vrts, Val] : (Vrts = vselect(vtable(Val, Vrt), Vpred) & Vrb = vsingleRowSelect(Val, Vpred, Vr) & Vrb != visTrue & Vrb != visFalse & VTable0 = vtable(Val, vtcons(Vr, Vrt)) & VPred0 = Vpred & VRESULT = vnoTable)))).
fof('union0', axiom, ![Val1, Val2, Vrt1, Vrt2] : (Val1 = Val2 => vunion(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = vsomeTable(vtable(Val1, vrawUnion(Vrt1, Vrt2))))).
fof('union1', axiom, ![Val1, Val2, Vrt1, Vrt2] : (Val1 != Val2 => vunion(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = vnoTable)).
fof('union-INV', axiom, ![VTable0, VTable1, VRESULT] : (vunion(VTable0, VTable1) = VRESULT => (?[Val1, Val2, Vrt1, Vrt2] : (Val1 = Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vsomeTable(vtable(Val1, vrawUnion(Vrt1, Vrt2)))) | ?[Val1, Val2, Vrt1, Vrt2] : (Val1 != Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vnoTable)))).
fof('intersect0', axiom, ![Val1, Val2, Vrt1, Vrt2] : (Val1 = Val2 => vintersect(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = vsomeTable(vtable(Val1, vrawIntersection(Vrt1, Vrt2))))).
fof('intersect1', axiom, ![Val1, Val2, Vrt1, Vrt2] : (Val1 != Val2 => vintersect(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = vnoTable)).
fof('intersect-INV', axiom, ![VTable0, VTable1, VRESULT] : (vintersect(VTable0, VTable1) = VRESULT => (?[Val1, Val2, Vrt1, Vrt2] : (Val1 = Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vsomeTable(vtable(Val1, vrawIntersection(Vrt1, Vrt2)))) | ?[Val1, Val2, Vrt1, Vrt2] : (Val1 != Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vnoTable)))).
fof('difference0', axiom, ![Val1, Val2, Vrt1, Vrt2] : (Val1 = Val2 => vdifference(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = vsomeTable(vtable(Val1, vrawDifference(Vrt1, Vrt2))))).
fof('difference1', axiom, ![Val1, Val2, Vrt1, Vrt2] : (Val1 != Val2 => vdifference(vtable(Val1, Vrt1), vtable(Val2, Vrt2)) = vnoTable)).
fof('difference-INV', axiom, ![VTable0, VTable1, VRESULT] : (vdifference(VTable0, VTable1) = VRESULT => (?[Val1, Val2, Vrt1, Vrt2] : (Val1 = Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vsomeTable(vtable(Val1, vrawDifference(Vrt1, Vrt2)))) | ?[Val1, Val2, Vrt1, Vrt2] : (Val1 != Val2 & VTable0 = vtable(Val1, Vrt1) & VTable1 = vtable(Val2, Vrt2) & VRESULT = vnoTable)))).
fof('reduce0', axiom, ![Vt, Vts] : vreduce(vconf(vTvalue(Vt), Vts)) = vnoConf).
fof('reduce1', axiom, ![Vltn, Vtn, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn)) => vreduce(vconf(vSelectAllFrom(vRef(Vtn)), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(Vltn)), Vts)))).
fof('reduce2', axiom, ![Vltn, Vtn, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn))) => vreduce(vconf(vSelectAllFrom(vRef(Vtn)), Vts)) = vnoConf)).
fof('reduce3', axiom, ![Vltn, Vpt, Vtn, Val, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vpt = vproject(Val, vgetSomeTable(Vltn)) & visSomeRawTable(Vpt)) => vreduce(vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts)) = vsomeConf(vconf(vTvalue(vtable(Val, vgetSomeRawTable(Vpt))), Vts)))).
fof('reduce4', axiom, ![Vltn, Vpt, Vtn, Val, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vpt = vproject(Val, vgetSomeTable(Vltn)) & (~visSomeRawTable(Vpt))) => vreduce(vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts)) = vnoConf)).
fof('reduce5', axiom, ![Vltn, Vtn, Vts, Val] : ((Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn))) => vreduce(vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts)) = vnoConf)).
fof('reduce6', axiom, ![Vp, Vltn, Vtn, Vst, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & visSomeTable(Vst)) => vreduce(vconf(vSelectAllFromWhere(vRef(Vtn), Vp), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(Vst)), Vts)))).
fof('reduce7', axiom, ![Vp, Vltn, Vtn, Vst, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & (~visSomeTable(Vst))) => vreduce(vconf(vSelectAllFromWhere(vRef(Vtn), Vp), Vts)) = vnoConf)).
fof('reduce8', axiom, ![Vltn, Vtn, Vts, Vp] : ((Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn))) => vreduce(vconf(vSelectAllFromWhere(vRef(Vtn), Vp), Vts)) = vnoConf)).
fof('reduce9', axiom, ![Vp, Vltn, Vpt, Vtn, Val, Vst, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & visSomeTable(Vst) & Vpt = vproject(Val, vgetSomeTable(Vst)) & visSomeRawTable(Vpt)) => vreduce(vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts)) = vsomeConf(vconf(vTvalue(vtable(Val, vgetSomeRawTable(Vpt))), Vts)))).
fof('reduce10', axiom, ![Vp, Vltn, Vpt, Vtn, Val, Vst, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & visSomeTable(Vst) & Vpt = vproject(Val, vgetSomeTable(Vst)) & (~visSomeRawTable(Vpt))) => vreduce(vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts)) = vnoConf)).
fof('reduce11', axiom, ![Vp, Vltn, Vtn, Val, Vst, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & (~visSomeTable(Vst))) => vreduce(vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts)) = vnoConf)).
fof('reduce12', axiom, ![Vp, Vltn, Vtn, Val, Vts] : ((Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn))) => vreduce(vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts)) = vnoConf)).
fof('reduce13', axiom, ![Vtunion, Vt1, Vt2, Vts] : ((Vtunion = vunion(Vt1, Vt2) & visSomeTable(Vtunion)) => vreduce(vconf(vUnion(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(Vtunion)), Vts)))).
fof('reduce14', axiom, ![Vtunion, Vt1, Vt2, Vts] : ((Vtunion = vunion(Vt1, Vt2) & (~visSomeTable(Vtunion))) => vreduce(vconf(vUnion(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vnoConf)).
fof('reduce15', axiom, ![Vq2reduce, Vq2, Vts, Vt] : ((Vq2reduce = vreduce(vconf(Vq2, Vts)) & visSomeConf(Vq2reduce) & ![Vt20] : Vq2 != vTvalue(Vt20)) => vreduce(vconf(vUnion(vTvalue(Vt), Vq2), Vts)) = vsomeConf(vconf(vUnion(vTvalue(Vt), vgetQuery(vgetSomeConf(Vq2reduce))), Vts)))).
fof('reduce16', axiom, ![Vq2reduce, Vq2, Vts, Vt] : ((Vq2reduce = vreduce(vconf(Vq2, Vts)) & (~visSomeConf(Vq2reduce)) & ![Vt20] : Vq2 != vTvalue(Vt20)) => vreduce(vconf(vUnion(vTvalue(Vt), Vq2), Vts)) = vnoConf)).
fof('reduce17', axiom, ![Vq1reduce, Vq1, Vts, Vq2] : ((Vq1reduce = vreduce(vconf(Vq1, Vts)) & visSomeConf(Vq1reduce) & (![Vt10] : Vq1 != vTvalue(Vt10) | ![Vt20] : Vq2 != vTvalue(Vt20)) & ![Vt0] : Vq1 != vTvalue(Vt0)) => vreduce(vconf(vUnion(Vq1, Vq2), Vts)) = vsomeConf(vconf(vUnion(vgetQuery(vgetSomeConf(Vq1reduce)), Vq2), Vts)))).
fof('reduce18', axiom, ![Vq1reduce, Vq1, Vts, Vq2] : ((Vq1reduce = vreduce(vconf(Vq1, Vts)) & (~visSomeConf(Vq1reduce)) & (![Vt10] : Vq1 != vTvalue(Vt10) | ![Vt20] : Vq2 != vTvalue(Vt20)) & ![Vt0] : Vq1 != vTvalue(Vt0)) => vreduce(vconf(vUnion(Vq1, Vq2), Vts)) = vnoConf)).
fof('reduce19', axiom, ![Vtintersection, Vt1, Vt2, Vts] : ((Vtintersection = vintersect(Vt1, Vt2) & visSomeTable(Vtintersection)) => vreduce(vconf(vIntersection(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(Vtintersection)), Vts)))).
fof('reduce20', axiom, ![Vtintersection, Vt1, Vt2, Vts] : ((Vtintersection = vintersect(Vt1, Vt2) & (~visSomeTable(Vtintersection))) => vreduce(vconf(vIntersection(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vnoConf)).
fof('reduce21', axiom, ![Vsql2reduce, Vsql2, Vts, Vt] : ((Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & visSomeConf(Vsql2reduce) & ![Vt20] : Vsql2 != vTvalue(Vt20)) => vreduce(vconf(vIntersection(vTvalue(Vt), Vsql2), Vts)) = vsomeConf(vconf(vIntersection(vTvalue(Vt), vgetQuery(vgetSomeConf(Vsql2reduce))), Vts)))).
fof('reduce22', axiom, ![Vsql2reduce, Vsql2, Vts, Vt] : ((Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & (~visSomeConf(Vsql2reduce)) & ![Vt20] : Vsql2 != vTvalue(Vt20)) => vreduce(vconf(vIntersection(vTvalue(Vt), Vsql2), Vts)) = vnoConf)).
fof('reduce23', axiom, ![Vsql1reduce, Vsql1, Vts, Vsql2] : ((Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & visSomeConf(Vsql1reduce) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0)) => vreduce(vconf(vIntersection(Vsql1, Vsql2), Vts)) = vsomeConf(vconf(vIntersection(vgetQuery(vgetSomeConf(Vsql1reduce)), Vsql2), Vts)))).
fof('reduce24', axiom, ![Vsql1reduce, Vsql1, Vts, Vsql2] : ((Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & (~visSomeConf(Vsql1reduce)) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0)) => vreduce(vconf(vIntersection(Vsql1, Vsql2), Vts)) = vnoConf)).
fof('reduce25', axiom, ![Vtdifference, Vt1, Vt2, Vts] : ((Vtdifference = vdifference(Vt1, Vt2) & visSomeTable(Vtdifference)) => vreduce(vconf(vDifference(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vsomeConf(vconf(vTvalue(vgetSomeTable(Vtdifference)), Vts)))).
fof('reduce26', axiom, ![Vtdifference, Vt1, Vt2, Vts] : ((Vtdifference = vdifference(Vt1, Vt2) & (~visSomeTable(Vtdifference))) => vreduce(vconf(vDifference(vTvalue(Vt1), vTvalue(Vt2)), Vts)) = vnoConf)).
fof('reduce27', axiom, ![Vsql2reduce, Vsql2, Vts, Vt] : ((Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & visSomeConf(Vsql2reduce) & ![Vt20] : Vsql2 != vTvalue(Vt20)) => vreduce(vconf(vDifference(vTvalue(Vt), Vsql2), Vts)) = vsomeConf(vconf(vDifference(vTvalue(Vt), vgetQuery(vgetSomeConf(Vsql2reduce))), Vts)))).
fof('reduce28', axiom, ![Vsql2reduce, Vsql2, Vts, Vt] : ((Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & (~visSomeConf(Vsql2reduce)) & ![Vt20] : Vsql2 != vTvalue(Vt20)) => vreduce(vconf(vDifference(vTvalue(Vt), Vsql2), Vts)) = vnoConf)).
fof('reduce29', axiom, ![Vsql1reduce, Vsql1, Vts, Vsql2] : ((Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & visSomeConf(Vsql1reduce) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0)) => vreduce(vconf(vDifference(Vsql1, Vsql2), Vts)) = vsomeConf(vconf(vDifference(vgetQuery(vgetSomeConf(Vsql1reduce)), Vsql2), Vts)))).
fof('reduce30', axiom, ![Vsql1reduce, Vsql1, Vts, Vsql2] : ((Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & (~visSomeConf(Vsql1reduce)) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0)) => vreduce(vconf(vDifference(Vsql1, Vsql2), Vts)) = vnoConf)).
fof('reduce-INV', axiom, ![VConf0, VRESULT] : (vreduce(VConf0) = VRESULT => (?[Vt, Vts] : (VConf0 = vconf(vTvalue(Vt), Vts) & VRESULT = vnoConf) | ?[Vltn, Vtn, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & VConf0 = vconf(vSelectAllFrom(vRef(Vtn)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(Vltn)), Vts))) | ?[Vltn, Vtn, Vts] : (Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn)) & VConf0 = vconf(vSelectAllFrom(vRef(Vtn)), Vts) & VRESULT = vnoConf) | ?[Vltn, Vpt, Vtn, Val, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vpt = vproject(Val, vgetSomeTable(Vltn)) & visSomeRawTable(Vpt) & VConf0 = vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vtable(Val, vgetSomeRawTable(Vpt))), Vts))) | ?[Vltn, Vpt, Vtn, Val, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vpt = vproject(Val, vgetSomeTable(Vltn)) & (~visSomeRawTable(Vpt)) & VConf0 = vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts) & VRESULT = vnoConf) | ?[Vltn, Vtn, Vts, Val] : (Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn)) & VConf0 = vconf(vSelectSomeFrom(Val, vRef(Vtn)), Vts) & VRESULT = vnoConf) | ?[Vp, Vltn, Vtn, Vst, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & visSomeTable(Vst) & VConf0 = vconf(vSelectAllFromWhere(vRef(Vtn), Vp), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(Vst)), Vts))) | ?[Vp, Vltn, Vtn, Vst, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & (~visSomeTable(Vst)) & VConf0 = vconf(vSelectAllFromWhere(vRef(Vtn), Vp), Vts) & VRESULT = vnoConf) | ?[Vltn, Vtn, Vts, Vp] : (Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn)) & VConf0 = vconf(vSelectAllFromWhere(vRef(Vtn), Vp), Vts) & VRESULT = vnoConf) | ?[Vp, Vltn, Vpt, Vtn, Val, Vst, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & visSomeTable(Vst) & Vpt = vproject(Val, vgetSomeTable(Vst)) & visSomeRawTable(Vpt) & VConf0 = vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vtable(Val, vgetSomeRawTable(Vpt))), Vts))) | ?[Vp, Vltn, Vpt, Vtn, Val, Vst, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & visSomeTable(Vst) & Vpt = vproject(Val, vgetSomeTable(Vst)) & (~visSomeRawTable(Vpt)) & VConf0 = vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts) & VRESULT = vnoConf) | ?[Vp, Vltn, Vtn, Val, Vst, Vts] : (Vltn = vlookupStore(Vtn, Vts) & visSomeTable(Vltn) & Vst = vselect(vgetSomeTable(Vltn), Vp) & (~visSomeTable(Vst)) & VConf0 = vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts) & VRESULT = vnoConf) | ?[Vp, Vltn, Vtn, Val, Vts] : (Vltn = vlookupStore(Vtn, Vts) & (~visSomeTable(Vltn)) & VConf0 = vconf(vSelectSomeFromWhere(Val, vRef(Vtn), Vp), Vts) & VRESULT = vnoConf) | ?[Vtunion, Vt1, Vt2, Vts] : (Vtunion = vunion(Vt1, Vt2) & visSomeTable(Vtunion) & VConf0 = vconf(vUnion(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(Vtunion)), Vts))) | ?[Vtunion, Vt1, Vt2, Vts] : (Vtunion = vunion(Vt1, Vt2) & (~visSomeTable(Vtunion)) & VConf0 = vconf(vUnion(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vnoConf) | ?[Vq2reduce, Vq2, Vts, Vt] : (Vq2reduce = vreduce(vconf(Vq2, Vts)) & visSomeConf(Vq2reduce) & ![Vt20] : Vq2 != vTvalue(Vt20) & VConf0 = vconf(vUnion(vTvalue(Vt), Vq2), Vts) & VRESULT = vsomeConf(vconf(vUnion(vTvalue(Vt), vgetQuery(vgetSomeConf(Vq2reduce))), Vts))) | ?[Vq2reduce, Vq2, Vts, Vt] : (Vq2reduce = vreduce(vconf(Vq2, Vts)) & (~visSomeConf(Vq2reduce)) & ![Vt20] : Vq2 != vTvalue(Vt20) & VConf0 = vconf(vUnion(vTvalue(Vt), Vq2), Vts) & VRESULT = vnoConf) | ?[Vq1reduce, Vq1, Vts, Vq2] : (Vq1reduce = vreduce(vconf(Vq1, Vts)) & visSomeConf(Vq1reduce) & (![Vt10] : Vq1 != vTvalue(Vt10) | ![Vt20] : Vq2 != vTvalue(Vt20)) & ![Vt0] : Vq1 != vTvalue(Vt0) & VConf0 = vconf(vUnion(Vq1, Vq2), Vts) & VRESULT = vsomeConf(vconf(vUnion(vgetQuery(vgetSomeConf(Vq1reduce)), Vq2), Vts))) | ?[Vq1reduce, Vq1, Vts, Vq2] : (Vq1reduce = vreduce(vconf(Vq1, Vts)) & (~visSomeConf(Vq1reduce)) & (![Vt10] : Vq1 != vTvalue(Vt10) | ![Vt20] : Vq2 != vTvalue(Vt20)) & ![Vt0] : Vq1 != vTvalue(Vt0) & VConf0 = vconf(vUnion(Vq1, Vq2), Vts) & VRESULT = vnoConf) | ?[Vtintersection, Vt1, Vt2, Vts] : (Vtintersection = vintersect(Vt1, Vt2) & visSomeTable(Vtintersection) & VConf0 = vconf(vIntersection(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(Vtintersection)), Vts))) | ?[Vtintersection, Vt1, Vt2, Vts] : (Vtintersection = vintersect(Vt1, Vt2) & (~visSomeTable(Vtintersection)) & VConf0 = vconf(vIntersection(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vnoConf) | ?[Vsql2reduce, Vsql2, Vts, Vt] : (Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & visSomeConf(Vsql2reduce) & ![Vt20] : Vsql2 != vTvalue(Vt20) & VConf0 = vconf(vIntersection(vTvalue(Vt), Vsql2), Vts) & VRESULT = vsomeConf(vconf(vIntersection(vTvalue(Vt), vgetQuery(vgetSomeConf(Vsql2reduce))), Vts))) | ?[Vsql2reduce, Vsql2, Vts, Vt] : (Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & (~visSomeConf(Vsql2reduce)) & ![Vt20] : Vsql2 != vTvalue(Vt20) & VConf0 = vconf(vIntersection(vTvalue(Vt), Vsql2), Vts) & VRESULT = vnoConf) | ?[Vsql1reduce, Vsql1, Vts, Vsql2] : (Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & visSomeConf(Vsql1reduce) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0) & VConf0 = vconf(vIntersection(Vsql1, Vsql2), Vts) & VRESULT = vsomeConf(vconf(vIntersection(vgetQuery(vgetSomeConf(Vsql1reduce)), Vsql2), Vts))) | ?[Vsql1reduce, Vsql1, Vts, Vsql2] : (Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & (~visSomeConf(Vsql1reduce)) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0) & VConf0 = vconf(vIntersection(Vsql1, Vsql2), Vts) & VRESULT = vnoConf) | ?[Vtdifference, Vt1, Vt2, Vts] : (Vtdifference = vdifference(Vt1, Vt2) & visSomeTable(Vtdifference) & VConf0 = vconf(vDifference(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vsomeConf(vconf(vTvalue(vgetSomeTable(Vtdifference)), Vts))) | ?[Vtdifference, Vt1, Vt2, Vts] : (Vtdifference = vdifference(Vt1, Vt2) & (~visSomeTable(Vtdifference)) & VConf0 = vconf(vDifference(vTvalue(Vt1), vTvalue(Vt2)), Vts) & VRESULT = vnoConf) | ?[Vsql2reduce, Vsql2, Vts, Vt] : (Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & visSomeConf(Vsql2reduce) & ![Vt20] : Vsql2 != vTvalue(Vt20) & VConf0 = vconf(vDifference(vTvalue(Vt), Vsql2), Vts) & VRESULT = vsomeConf(vconf(vDifference(vTvalue(Vt), vgetQuery(vgetSomeConf(Vsql2reduce))), Vts))) | ?[Vsql2reduce, Vsql2, Vts, Vt] : (Vsql2reduce = vreduce(vconf(Vsql2, Vts)) & (~visSomeConf(Vsql2reduce)) & ![Vt20] : Vsql2 != vTvalue(Vt20) & VConf0 = vconf(vDifference(vTvalue(Vt), Vsql2), Vts) & VRESULT = vnoConf) | ?[Vsql1reduce, Vsql1, Vts, Vsql2] : (Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & visSomeConf(Vsql1reduce) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0) & VConf0 = vconf(vDifference(Vsql1, Vsql2), Vts) & VRESULT = vsomeConf(vconf(vDifference(vgetQuery(vgetSomeConf(Vsql1reduce)), Vsql2), Vts))) | ?[Vsql1reduce, Vsql1, Vts, Vsql2] : (Vsql1reduce = vreduce(vconf(Vsql1, Vts)) & (~visSomeConf(Vsql1reduce)) & (![Vt10] : Vsql1 != vTvalue(Vt10) | ![Vt20] : Vsql2 != vTvalue(Vt20)) & ![Vt0] : Vsql1 != vTvalue(Vt0) & VConf0 = vconf(vDifference(Vsql1, Vsql2), Vts) & VRESULT = vnoConf)))).
fof('EQ-bindContext', axiom, ![VTTContext0, VTTContext1, VTName0, VTType0, VTType1, VTName1] : ((VTName0 = VTName1 & (VTType0 = VTType1 & VTTContext0 = VTTContext1)) <=> vbindContext(VTName0, VTType0, VTTContext0) = vbindContext(VTName1, VTType1, VTTContext1))).
fof('DIFF-emptyContext-bindContext', axiom, ![VTName0, VTType0, VTTContext0] : vemptyContext != vbindContext(VTName0, VTType0, VTTContext0)).
fof('EQ-someTType', axiom, ![VTType0, VTType1] : (VTType0 = VTType1 <=> vsomeTType(VTType0) = vsomeTType(VTType1))).
fof('DIFF-noTType-someTType', axiom, ![VTType0] : vnoTType != vsomeTType(VTType0)).
fof('isSomeTType0', axiom, (~visSomeTType(vnoTType))).
fof('isSomeTType1', axiom, ![Vt] : visSomeTType(vsomeTType(Vt))).
fof('isSomeTType-true-INV', axiom, ![VOptTType0] : (visSomeTType(VOptTType0) => ?[Vt] : VOptTType0 = vsomeTType(Vt))).
fof('isSomeTType-false-INV', axiom, ![VOptTType0] : ((~visSomeTType(VOptTType0)) => VOptTType0 = vnoTType)).
fof('getSomeTType0', axiom, ![Vt] : vgetSomeTType(vsomeTType(Vt)) = Vt).
fof('lookupContext0', axiom, ![Vtn] : vlookupContext(Vtn, vemptyContext) = vnoTType).
fof('lookupContext1', axiom, ![Vtn, Vtm, Vtt, VTTC] : (Vtn = Vtm => vlookupContext(Vtn, vbindContext(Vtm, Vtt, VTTC)) = vsomeTType(Vtt))).
fof('lookupContext2', axiom, ![Vtn, Vtm, Vtt, VTTC] : (Vtn != Vtm => vlookupContext(Vtn, vbindContext(Vtm, Vtt, VTTC)) = vlookupContext(Vtn, VTTC))).
fof('lookupContext-INV', axiom, ![VTName0, VTTContext0, VRESULT] : (vlookupContext(VTName0, VTTContext0) = VRESULT => (?[Vtn] : (VTName0 = Vtn & VTTContext0 = vemptyContext & VRESULT = vnoTType) | ?[Vtn, Vtm, Vtt, VTTC] : (Vtn = Vtm & VTName0 = Vtn & VTTContext0 = vbindContext(Vtm, Vtt, VTTC) & VRESULT = vsomeTType(Vtt)) | ?[Vtn, Vtm, Vtt, VTTC] : (Vtn != Vtm & VTName0 = Vtn & VTTContext0 = vbindContext(Vtm, Vtt, VTTC) & VRESULT = vlookupContext(Vtn, VTTC))))).
fof('EQ-someFType', axiom, ![VFType0, VFType1] : (VFType0 = VFType1 <=> vsomeFType(VFType0) = vsomeFType(VFType1))).
fof('DIFF-noFType-someFType', axiom, ![VFType0] : vnoFType != vsomeFType(VFType0)).
fof('isSomeFType0', axiom, (~visSomeFType(vnoFType))).
fof('isSomeFType1', axiom, ![Va] : visSomeFType(vsomeFType(Va))).
fof('isSomeFType-true-INV', axiom, ![VOptFType0] : (visSomeFType(VOptFType0) => ?[Va] : VOptFType0 = vsomeFType(Va))).
fof('isSomeFType-false-INV', axiom, ![VOptFType0] : ((~visSomeFType(VOptFType0)) => VOptFType0 = vnoFType)).
fof('getSomeFType0', axiom, ![Va] : vgetSomeFType(vsomeFType(Va)) = Va).
fof('findColType0', axiom, ![Van] : vfindColType(Van, vttempty) = vnoFType).
fof('findColType1', axiom, ![Van, Va, Vft, Vttr] : (Van = Va => vfindColType(Van, vttcons(vctype(Va, Vft), Vttr)) = vsomeFType(Vft))).
fof('findColType2', axiom, ![Van, Va, Vft, Vttr] : (Van != Va => vfindColType(Van, vttcons(vctype(Va, Vft), Vttr)) = vfindColType(Van, Vttr))).
fof('projectType0', axiom, ![Vtt] : vprojectType(vaempty, Vtt) = vsomeTType(vttempty)).
fof('projectType1', axiom, ![Va, Vft, Vtt, Valr, Vtprest] : ((Vft = vfindColType(Va, Vtt) & Vtprest = vprojectType(Valr, Vtt) & (visSomeFType(Vft) & visSomeTType(Vtprest))) => vprojectType(vacons(Va, Valr), Vtt) = vsomeTType(vttcons(vctype(Va, vgetSomeFType(Vft)), vgetSomeTType(Vtprest))))).
fof('projectType2', axiom, ![Va, Vft, Vtt, Valr, Vtprest] : ((Vft = vfindColType(Va, Vtt) & Vtprest = vprojectType(Valr, Vtt) & (~(visSomeFType(Vft) & visSomeTType(Vtprest)))) => vprojectType(vacons(Va, Valr), Vtt) = vnoTType)).
fof('ctypeIn0', axiom, ![Va, Vft] : (~vctypeIn(Va, Vft, vttempty))).
fof('ctypeIn1', axiom, ![Va, Vft2, Vttr, Vft, Va2] : (vctypeIn(Va, Vft, vttcons(vctype(Va2, Vft2), Vttr)) <=> ((Va = Va2 & Vft = Vft2) | vctypeIn(Va, Vft, Vttr)))).
fof('ctypeIn-true-INV', axiom, ![VAName0, VFType0, VTType0] : (vctypeIn(VAName0, VFType0, VTType0) => ?[Va, Vft2, Vttr, Vft, Va2] : (VAName0 = Va & VFType0 = Vft & VTType0 = vttcons(vctype(Va2, Vft2), Vttr) & ((Va = Va2 & Vft = Vft2) | vctypeIn(Va, Vft, Vttr))))).
fof('ctypeIn-false-INV', axiom, ![VAName0, VFType0, VTType0] : ((~vctypeIn(VAName0, VFType0, VTType0)) => (?[Va, Vft] : (VAName0 = Va & VFType0 = Vft & VTType0 = vttempty) | ?[Va, Vft2, Vttr, Vft, Va2] : (VAName0 = Va & VFType0 = Vft & VTType0 = vttcons(vctype(Va2, Vft2), Vttr) & (~((Va = Va2 & Vft = Vft2) | vctypeIn(Va, Vft, Vttr))))))).
fof('checkPValidity0', axiom, ![Va, Vfv, Vtt] : (vcheckPValidity(vVEquals(Va, Vfv), Vtt) <=> vctypeIn(Va, vfieldType(Vfv), Vtt))).
fof('checkPValidity1', axiom, ![Va, Vfv, Vtt] : (vcheckPValidity(vVGreater(Va, Vfv), Vtt) <=> vctypeIn(Va, vfieldType(Vfv), Vtt))).
fof('checkPValidity2', axiom, ![Va, Vfv, Vtt] : (vcheckPValidity(vVSmaller(Va, Vfv), Vtt) <=> vctypeIn(Va, vfieldType(Vfv), Vtt))).
fof('checkPValidity-true-INV', axiom, ![VPred0, VTType0] : (vcheckPValidity(VPred0, VTType0) => (?[Va, Vfv, Vtt] : (VPred0 = vVEquals(Va, Vfv) & VTType0 = Vtt & vctypeIn(Va, vfieldType(Vfv), Vtt)) | ?[Va, Vfv, Vtt] : (VPred0 = vVGreater(Va, Vfv) & VTType0 = Vtt & vctypeIn(Va, vfieldType(Vfv), Vtt)) | ?[Va, Vfv, Vtt] : (VPred0 = vVSmaller(Va, Vfv) & VTType0 = Vtt & vctypeIn(Va, vfieldType(Vfv), Vtt))))).
fof('checkPValidity-false-INV', axiom, ![VPred0, VTType0] : ((~vcheckPValidity(VPred0, VTType0)) => (?[Va, Vfv, Vtt] : (VPred0 = vVEquals(Va, Vfv) & VTType0 = Vtt & (~vctypeIn(Va, vfieldType(Vfv), Vtt))) | ?[Va, Vfv, Vtt] : (VPred0 = vVGreater(Va, Vfv) & VTType0 = Vtt & (~vctypeIn(Va, vfieldType(Vfv), Vtt))) | ?[Va, Vfv, Vtt] : (VPred0 = vVSmaller(Va, Vfv) & VTType0 = Vtt & (~vctypeIn(Va, vfieldType(Vfv), Vtt)))))).
fof('T-TTContext-Duplicate', axiom, ![Vx, VTx, Vy, Ve, VC, VTy, VT] : ((Vx = Vy & vtcheck(vbindContext(Vx, VTx, vbindContext(Vy, VTy, VC)), Ve, VT)) => vtcheck(vbindContext(Vx, VTx, VC), Ve, VT))).
fof('T-TTContext-Swap', axiom, ![Vx, VTx, Vy, Ve, VC, VTy, VT] : ((Vx != Vy & vtcheck(vbindContext(Vx, VTx, vbindContext(Vy, VTy, VC)), Ve, VT)) => vtcheck(vbindContext(Vy, VTy, vbindContext(Vx, VTx, VC)), Ve, VT))).
fof('T-Tvalue', axiom, ![VTT, Val, Vrt, VTTC] : (vwelltypedtable(VTT, vtable(Val, Vrt)) => vtcheck(VTTC, vTvalue(vtable(Val, Vrt)), VTT))).
fof('T-SelectAllFrom', axiom, ![Vtn, VTTC, VTT] : (vlookupContext(Vtn, VTTC) = vsomeTType(VTT) => vtcheck(VTTC, vSelectAllFrom(vRef(Vtn)), VTT))).
fof('T-SelectSomeFrom', axiom, ![VTT, Vtn, Val, VTT1, VTTC] : ((vlookupContext(Vtn, VTTC) = vsomeTType(VTT1) & vprojectType(Val, VTT1) = vsomeTType(VTT)) => vtcheck(VTTC, vSelectSomeFrom(Val, vRef(Vtn)), VTT))).
fof('T-SelectAllFromWhere', axiom, ![Vtn, VTTC, VTT, Vp] : ((vlookupContext(Vtn, VTTC) = vsomeTType(VTT) & vcheckPValidity(Vp, VTT)) => vtcheck(VTTC, vSelectAllFromWhere(vRef(Vtn), Vp), VTT))).
fof('T-SelectSomeFromWhere', axiom, ![Vp, VTT, Vtn, Val, VTT1, VTTC] : ((vlookupContext(Vtn, VTTC) = vsomeTType(VTT1) & vcheckPValidity(Vp, VTT1) & vprojectType(Val, VTT1) = vsomeTType(VTT)) => vtcheck(VTTC, vSelectSomeFromWhere(Val, vRef(Vtn), Vp), VTT))).
fof('T-Union', axiom, ![VTTC, Vq1, VTT, Vq2] : ((vtcheck(VTTC, Vq1, VTT) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTC, vUnion(Vq1, Vq2), VTT))).
fof('T-Intersection', axiom, ![VTTC, Vq1, VTT, Vq2] : ((vtcheck(VTTC, Vq1, VTT) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTC, vIntersection(Vq1, Vq2), VTT))).
fof('T-Difference', axiom, ![VTTC, Vq1, VTT, Vq2] : ((vtcheck(VTTC, Vq1, VTT) & vtcheck(VTTC, Vq2, VTT)) => vtcheck(VTTC, vDifference(Vq1, Vq2), VTT))).
fof('StoreContextConsistent0', axiom, vStoreContextConsistent(vemptyStore, vemptyContext)).
fof('StoreContextConsistent1', axiom, ![Vtn2, Vt, Vttcr, Vtn1, Vtsr, Vtt] : (vStoreContextConsistent(vbindStore(Vtn1, Vt, Vtsr), vbindContext(Vtn2, Vtt, Vttcr)) <=> ((Vtn1 = Vtn2 & vwelltypedtable(Vtt, Vt)) & vStoreContextConsistent(Vtsr, Vttcr)))).
fof('StoreContextConsistent2', axiom, ![Vts, Vttc] : (((Vts != vemptyStore | Vttc != vemptyContext) & (![Vtn10, Vt0, Vtsr0] : Vts != vbindStore(Vtn10, Vt0, Vtsr0) | ![Vtn20, Vtt0, Vttcr0] : Vttc != vbindContext(Vtn20, Vtt0, Vttcr0))) => (~vStoreContextConsistent(Vts, Vttc)))).
fof('StoreContextConsistent-true-INV', axiom, ![VTStore0, VTTContext0] : (vStoreContextConsistent(VTStore0, VTTContext0) => ((VTStore0 = vemptyStore & VTTContext0 = vemptyContext) | ?[Vtn2, Vt, Vttcr, Vtn1, Vtsr, Vtt] : (VTStore0 = vbindStore(Vtn1, Vt, Vtsr) & VTTContext0 = vbindContext(Vtn2, Vtt, Vttcr) & ((Vtn1 = Vtn2 & vwelltypedtable(Vtt, Vt)) & vStoreContextConsistent(Vtsr, Vttcr)))))).
fof('StoreContextConsistent-false-INV', axiom, ![VTStore0, VTTContext0] : ((~vStoreContextConsistent(VTStore0, VTTContext0)) => (?[Vtn2, Vt, Vttcr, Vtn1, Vtsr, Vtt] : (VTStore0 = vbindStore(Vtn1, Vt, Vtsr) & VTTContext0 = vbindContext(Vtn2, Vtt, Vttcr) & (~((Vtn1 = Vtn2 & vwelltypedtable(Vtt, Vt)) & vStoreContextConsistent(Vtsr, Vttcr)))) | ?[Vts, Vttc] : ((Vts != vemptyStore | Vttc != vemptyContext) & (![Vtn10, Vt0, Vtsr0] : Vts != vbindStore(Vtn10, Vt0, Vtsr0) | ![Vtn20, Vtt0, Vttcr0] : Vttc != vbindContext(Vtn20, Vtt0, Vttcr0)) & VTStore0 = Vts & VTTContext0 = Vttc)))).
fof('StoreContext-Lookup-WT', axiom, ![Vt, VTS, Vtn, VTTC, Vtt] : ((vStoreContextConsistent(VTS, VTTC) & vlookupStore(Vtn, VTS) = vsomeTable(Vt) & vlookupContext(Vtn, VTTC) = vsomeTType(Vtt)) => vwelltypedtable(Vtt, Vt))).
fof('DIFF-row1-row2', axiom, vrow1 != vrow2).
fof('DIFF-row1-row3', axiom, vrow1 != vrow3).
fof('DIFF-row2-row3', axiom, vrow2 != vrow3).
fof('test-4', conjecture, ![Vtable1, Vtable2] : ((Vtable1 = vtcons(vrow1, vtcons(vrow2, vtempty)) & Vtable2 = vtcons(vrow3, vtcons(vrow1, vtempty))) => vrawDifference(Vtable1, Vtable2) = vtcons(vrow2, vtempty))).
