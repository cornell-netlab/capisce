Loading simple0.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun y () Real (/ (- 23) 30))
  (define-fun x () Real (/ 1 3))
)

Loading simple1.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun y () Real (/ 1 1))
  (define-fun x () Real (/ 21 10))
)

Loading simple2.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x () Real (/ 41 1))
)

Loading simple2b.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

unsat

Loading casts.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun y () Real (/ 1 2))
  (define-fun x () Real (/ 1 2))
)

Loading casts3.smt2 ...
Warning: get-model is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun x () Real (/ 1 2))
)

Loading realList.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun l () List (cons (/ 1 2) (cons (/ 1 1) (cons (/ 0 1) nil))))
)

Loading quantifiers.smt2 ...
Preprocessing ...
Constructing countermodel ...

unsat

Loading quantifiers2.smt2 ...
Preprocessing ...
Constructing countermodel ...

unknown
(model
)

Loading iteBug.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

unsat

Loading pd_no_op_accs.induction.smt2 ...
Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Preprocessing ...
Constructing countermodel ...

unsat

Loading arrays.smt2 ...
Preprocessing ...
Constructing countermodel ...

sat
(model
  (define-fun Constructed_Argument_2 () (Array Int String) (store ((as const (Array Int String)) "") 0 "\u{0}"))
  (define-fun Constructed_Argument_2_Array_Length () Int 2)
  (define-fun Constructed_Argument_2_t () String "array_string")
  (define-fun ExpandObjSwitcher () Real (/ 0 1))
  (define-fun Constructed_Argument_t () String "boolean")
  (define-fun CreateAsClass_2 () Bool false)
  (define-fun Constructed_Argument () Bool false)
  (define-fun CreateAsClass () Bool false)
)

