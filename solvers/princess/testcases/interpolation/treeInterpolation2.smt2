(set-option :produce-models true)
(set-option :produce-interpolants true)
(set-logic AUFNIRA)
(set-info :source |
    SMT script generated on 2015/05/17 by Ultimate. http://ultimate.informatik.uni-freiburg.de/
|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(declare-fun |#sizeof~INT| () Int)
(declare-fun |c_old(#NULL.base)| () Int)
(declare-fun |c_old(#NULL.base)_primed| () Int)
(declare-fun |c_#NULL.base| () Int)
(declare-fun |c_#NULL.base_primed| () Int)
(declare-fun |c_old(#NULL.offset)| () Int)
(declare-fun |c_old(#NULL.offset)_primed| () Int)
(declare-fun |c_#NULL.offset| () Int)
(declare-fun |c_#NULL.offset_primed| () Int)
(declare-fun |c_old(#memory_int)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#valid)| () (Array Int Bool))
(declare-fun |c_old(#valid)_primed| () (Array Int Bool))
(declare-fun |c_#valid| () (Array Int Bool))
(declare-fun |c_#valid_primed| () (Array Int Bool))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(declare-fun c_~malloc_~size () Int)
(declare-fun c_~malloc_~size_primed () Int)
(declare-fun |c_~malloc_#res.base| () Int)
(declare-fun |c_~malloc_#res.base_primed| () Int)
(declare-fun |c_~malloc_#res.offset| () Int)
(declare-fun |c_~malloc_#res.offset_primed| () Int)
(declare-fun |c_read~int_#ptr.base| () Int)
(declare-fun |c_read~int_#ptr.base_primed| () Int)
(declare-fun |c_read~int_#ptr.offset| () Int)
(declare-fun |c_read~int_#ptr.offset_primed| () Int)
(declare-fun |c_read~int_#sizeOfReadType| () Int)
(declare-fun |c_read~int_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int_#value| () Int)
(declare-fun |c_read~int_#value_primed| () Int)
(declare-fun |c_write~int_#value| () Int)
(declare-fun |c_write~int_#value_primed| () Int)
(declare-fun |c_write~int_#ptr.base| () Int)
(declare-fun |c_write~int_#ptr.base_primed| () Int)
(declare-fun |c_write~int_#ptr.offset| () Int)
(declare-fun |c_write~int_#ptr.offset_primed| () Int)
(declare-fun |c_write~int_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int_#sizeOfWrittenType_primed| () Int)
(declare-fun |c_func_#in~i1| () Int)
(declare-fun |c_func_#in~i1_primed| () Int)
(declare-fun |c_func_#res| () Int)
(declare-fun |c_func_#res_primed| () Int)
(declare-fun |c_func_~#i1.base| () Int)
(declare-fun |c_func_~#i1.base_primed| () Int)
(declare-fun |c_func_~#i1.offset| () Int)
(declare-fun |c_func_~#i1.offset_primed| () Int)
(declare-fun c_func_~p~1.base () Int)
(declare-fun c_func_~p~1.base_primed () Int)
(declare-fun c_func_~p~1.offset () Int)
(declare-fun c_func_~p~1.offset_primed () Int)
(declare-fun |c_func_~#i2~1.base| () Int)
(declare-fun |c_func_~#i2~1.base_primed| () Int)
(declare-fun |c_func_~#i2~1.offset| () Int)
(declare-fun |c_func_~#i2~1.offset_primed| () Int)
(declare-fun c_~free_~addr.base () Int)
(declare-fun c_~free_~addr.base_primed () Int)
(declare-fun c_~free_~addr.offset () Int)
(declare-fun c_~free_~addr.offset_primed () Int)
(declare-fun |c_ULTIMATE.start_#t~ret1| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret1_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~ret0| () Int)
(declare-fun |c_main_#t~ret0_primed| () Int)
(assert (= |#sizeof~INT| 4))
(push 1)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#NULL.offset_-1| () Int)
(declare-fun |#valid_-1| () (Array Int Bool))
(declare-fun |#memory_int_-1| () (Array Int (Array Int Int)))
(declare-fun |#NULL.base_-1| () Int)
(declare-fun |old(#length)_-1| () (Array Int Int))
(declare-fun |old(#valid)_-1| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_-1| () Int)
(declare-fun |old(#memory_int)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#NULL.base)_-1| () Int)
(declare-fun |old(#valid)_0| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_0| () Int)
(declare-fun |old(#NULL.base)_0| () Int)
(declare-fun |#NULL.offset_0| () Int)
(declare-fun |#valid_0| () (Array Int Bool))
(declare-fun |#NULL.base_0| () Int)
(declare-fun |#NULL.offset_1| () Int)
(declare-fun |#valid_1| () (Array Int Bool))
(declare-fun |#NULL.base_1| () Int)
(declare-fun |old(#length)_4| () (Array Int Int))
(declare-fun |old(#valid)_4| () (Array Int Bool))
(declare-fun |old(#memory_int)_4| () (Array Int (Array Int Int)))
(declare-fun |#length_4| () (Array Int Int))
(declare-fun |#valid_4| () (Array Int Bool))
(declare-fun |#memory_int_4| () (Array Int (Array Int Int)))
(declare-fun |old(#length)_5| () (Array Int Int))
(declare-fun |old(#valid)_5| () (Array Int Bool))
(declare-fun |old(#memory_int)_5| () (Array Int (Array Int Int)))
(declare-fun |#length_5| () (Array Int Int))
(declare-fun |#valid_5| () (Array Int Bool))
(declare-fun |#memory_int_5| () (Array Int (Array Int Int)))
(declare-fun |func_#in~i1_5| () Int)
(declare-fun |#length_6| () (Array Int Int))
(declare-fun |func_~#i1.offset_6| () Int)
(declare-fun |func_~#i1.base_6| () Int)
(declare-fun |#valid_6| () (Array Int Bool))
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_ULTIMATE.start_#t~ret1_primed| |c_main_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_func_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! (= |c_func_#in~i1| 1) :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_ULTIMATE.start_#t~ret1_primed| |c_main_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_func_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! (= |c_func_#in~i1| 1) :named localVarsAssignment))
(pop 1)
(push 1)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#NULL.offset_-1| () Int)
(declare-fun |#valid_-1| () (Array Int Bool))
(declare-fun |#memory_int_-1| () (Array Int (Array Int Int)))
(declare-fun |#NULL.base_-1| () Int)
(declare-fun |old(#length)_-1| () (Array Int Int))
(declare-fun |old(#valid)_-1| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_-1| () Int)
(declare-fun |old(#memory_int)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#NULL.base)_-1| () Int)
(declare-fun |old(#valid)_0| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_0| () Int)
(declare-fun |old(#NULL.base)_0| () Int)
(declare-fun |#NULL.offset_0| () Int)
(declare-fun |#valid_0| () (Array Int Bool))
(declare-fun |#NULL.base_0| () Int)
(declare-fun |#NULL.offset_1| () Int)
(declare-fun |#valid_1| () (Array Int Bool))
(declare-fun |#NULL.base_1| () Int)
(declare-fun |old(#length)_4| () (Array Int Int))
(declare-fun |old(#valid)_4| () (Array Int Bool))
(declare-fun |old(#memory_int)_4| () (Array Int (Array Int Int)))
(declare-fun |#length_4| () (Array Int Int))
(declare-fun |#valid_4| () (Array Int Bool))
(declare-fun |#memory_int_4| () (Array Int (Array Int Int)))
(declare-fun |old(#length)_5| () (Array Int Int))
(declare-fun |old(#valid)_5| () (Array Int Bool))
(declare-fun |old(#memory_int)_5| () (Array Int (Array Int Int)))
(declare-fun |#length_5| () (Array Int Int))
(declare-fun |#valid_5| () (Array Int Bool))
(declare-fun |#memory_int_5| () (Array Int (Array Int Int)))
(declare-fun |func_#in~i1_5| () Int)
(declare-fun |#length_6| () (Array Int Int))
(declare-fun |func_~#i1.offset_6| () Int)
(declare-fun |func_~#i1.base_6| () Int)
(declare-fun |#valid_6| () (Array Int Bool))
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_ULTIMATE.start_#t~ret1_primed| |c_main_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_func_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! (= |c_func_#in~i1| 1) :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_func_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! (= |c_func_#in~i1| 1) :named localVarsAssignment))
(pop 1)
(push 1)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#NULL.offset_-1| () Int)
(declare-fun |#valid_-1| () (Array Int Bool))
(declare-fun |#memory_int_-1| () (Array Int (Array Int Int)))
(declare-fun |#NULL.base_-1| () Int)
(declare-fun |old(#length)_-1| () (Array Int Int))
(declare-fun |old(#valid)_-1| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_-1| () Int)
(declare-fun |old(#memory_int)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#NULL.base)_-1| () Int)
(declare-fun |old(#valid)_0| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_0| () Int)
(declare-fun |old(#NULL.base)_0| () Int)
(declare-fun |#NULL.offset_0| () Int)
(declare-fun |#valid_0| () (Array Int Bool))
(declare-fun |#NULL.base_0| () Int)
(declare-fun |#NULL.offset_1| () Int)
(declare-fun |#valid_1| () (Array Int Bool))
(declare-fun |#NULL.base_1| () Int)
(declare-fun |old(#length)_4| () (Array Int Int))
(declare-fun |old(#valid)_4| () (Array Int Bool))
(declare-fun |old(#memory_int)_4| () (Array Int (Array Int Int)))
(declare-fun |#length_4| () (Array Int Int))
(declare-fun |#valid_4| () (Array Int Bool))
(declare-fun |#memory_int_4| () (Array Int (Array Int Int)))
(declare-fun |old(#length)_5| () (Array Int Int))
(declare-fun |old(#valid)_5| () (Array Int Bool))
(declare-fun |old(#memory_int)_5| () (Array Int (Array Int Int)))
(declare-fun |#length_5| () (Array Int Int))
(declare-fun |#valid_5| () (Array Int Bool))
(declare-fun |#memory_int_5| () (Array Int (Array Int Int)))
(declare-fun |func_#in~i1_5| () Int)
(declare-fun |#length_6| () (Array Int Int))
(declare-fun |func_~#i1.offset_6| () Int)
(declare-fun |func_~#i1.base_6| () Int)
(declare-fun |#valid_6| () (Array Int Bool))
(declare-fun |#memory_int_7| () (Array Int (Array Int Int)))
(declare-fun func_~p~1.base_8 () Int)
(declare-fun func_~p~1.offset_8 () Int)
(declare-fun |#length_9| () (Array Int Int))
(declare-fun |func_~#i2~1.base_9| () Int)
(declare-fun |#valid_9| () (Array Int Bool))
(declare-fun |func_~#i2~1.offset_9| () Int)
(declare-fun func_~p~1.base_10 () Int)
(declare-fun |func_#res_10| () Int)
(declare-fun func_~p~1.offset_10 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= |#NULL.offset_0| |old(#NULL.offset)_0|) (= |#valid_0| |old(#valid)_0|) (= |#NULL.base_0| |old(#NULL.base)_0|)) :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! (and (= |old(#NULL.offset)_0| |#NULL.offset_-1|) (= |old(#valid)_0| |#valid_-1|) (= |old(#NULL.base)_0| |#NULL.base_-1|)) :named ssa_0_OldVarAssigCall))
(assert (! (and (= |#NULL.base_1| 0) (= |#NULL.offset_1| 0) (= |#valid_1| (store |#valid_0| 0 false))) :named ssa_1))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_ULTIMATE.start_#t~ret1_primed| |c_main_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_func_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! (= |c_func_#in~i1| 1) :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_func_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! (= |c_func_#in~i1| 1) :named localVarsAssignment))
(pop 1)
(push 1)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#NULL.offset_-1| () Int)
(declare-fun |#valid_-1| () (Array Int Bool))
(declare-fun |#memory_int_-1| () (Array Int (Array Int Int)))
(declare-fun |#NULL.base_-1| () Int)
(declare-fun |old(#length)_-1| () (Array Int Int))
(declare-fun |old(#valid)_-1| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_-1| () Int)
(declare-fun |old(#memory_int)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#NULL.base)_-1| () Int)
(declare-fun |old(#valid)_0| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_0| () Int)
(declare-fun |old(#NULL.base)_0| () Int)
(declare-fun |#NULL.offset_0| () Int)
(declare-fun |#valid_0| () (Array Int Bool))
(declare-fun |#NULL.base_0| () Int)
(declare-fun |#NULL.offset_1| () Int)
(declare-fun |#valid_1| () (Array Int Bool))
(declare-fun |#NULL.base_1| () Int)
(declare-fun |old(#length)_4| () (Array Int Int))
(declare-fun |old(#valid)_4| () (Array Int Bool))
(declare-fun |old(#memory_int)_4| () (Array Int (Array Int Int)))
(declare-fun |#length_4| () (Array Int Int))
(declare-fun |#valid_4| () (Array Int Bool))
(declare-fun |#memory_int_4| () (Array Int (Array Int Int)))
(declare-fun |old(#length)_5| () (Array Int Int))
(declare-fun |old(#valid)_5| () (Array Int Bool))
(declare-fun |old(#memory_int)_5| () (Array Int (Array Int Int)))
(declare-fun |#length_5| () (Array Int Int))
(declare-fun |#valid_5| () (Array Int Bool))
(declare-fun |#memory_int_5| () (Array Int (Array Int Int)))
(declare-fun |func_#in~i1_5| () Int)
(declare-fun |#length_6| () (Array Int Int))
(declare-fun |func_~#i1.offset_6| () Int)
(declare-fun |func_~#i1.base_6| () Int)
(declare-fun |#valid_6| () (Array Int Bool))
(declare-fun |#memory_int_7| () (Array Int (Array Int Int)))
(declare-fun func_~p~1.base_8 () Int)
(declare-fun func_~p~1.offset_8 () Int)
(declare-fun |#length_9| () (Array Int Int))
(declare-fun |func_~#i2~1.base_9| () Int)
(declare-fun |#valid_9| () (Array Int Bool))
(declare-fun |func_~#i2~1.offset_9| () Int)
(declare-fun func_~p~1.base_10 () Int)
(declare-fun |func_#res_10| () Int)
(declare-fun func_~p~1.offset_10 () Int)
(declare-fun |#valid_11| () (Array Int Bool))
(declare-fun |func_~#i1.offset_12| () Int)
(declare-fun |func_~#i1.base_12| () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= |#NULL.offset_0| |old(#NULL.offset)_0|) (= |#valid_0| |old(#valid)_0|) (= |#NULL.base_0| |old(#NULL.base)_0|)) :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! (and (= |old(#NULL.offset)_0| |#NULL.offset_-1|) (= |old(#valid)_0| |#valid_-1|) (= |old(#NULL.base)_0| |#NULL.base_-1|)) :named ssa_0_OldVarAssigCall))
(assert (! (and (= |#NULL.base_1| 0) (= |#NULL.offset_1| 0) (= |#valid_1| (store |#valid_0| 0 false))) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_ULTIMATE.start_#t~ret1_primed| |c_main_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_func_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! (= |c_func_#in~i1| 1) :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_func_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! (= |c_func_#in~i1| 1) :named localVarsAssignment))
(pop 1)
(push 1)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#NULL.offset_-1| () Int)
(declare-fun |#valid_-1| () (Array Int Bool))
(declare-fun |#memory_int_-1| () (Array Int (Array Int Int)))
(declare-fun |#NULL.base_-1| () Int)
(declare-fun |old(#length)_-1| () (Array Int Int))
(declare-fun |old(#valid)_-1| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_-1| () Int)
(declare-fun |old(#memory_int)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#NULL.base)_-1| () Int)
(declare-fun |old(#valid)_0| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_0| () Int)
(declare-fun |old(#NULL.base)_0| () Int)
(declare-fun |#NULL.offset_0| () Int)
(declare-fun |#valid_0| () (Array Int Bool))
(declare-fun |#NULL.base_0| () Int)
(declare-fun |#NULL.offset_1| () Int)
(declare-fun |#valid_1| () (Array Int Bool))
(declare-fun |#NULL.base_1| () Int)
(declare-fun |old(#length)_4| () (Array Int Int))
(declare-fun |old(#valid)_4| () (Array Int Bool))
(declare-fun |old(#memory_int)_4| () (Array Int (Array Int Int)))
(declare-fun |#length_4| () (Array Int Int))
(declare-fun |#valid_4| () (Array Int Bool))
(declare-fun |#memory_int_4| () (Array Int (Array Int Int)))
(declare-fun |old(#length)_5| () (Array Int Int))
(declare-fun |old(#valid)_5| () (Array Int Bool))
(declare-fun |old(#memory_int)_5| () (Array Int (Array Int Int)))
(declare-fun |#length_5| () (Array Int Int))
(declare-fun |#valid_5| () (Array Int Bool))
(declare-fun |#memory_int_5| () (Array Int (Array Int Int)))
(declare-fun |func_#in~i1_5| () Int)
(declare-fun |#length_6| () (Array Int Int))
(declare-fun |func_~#i1.offset_6| () Int)
(declare-fun |func_~#i1.base_6| () Int)
(declare-fun |#valid_6| () (Array Int Bool))
(declare-fun |#memory_int_7| () (Array Int (Array Int Int)))
(declare-fun func_~p~1.base_8 () Int)
(declare-fun func_~p~1.offset_8 () Int)
(declare-fun |#length_9| () (Array Int Int))
(declare-fun |func_~#i2~1.base_9| () Int)
(declare-fun |#valid_9| () (Array Int Bool))
(declare-fun |func_~#i2~1.offset_9| () Int)
(declare-fun func_~p~1.base_10 () Int)
(declare-fun |func_#res_10| () Int)
(declare-fun func_~p~1.offset_10 () Int)
(declare-fun |#valid_11| () (Array Int Bool))
(declare-fun |func_~#i1.offset_12| () Int)
(declare-fun |func_~#i1.base_12| () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= |#NULL.offset_0| |old(#NULL.offset)_0|) (= |#valid_0| |old(#valid)_0|) (= |#NULL.base_0| |old(#NULL.base)_0|)) :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! (and (= |old(#NULL.offset)_0| |#NULL.offset_-1|) (= |old(#valid)_0| |#valid_-1|) (= |old(#NULL.base)_0| |#NULL.base_-1|)) :named ssa_0_OldVarAssigCall))
(assert (! (and (= |#NULL.base_1| 0) (= |#NULL.offset_1| 0) (= |#valid_1| (store |#valid_0| 0 false))) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_ULTIMATE.start_#t~ret1_primed| |c_main_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_func_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! (= |c_func_#in~i1| 1) :named localVarsAssignment))
(pop 1)
(push 1)
(declare-fun |func_~#i2~1.base_const_1050085228| () Int)
(declare-fun |func_~#i1.base_const_-1065329000| () Int)
(declare-fun |#valid_const_-614144650| () (Array Int Bool))
(pop 1)
(push 1)
(assert (! true :named codeBlock))
(declare-fun |c_#NULL.offset_Hier| () Int)
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(declare-fun |c_#NULL.base_Hier| () Int)
(assert (! (and (= |c_old(#NULL.offset)| |c_#NULL.offset_Hier|) (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#NULL.base)| |c_#NULL.base_Hier|)) :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(pop 1)
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_func_#res|) :named codeBlock))
(declare-fun |c_#length_Hier| () (Array Int Int))
(declare-fun |c_#memory_int_Hier| () (Array Int (Array Int Int)))
(declare-fun |c_#valid_Hier| () (Array Int Bool))
(assert (! (and (= |c_old(#valid)| |c_#valid_Hier|) (= |c_old(#length)| |c_#length_Hier|) (= |c_old(#memory_int)| |c_#memory_int_Hier|)) :named modifiableVarEquality))
(assert (! (= |c_func_#in~i1| 1) :named localVarsAssignment))
(pop 1)
(push 1)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#NULL.offset_-1| () Int)
(declare-fun |#valid_-1| () (Array Int Bool))
(declare-fun |#memory_int_-1| () (Array Int (Array Int Int)))
(declare-fun |#NULL.base_-1| () Int)
(declare-fun |old(#length)_-1| () (Array Int Int))
(declare-fun |old(#valid)_-1| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_-1| () Int)
(declare-fun |old(#memory_int)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#NULL.base)_-1| () Int)
(declare-fun |old(#valid)_0| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_0| () Int)
(declare-fun |old(#NULL.base)_0| () Int)
(declare-fun |#NULL.offset_0| () Int)
(declare-fun |#valid_0| () (Array Int Bool))
(declare-fun |#NULL.base_0| () Int)
(declare-fun |#NULL.offset_1| () Int)
(declare-fun |#valid_1| () (Array Int Bool))
(declare-fun |#NULL.base_1| () Int)
(declare-fun |old(#length)_4| () (Array Int Int))
(declare-fun |old(#valid)_4| () (Array Int Bool))
(declare-fun |old(#memory_int)_4| () (Array Int (Array Int Int)))
(declare-fun |#length_4| () (Array Int Int))
(declare-fun |#valid_4| () (Array Int Bool))
(declare-fun |#memory_int_4| () (Array Int (Array Int Int)))
(declare-fun |old(#length)_5| () (Array Int Int))
(declare-fun |old(#valid)_5| () (Array Int Bool))
(declare-fun |old(#memory_int)_5| () (Array Int (Array Int Int)))
(declare-fun |#length_5| () (Array Int Int))
(declare-fun |#valid_5| () (Array Int Bool))
(declare-fun |#memory_int_5| () (Array Int (Array Int Int)))
(declare-fun |func_#in~i1_5| () Int)
(declare-fun |#length_6| () (Array Int Int))
(declare-fun |func_~#i1.offset_6| () Int)
(declare-fun |func_~#i1.base_6| () Int)
(declare-fun |#valid_6| () (Array Int Bool))
(declare-fun |#memory_int_7| () (Array Int (Array Int Int)))
(declare-fun func_~p~1.base_8 () Int)
(declare-fun func_~p~1.offset_8 () Int)
(declare-fun |#length_9| () (Array Int Int))
(declare-fun |func_~#i2~1.base_9| () Int)
(declare-fun |#valid_9| () (Array Int Bool))
(declare-fun |func_~#i2~1.offset_9| () Int)
(declare-fun func_~p~1.base_10 () Int)
(declare-fun |func_#res_10| () Int)
(declare-fun func_~p~1.offset_10 () Int)
(declare-fun |#valid_11| () (Array Int Bool))
(declare-fun |func_~#i1.offset_12| () Int)
(declare-fun |func_~#i1.base_12| () Int)
(declare-fun |#valid_13| () (Array Int Bool))
(declare-fun |func_~#i2~1.base_14| () Int)
(declare-fun |func_~#i2~1.offset_14| () Int)
(declare-fun |main_#t~ret0_16| () Int)
(declare-fun |main_#res_17| () Int)
(declare-fun |main_#t~ret0_17| () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= |#NULL.offset_0| |old(#NULL.offset)_0|) (= |#valid_0| |old(#valid)_0|) (= |#NULL.base_0| |old(#NULL.base)_0|)) :named ssa_0_GlobVarAssigCall))
(assert (! true :named ssa_0_LocVarAssigCall))
(assert (! (and (= |old(#NULL.offset)_0| |#NULL.offset_-1|) (= |old(#valid)_0| |#valid_-1|) (= |old(#NULL.base)_0| |#NULL.base_-1|)) :named ssa_0_OldVarAssigCall))
(assert (! (and (= |#NULL.base_1| 0) (= |#NULL.offset_1| 0) (= |#valid_1| (store |#valid_0| 0 false))) :named ssa_1))
(assert (! true :named ssa_2))
(assert (! true :named ssa_3_return))
(assert (! (and (= |#valid_4| |old(#valid)_4|) (= |#length_4| |old(#length)_4|) (= |#memory_int_4| |old(#memory_int)_4|)) :named ssa_4_GlobVarAssigCall))
(assert (! true :named ssa_4_LocVarAssigCall))
(assert (! (and (= |old(#valid)_4| |#valid_1|) (= |old(#length)_4| |#length_-1|) (= |old(#memory_int)_4| |#memory_int_-1|)) :named ssa_4_OldVarAssigCall))
(assert (! (and (= |#valid_5| |old(#valid)_5|) (= |#length_5| |old(#length)_5|) (= |#memory_int_5| |old(#memory_int)_5|)) :named ssa_5_GlobVarAssigCall))
(assert (! (= |func_#in~i1_5| 1) :named ssa_5_LocVarAssigCall))
(assert (! (and (= |old(#valid)_5| |#valid_4|) (= |old(#length)_5| |#length_4|) (= |old(#memory_int)_5| |#memory_int_4|)) :named ssa_5_OldVarAssigCall))
(assert (! (and (= |#length_6| (store |#length_5| |func_~#i1.base_6| 4)) (not (= |func_~#i1.base_6| 0)) (= |func_~#i1.offset_6| 0) (= |#valid_6| (store |#valid_5| |func_~#i1.base_6| true)) (= (select |#valid_5| |func_~#i1.base_6|) false)) :named ssa_6))
(assert (! (and (<= (+ 4 |func_~#i1.offset_6|) (select |#length_6| |func_~#i1.base_6|)) (select |#valid_6| |func_~#i1.base_6|) (= |#memory_int_7| (store |#memory_int_5| |func_~#i1.base_6| (store (select |#memory_int_5| |func_~#i1.base_6|) |func_~#i1.offset_6| |func_#in~i1_5|)))) :named ssa_7))
(assert (! true :named ssa_8))
(assert (! (and (= |#length_9| (store |#length_6| |func_~#i2~1.base_9| 4)) (not (= |func_~#i2~1.base_9| 0)) (= |func_~#i2~1.offset_9| 0) (= |#valid_9| (store |#valid_6| |func_~#i2~1.base_9| true)) (= (select |#valid_6| |func_~#i2~1.base_9|) false)) :named ssa_9))
(assert (! (and (= func_~p~1.base_10 |func_~#i1.base_6|) (= func_~p~1.offset_10 |func_~#i1.offset_6|) (= |func_#res_10| 0)) :named ssa_10))
(assert (! (and (select |#valid_9| |func_~#i1.base_6|) (= |func_~#i1.offset_6| 0) (= |#valid_11| (store |#valid_9| |func_~#i1.base_6| false))) :named ssa_11))
(assert (! true :named ssa_12))
(assert (! (and (select |#valid_11| |func_~#i2~1.base_9|) (= |func_~#i2~1.offset_9| 0) (= |#valid_13| (store |#valid_11| |func_~#i2~1.base_9| false))) :named ssa_13))
(assert (! true :named ssa_14))
(assert (! true :named ssa_15))
(assert (! (= |main_#t~ret0_16| |func_#res_10|) :named ssa_16_return))
(assert (! (= |main_#res_17| 0) :named ssa_17))
(assert (! (not (= |#valid_13| |old(#valid)_4|)) :named ssa_18))
(check-sat)


(get-interpolants 
(and ssa_4_GlobVarAssigCall ssa_4_LocVarAssigCall ssa_4_OldVarAssigCall ssa_0_GlobVarAssigCall ssa_1 ssa_2 ssa_3_return ssa_0_LocVarAssigCall ssa_0_OldVarAssigCall ssa_precond) 
 (
 (and ssa_5_GlobVarAssigCall ssa_6 ssa_7 ssa_8 ssa_9 ssa_10 ssa_11 ssa_12 ssa_13 ssa_14 ssa_15)
 ) 
(and ssa_18 ssa_postcond ssa_16_return ssa_5_LocVarAssigCall ssa_5_OldVarAssigCall ssa_17 ))
(exit)
