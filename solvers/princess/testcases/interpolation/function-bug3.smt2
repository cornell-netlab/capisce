(set-option :produce-models true)
(set-option :produce-interpolants true)
(set-logic AUFNIRA)
(set-info :source |
    SMT script generated on 2015/03/23 by Ultimate. http://ultimate.informatik.uni-freiburg.de/
|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(echo "Start declaration of constants")
(declare-fun |#sizeof~INT| () Int)
(echo "Finished declaration of constants")
(echo "Start declaration of functions")
(declare-fun |#to_int| (Real) Int)
(echo "Finished declaration of functions")
(echo "Start declaration of global variables")
(declare-fun |c_old(#NULL.base)| () Int)
(declare-fun |c_old(#NULL.base)_primed| () Int)
(declare-fun |c_#NULL.base| () Int)
(declare-fun |c_#NULL.base_primed| () Int)
(declare-fun |c_old(#NULL.offset)| () Int)
(declare-fun |c_old(#NULL.offset)_primed| () Int)
(declare-fun |c_#NULL.offset| () Int)
(declare-fun |c_#NULL.offset_primed| () Int)
(declare-fun |c_old(#memory_int)| () (Array Int (Array Int Int)))
(declare-fun |c_old(#memory_int)_primed| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int| () (Array Int (Array Int Int)))
(declare-fun |c_#memory_int_primed| () (Array Int (Array Int Int)))
(declare-fun |c_old(#valid)| () (Array Int Bool))
(declare-fun |c_old(#valid)_primed| () (Array Int Bool))
(declare-fun |c_#valid| () (Array Int Bool))
(declare-fun |c_#valid_primed| () (Array Int Bool))
(declare-fun |c_old(#length)| () (Array Int Int))
(declare-fun |c_old(#length)_primed| () (Array Int Int))
(declare-fun |c_#length| () (Array Int Int))
(declare-fun |c_#length_primed| () (Array Int Int))
(echo "Finished declaration global variables")
(echo "Start declaration of local variables")
(declare-fun |c___VERIFIER_nondet_int_#res| () Int)
(declare-fun |c___VERIFIER_nondet_int_#res_primed| () Int)
(declare-fun c_~malloc_~size () Int)
(declare-fun c_~malloc_~size_primed () Int)
(declare-fun |c_~malloc_#res.base| () Int)
(declare-fun |c_~malloc_#res.base_primed| () Int)
(declare-fun |c_~malloc_#res.offset| () Int)
(declare-fun |c_~malloc_#res.offset_primed| () Int)
(declare-fun |c_read~int_#ptr.base| () Int)
(declare-fun |c_read~int_#ptr.base_primed| () Int)
(declare-fun |c_read~int_#ptr.offset| () Int)
(declare-fun |c_read~int_#ptr.offset_primed| () Int)
(declare-fun |c_read~int_#sizeOfReadType| () Int)
(declare-fun |c_read~int_#sizeOfReadType_primed| () Int)
(declare-fun |c_read~int_#value| () Int)
(declare-fun |c_read~int_#value_primed| () Int)
(declare-fun |c_write~int_#value| () Int)
(declare-fun |c_write~int_#value_primed| () Int)
(declare-fun |c_write~int_#ptr.base| () Int)
(declare-fun |c_write~int_#ptr.base_primed| () Int)
(declare-fun |c_write~int_#ptr.offset| () Int)
(declare-fun |c_write~int_#ptr.offset_primed| () Int)
(declare-fun |c_write~int_#sizeOfWrittenType| () Int)
(declare-fun |c_write~int_#sizeOfWrittenType_primed| () Int)
(declare-fun c_~free_~addr.base () Int)
(declare-fun c_~free_~addr.base_primed () Int)
(declare-fun c_~free_~addr.offset () Int)
(declare-fun c_~free_~addr.offset_primed () Int)
(declare-fun |c_ULTIMATE.start_#t~ret14| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret14_primed| () Int)
(declare-fun |c_cstrcat_#in~s1.base| () Int)
(declare-fun |c_cstrcat_#in~s1.base_primed| () Int)
(declare-fun |c_cstrcat_#in~s1.offset| () Int)
(declare-fun |c_cstrcat_#in~s1.offset_primed| () Int)
(declare-fun |c_cstrcat_#in~s2.base| () Int)
(declare-fun |c_cstrcat_#in~s2.base_primed| () Int)
(declare-fun |c_cstrcat_#in~s2.offset| () Int)
(declare-fun |c_cstrcat_#in~s2.offset_primed| () Int)
(declare-fun |c_cstrcat_#res.base| () Int)
(declare-fun |c_cstrcat_#res.base_primed| () Int)
(declare-fun |c_cstrcat_#res.offset| () Int)
(declare-fun |c_cstrcat_#res.offset_primed| () Int)
(declare-fun |c_cstrcat_#t~post1.base| () Int)
(declare-fun |c_cstrcat_#t~post1.base_primed| () Int)
(declare-fun |c_cstrcat_#t~post1.offset| () Int)
(declare-fun |c_cstrcat_#t~post1.offset_primed| () Int)
(declare-fun |c_cstrcat_#t~mem0| () Int)
(declare-fun |c_cstrcat_#t~mem0_primed| () Int)
(declare-fun |c_cstrcat_#t~post2.base| () Int)
(declare-fun |c_cstrcat_#t~post2.base_primed| () Int)
(declare-fun |c_cstrcat_#t~post2.offset| () Int)
(declare-fun |c_cstrcat_#t~post2.offset_primed| () Int)
(declare-fun |c_cstrcat_#t~post3.base| () Int)
(declare-fun |c_cstrcat_#t~post3.base_primed| () Int)
(declare-fun |c_cstrcat_#t~post3.offset| () Int)
(declare-fun |c_cstrcat_#t~post3.offset_primed| () Int)
(declare-fun |c_cstrcat_#t~mem5| () Int)
(declare-fun |c_cstrcat_#t~mem5_primed| () Int)
(declare-fun c_cstrcat_~s1.base () Int)
(declare-fun c_cstrcat_~s1.base_primed () Int)
(declare-fun c_cstrcat_~s1.offset () Int)
(declare-fun c_cstrcat_~s1.offset_primed () Int)
(declare-fun c_cstrcat_~s2.base () Int)
(declare-fun c_cstrcat_~s2.base_primed () Int)
(declare-fun c_cstrcat_~s2.offset () Int)
(declare-fun c_cstrcat_~s2.offset_primed () Int)
(declare-fun c_cstrcat_~s~2.base () Int)
(declare-fun c_cstrcat_~s~2.base_primed () Int)
(declare-fun c_cstrcat_~s~2.offset () Int)
(declare-fun c_cstrcat_~s~2.offset_primed () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~nondet6| () Int)
(declare-fun |c_main_#t~nondet6_primed| () Int)
(declare-fun |c_main_#t~nondet7| () Int)
(declare-fun |c_main_#t~nondet7_primed| () Int)
(declare-fun |c_main_#t~nondet8| () Int)
(declare-fun |c_main_#t~nondet8_primed| () Int)
(declare-fun |c_main_#t~malloc9.base| () Int)
(declare-fun |c_main_#t~malloc9.base_primed| () Int)
(declare-fun |c_main_#t~malloc9.offset| () Int)
(declare-fun |c_main_#t~malloc9.offset_primed| () Int)
(declare-fun |c_main_#t~malloc10.base| () Int)
(declare-fun |c_main_#t~malloc10.base_primed| () Int)
(declare-fun |c_main_#t~malloc10.offset| () Int)
(declare-fun |c_main_#t~malloc10.offset_primed| () Int)
(declare-fun |c_main_#t~ret13.base| () Int)
(declare-fun |c_main_#t~ret13.base_primed| () Int)
(declare-fun |c_main_#t~ret13.offset| () Int)
(declare-fun |c_main_#t~ret13.offset_primed| () Int)
(declare-fun c_main_~length1~3 () Int)
(declare-fun c_main_~length1~3_primed () Int)
(declare-fun c_main_~length2~3 () Int)
(declare-fun c_main_~length2~3_primed () Int)
(declare-fun c_main_~length3~3 () Int)
(declare-fun c_main_~length3~3_primed () Int)
(declare-fun c_main_~nondetString1~3.base () Int)
(declare-fun c_main_~nondetString1~3.base_primed () Int)
(declare-fun c_main_~nondetString1~3.offset () Int)
(declare-fun c_main_~nondetString1~3.offset_primed () Int)
(declare-fun c_main_~nondetString2~3.base () Int)
(declare-fun c_main_~nondetString2~3.base_primed () Int)
(declare-fun c_main_~nondetString2~3.offset () Int)
(declare-fun c_main_~nondetString2~3.offset_primed () Int)
(echo "Finished declaration local variables")
(assert (= |#sizeof~INT| 4))
(echo "starting trace check")
;(set-option :produce-interpolants true)
(push 1)
(declare-fun |#length_-1| () (Array Int Int))
(declare-fun |#NULL.offset_-1| () Int)
(declare-fun |#valid_-1| () (Array Int Bool))
(declare-fun |#memory_int_-1| () (Array Int (Array Int Int)))
(declare-fun |#NULL.base_-1| () Int)
(declare-fun |old(#length)_-1| () (Array Int Int))
(declare-fun |old(#valid)_-1| () (Array Int Bool))
(declare-fun |old(#NULL.offset)_-1| () Int)
(declare-fun |old(#memory_int)_-1| () (Array Int (Array Int Int)))
(declare-fun |old(#NULL.base)_-1| () Int)
(declare-fun |#NULL.offset_0| () Int)
(declare-fun |#valid_0| () (Array Int Bool))
(declare-fun |#NULL.base_0| () Int)
(declare-fun |old(#length)_1| () (Array Int Int))
(declare-fun |old(#valid)_1| () (Array Int Bool))
(declare-fun |old(#memory_int)_1| () (Array Int (Array Int Int)))
(declare-fun |#length_1| () (Array Int Int))
(declare-fun |#valid_1| () (Array Int Bool))
(declare-fun |#memory_int_1| () (Array Int (Array Int Int)))
(declare-fun |main_#t~nondet6_1| () Int)
(declare-fun |main_#t~nondet8_1| () Int)
(declare-fun |main_#t~nondet7_1| () Int)
(declare-fun main_~nondetString2~3.base_2 () Int)
(declare-fun |main_#t~malloc10.offset_2| () Int)
(declare-fun |main_#t~malloc9.base_2| () Int)
(declare-fun main_~length3~3_2 () Int)
(declare-fun |main_#t~malloc10.base_2| () Int)
(declare-fun |main_#t~malloc9.offset_2| () Int)
(declare-fun main_~length2~3_2 () Int)
(declare-fun main_~length1~3_2 () Int)
(declare-fun |main_#t~nondet7_2| () Int)
(declare-fun main_~nondetString1~3.base_2 () Int)
(declare-fun |#length_2| () (Array Int Int))
(declare-fun |main_#t~nondet6_2| () Int)
(declare-fun main_~nondetString1~3.offset_2 () Int)
(declare-fun |main_#t~nondet8_2| () Int)
(declare-fun |#valid_2| () (Array Int Bool))
(declare-fun main_~nondetString2~3.offset_2 () Int)
(declare-fun |#memory_int_3| () (Array Int (Array Int Int)))
(declare-fun |#memory_int_4| () (Array Int (Array Int Int)))
(declare-fun |old(#memory_int)_5| () (Array Int (Array Int Int)))
(declare-fun |#memory_int_5| () (Array Int (Array Int Int)))
(declare-fun |cstrcat_#in~s2.offset_5| () Int)
(declare-fun |cstrcat_#in~s1.offset_5| () Int)
(declare-fun |cstrcat_#in~s1.base_5| () Int)
(declare-fun |cstrcat_#in~s2.base_5| () Int)
(declare-fun cstrcat_~s1.offset_6 () Int)
(declare-fun cstrcat_~s1.base_6 () Int)
(declare-fun cstrcat_~s2.base_6 () Int)
(declare-fun cstrcat_~s~2.base_6 () Int)
(declare-fun cstrcat_~s2.offset_6 () Int)
(declare-fun cstrcat_~s~2.offset_6 () Int)
(declare-fun |cstrcat_#t~mem0_8| () Int)
(declare-fun |cstrcat_#t~post1.base_9| () Int)
(declare-fun cstrcat_~s~2.base_9 () Int)
(declare-fun |cstrcat_#t~mem0_9| () Int)
(declare-fun |cstrcat_#t~post1.offset_9| () Int)
(declare-fun cstrcat_~s~2.offset_9 () Int)
(declare-fun |cstrcat_#t~mem0_11| () Int)
(declare-fun |cstrcat_#t~post1.base_12| () Int)
(declare-fun cstrcat_~s~2.base_12 () Int)
(declare-fun |cstrcat_#t~mem0_12| () Int)
(declare-fun |cstrcat_#t~post1.offset_12| () Int)
(declare-fun cstrcat_~s~2.offset_12 () Int)
(declare-fun |cstrcat_#t~mem0_14| () Int)
(declare-fun |cstrcat_#t~post1.base_15| () Int)
(declare-fun cstrcat_~s~2.base_15 () Int)
(declare-fun |cstrcat_#t~mem0_15| () Int)
(declare-fun |cstrcat_#t~post1.offset_15| () Int)
(declare-fun cstrcat_~s~2.offset_15 () Int)
(assert (! true :named ssa_precond))
(assert (! (not false) :named ssa_postcond))
(assert (! (and (= |#NULL.base_0| 0) (= |#NULL.offset_0| 0) (= |#valid_0| (store |#valid_-1| 0 false)) (= |#NULL.offset_-1| |#NULL.offset_-1|) (= |#valid_-1| |#valid_-1|) (= |#NULL.base_-1| |#NULL.base_-1|)) :named ssa_0))
(assert (! (and (= |#valid_1| |old(#valid)_1|) (= |#length_1| |old(#length)_1|) (= |#memory_int_1| |old(#memory_int)_1|)) :named ssa_1_GlobVarAssigCall))
(assert (! true :named ssa_1_LocVarAssigCall))
(assert (! (and (= |old(#valid)_1| |#valid_0|) (= |old(#length)_1| |#length_-1|) (= |old(#memory_int)_1| |#memory_int_-1|)) :named ssa_1_OldVarAssigCall))
(assert (! (and (= main_~nondetString2~3.offset_2 |main_#t~malloc10.offset_2|) (= main_~nondetString2~3.base_2 |main_#t~malloc10.base_2|) (= |#length_2| (store (store |#length_1| |main_#t~malloc9.base_2| (* main_~length1~3_2 1)) |main_#t~malloc10.base_2| (* main_~length2~3_2 1))) (not (= |main_#t~malloc10.base_2| 0)) (= |main_#t~malloc10.offset_2| 0) (= |#valid_2| (store (store |#valid_1| |main_#t~malloc9.base_2| true) |main_#t~malloc10.base_2| true)) (not (select (store |#valid_1| |main_#t~malloc9.base_2| true) |main_#t~malloc10.base_2|)) (= main_~nondetString1~3.offset_2 |main_#t~malloc9.offset_2|) (= main_~nondetString1~3.base_2 |main_#t~malloc9.base_2|) (= (store |#length_1| |main_#t~malloc9.base_2| (* main_~length1~3_2 1)) (store |#length_1| |main_#t~malloc9.base_2| (* main_~length1~3_2 1))) (not (= |main_#t~malloc9.base_2| 0)) (= |main_#t~malloc9.offset_2| 0) (= (store |#valid_1| |main_#t~malloc9.base_2| true) (store |#valid_1| |main_#t~malloc9.base_2| true)) (not (select |#valid_1| |main_#t~malloc9.base_2|)) (not (< (- main_~length2~3_2 main_~length3~3_2) main_~length1~3_2)) (not (> main_~length3~3_2 main_~length2~3_2)) (or (= main_~length3~3_2 1) (not (< |main_#t~nondet8_1| 1))) (or (= |main_#t~nondet8_1| main_~length3~3_2) (= main_~length3~3_2 1)) (or (= |main_#t~nondet8_1| main_~length3~3_2) (< |main_#t~nondet8_1| 1)) (or (= main_~length2~3_2 2) (not (< |main_#t~nondet7_1| 2))) (or (= |main_#t~nondet7_1| main_~length2~3_2) (= main_~length2~3_2 2)) (or (= |main_#t~nondet7_1| main_~length2~3_2) (< |main_#t~nondet7_1| 2)) (or (not (< |main_#t~nondet6_1| 1)) (= main_~length1~3_2 1)) (or (< |main_#t~nondet6_1| 1) (= |main_#t~nondet6_1| main_~length1~3_2)) (or (= |main_#t~nondet6_1| main_~length1~3_2) (= main_~length1~3_2 1)) (= |main_#t~nondet6_1| |main_#t~nondet6_1|) (= |main_#t~nondet7_1| |main_#t~nondet7_1|) (= |main_#t~nondet8_1| |main_#t~nondet8_1|)) :named ssa_2))
(assert (! (and (<= (+ 1 (+ main_~nondetString1~3.offset_2 (* (- main_~length1~3_2 1) 1))) (select |#length_2| main_~nondetString1~3.base_2)) (select |#valid_2| main_~nondetString1~3.base_2) (= |#memory_int_3| (store |#memory_int_1| main_~nondetString1~3.base_2 (store (select |#memory_int_1| main_~nondetString1~3.base_2) (+ main_~nondetString1~3.offset_2 (* (- main_~length1~3_2 1) 1)) 0)))) :named ssa_3))
(assert (! (and (<= (+ 1 (+ main_~nondetString2~3.offset_2 (* (- main_~length3~3_2 1) 1))) (select |#length_2| main_~nondetString2~3.base_2)) (select |#valid_2| main_~nondetString2~3.base_2) (= |#memory_int_4| (store |#memory_int_3| main_~nondetString2~3.base_2 (store (select |#memory_int_3| main_~nondetString2~3.base_2) (+ main_~nondetString2~3.offset_2 (* (- main_~length3~3_2 1) 1)) 0)))) :named ssa_4))
(assert (! (= |#memory_int_5| |old(#memory_int)_5|) :named ssa_5_GlobVarAssigCall))
(assert (! (and (= |cstrcat_#in~s1.base_5| main_~nondetString2~3.base_2) (= |cstrcat_#in~s1.offset_5| main_~nondetString2~3.offset_2) (= |cstrcat_#in~s2.base_5| main_~nondetString1~3.base_2) (= |cstrcat_#in~s2.offset_5| main_~nondetString1~3.offset_2)) :named ssa_5_LocVarAssigCall))
(assert (! (= |old(#memory_int)_5| |#memory_int_4|) :named ssa_5_OldVarAssigCall))
(assert (! (and (= cstrcat_~s1.offset_6 |cstrcat_#in~s1.offset_5|) (= cstrcat_~s1.base_6 |cstrcat_#in~s1.base_5|) (= cstrcat_~s2.base_6 |cstrcat_#in~s2.base_5|) (= cstrcat_~s2.offset_6 |cstrcat_#in~s2.offset_5|) (= cstrcat_~s~2.offset_6 cstrcat_~s1.offset_6) (= cstrcat_~s~2.base_6 cstrcat_~s1.base_6)) :named ssa_6))
(assert (! true :named ssa_7))
(assert (! (and (<= (+ 1 cstrcat_~s~2.offset_6) (select |#length_2| cstrcat_~s~2.base_6)) (select |#valid_2| cstrcat_~s~2.base_6) (= |cstrcat_#t~mem0_8| (select (select |#memory_int_5| cstrcat_~s~2.base_6) cstrcat_~s~2.offset_6))) :named ssa_8))
(assert (! (and (not (= |cstrcat_#t~mem0_8| 0)) (= cstrcat_~s~2.offset_9 (+ cstrcat_~s~2.offset_6 1)) (= cstrcat_~s~2.base_9 cstrcat_~s~2.base_6)) :named ssa_9))
(assert (! true :named ssa_10))
(assert (! (and (<= (+ 1 cstrcat_~s~2.offset_9) (select |#length_2| cstrcat_~s~2.base_9)) (select |#valid_2| cstrcat_~s~2.base_9) (= |cstrcat_#t~mem0_11| (select (select |#memory_int_5| cstrcat_~s~2.base_9) cstrcat_~s~2.offset_9))) :named ssa_11))
(assert (! (and (not (= |cstrcat_#t~mem0_11| 0)) (= cstrcat_~s~2.offset_12 (+ cstrcat_~s~2.offset_9 1)) (= cstrcat_~s~2.base_12 cstrcat_~s~2.base_9)) :named ssa_12))
(assert (! true :named ssa_13))
(assert (! (and (<= (+ 1 cstrcat_~s~2.offset_12) (select |#length_2| cstrcat_~s~2.base_12)) (select |#valid_2| cstrcat_~s~2.base_12) (= |cstrcat_#t~mem0_14| (select (select |#memory_int_5| cstrcat_~s~2.base_12) cstrcat_~s~2.offset_12))) :named ssa_14))
(assert (! (and (not (= |cstrcat_#t~mem0_14| 0)) (= cstrcat_~s~2.offset_15 (+ cstrcat_~s~2.offset_12 1)) (= cstrcat_~s~2.base_15 cstrcat_~s~2.base_12)) :named ssa_15))
(assert (! true :named ssa_16))
(assert (! (not (<= (+ 1 cstrcat_~s~2.offset_15) (select |#length_2| cstrcat_~s~2.base_15))) :named ssa_17))
(check-sat)
