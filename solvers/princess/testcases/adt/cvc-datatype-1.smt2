(set-info :notes "CVC4 always dumps the most general, all-supported logic (below), as some internals might require the use of a logic more general than the input.")
(set-logic ALL)
(declare-datatypes () ((nat (succ (pred nat)) (zero))
(list (cons (car tree) (cdr list)) (null))
(tree (node (children list)) (leaf (data nat)))
))
(declare-fun x1 () nat)
(declare-fun x2 () list)
(declare-fun x3 () tree)
(assert (let ((_let_0 (ite (is-cons x2) (car x2) (leaf zero))))
        (let ((_let_1 (ite (is-leaf _let_0) (data _let_0) zero))) 
        (let ((_let_2 (ite (is-succ _let_1) (pred _let_1) zero))) 
        (let ((_let_3 (leaf (ite (is-succ _let_2) (pred _let_2) zero)))) 
        (let ((_let_4 (ite (is-leaf _let_3) (data _let_3) zero))) 
        (not (not (and (= (succ (ite (is-leaf x3) (data x3) zero)) x1) (is-leaf (leaf (ite (is-succ _let_4) (pred _let_4) zero))))))))))))
(declare-fun pred_uf_1 (nat) nat)
(declare-fun data_uf_2 (tree) nat)
(declare-fun car_uf_3 (list) tree)
(check-sat)
(get-model)
