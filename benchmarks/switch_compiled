
got p4light

Got p4cub

Got coq_gcl
GCL program:
_state$parse_arp_rarp$next := (_ bv0 1);
_state$parse_arp_rarp_ipv4$next := (_ bv0 1);
_state$parse_bfd$next := (_ bv0 1);
_state$parse_eompls$next := (_ bv0 1);
_state$parse_erspan_t3$next := (_ bv0 1);
_state$parse_ethernet$next := (_ bv0 1);
_state$parse_fabric_header$next := (_ bv0 1);
_state$parse_fabric_header_cpu$next := (_ bv0 1);
_state$parse_fabric_header_mirror$next := (_ bv0 1);
_state$parse_fabric_header_multicast$next := (_ bv0 1);
_state$parse_fabric_header_unicast$next := (_ bv0 1);
_state$parse_fabric_payload_header$next := (_ bv0 1);
_state$parse_fcoe$next := (_ bv0 1);
_state$parse_geneve$next := (_ bv0 1);
_state$parse_gre$next := (_ bv0 1);
_state$parse_gre_ipv4$next := (_ bv0 1);
_state$parse_gre_ipv6$next := (_ bv0 1);
_state$parse_gre_v6$next := (_ bv0 1);
_state$parse_icmp$next := (_ bv0 1);
_state$parse_inner_ethernet$next := (_ bv0 1);
_state$parse_inner_icmp$next := (_ bv0 1);
_state$parse_inner_ipv4$next := (_ bv0 1);
_state$parse_inner_ipv6$next := (_ bv0 1);
_state$parse_inner_sctp$next := (_ bv0 1);
_state$parse_inner_tcp$next := (_ bv0 1);
_state$parse_inner_udp$next := (_ bv0 1);
_state$parse_ipv4$next := (_ bv0 1);
_state$parse_ipv4_in_ip$next := (_ bv0 1);
_state$parse_ipv6$next := (_ bv0 1);
_state$parse_ipv6_in_ip$next := (_ bv0 1);
_state$parse_lisp$next := (_ bv0 1);
_state$parse_llc_header$next := (_ bv0 1);
_state$parse_mpls$next := (_ bv0 1);
_state$parse_mpls_bos$next := (_ bv0 1);
_state$parse_mpls_inner_ipv4$next := (_ bv0 1);
_state$parse_mpls_inner_ipv6$next := (_ bv0 1);
_state$parse_nsh$next := (_ bv0 1);
_state$parse_nvgre$next := (_ bv0 1);
_state$parse_pw$next := (_ bv0 1);
_state$parse_qinq$next := (_ bv0 1);
_state$parse_qinq_vlan$next := (_ bv0 1);
_state$parse_roce$next := (_ bv0 1);
_state$parse_roce_v2$next := (_ bv0 1);
_state$parse_sctp$next := (_ bv0 1);
_state$parse_set_prio_high$next := (_ bv0 1);
_state$parse_set_prio_max$next := (_ bv0 1);
_state$parse_set_prio_med$next := (_ bv0 1);
_state$parse_sflow$next := (_ bv0 1);
_state$parse_snap_header$next := (_ bv0 1);
_state$parse_tcp$next := (_ bv0 1);
_state$parse_trill$next := (_ bv0 1);
_state$parse_udp$next := (_ bv0 1);
_state$parse_udp_v6$next := (_ bv0 1);
_state$parse_vlan$next := (_ bv0 1);
_state$parse_vntag$next := (_ bv0 1);
_state$parse_vpls$next := (_ bv0 1);
_state$parse_vxlan$next := (_ bv0 1);
_state$start$next := (_ bv1 1);
_state$accept$next := (_ bv0 1);
_state$reject$next := (_ bv0 1);
{
  assume (= _state$start$next (_ bv1 1));
  _state$start$next := (_ bv0 1);
  _state$parse_ethernet$next := (_ bv1 1)
} [] {
  assume (not
  (= _state$start$next (_ bv1 1)))
};
{
  assume (= _state$parse_ethernet$next (_ bv1 1));
  _state$parse_ethernet$next := (_ bv0 1);
  hdr.ethernet.is_valid := (_ bv1 1);
  {
    assume (= hdr.ethernet.etherType (_ bv2048 16));
    _state$parse_ipv4$next := (_ bv1 1)
  } [] {
    assume (not
  (= hdr.ethernet.etherType (_ bv2048 16)));
    _state$accept$next := (_ bv1 1)
  }
} [] {
  assume (not
  (= _state$parse_ethernet$next (_ bv1 1)))
};
{
  assume (= _state$parse_ipv4$next (_ bv1 1));
  _state$parse_ipv4$next := (_ bv0 1);
  hdr.ipv4.is_valid := (_ bv1 1);
  _state$accept$next := (_ bv1 1)
} [] {
  assume (not
  (= _state$parse_ipv4$next (_ bv1 1)))
};
{
  assume (= _state$accept$next (_ bv1 1));
  assume (= _symb$ingress_port_mapping$match_0 standard_metadata.ingress_port);
  assume (= _symb$ingress_port_mapping$action (_ bv0 1));
  _return$ingress_port_mapping.action_run := (_ bv0 1);
  meta.ingress_metadata.ifindex := _symb$ingress_port_mapping$set_ifindex$arg$ifindex;
  meta.ingress_metadata.port_type := _symb$ingress_port_mapping$set_ifindex$arg$port_type;
  assume (= _symb$ingress_port_properties$match_0 standard_metadata.ingress_port);
  assume (= _symb$ingress_port_properties$action (_ bv0 1));
  _return$ingress_port_properties.action_run := (_ bv0 1);
  meta.acl_metadata.if_label := _symb$ingress_port_properties$set_ingress_port_properties$arg$if_label;
  assume (= _symb$switch_config_params$action (_ bv0 1));
  _return$switch_config_params.action_run := (_ bv0 1);
  meta.i2e_metadata.ingress_tstamp := ((_ extract 31 0) standard_metadata.ingress_global_timestamp);
  meta.ingress_metadata.ingress_port := standard_metadata.ingress_port;
  meta.l2_metadata.same_if_check := meta.ingress_metadata.ifindex;
  standard_metadata.egress_spec := (_ bv511 9);
  assume (= _symb$port_vlan_mapping$match_0 meta.ingress_metadata.ifindex);
  assume (= _symb$port_vlan_mapping$match_1 t$12);
  assume (= _symb$port_vlan_mapping$match_2 hdr.vlan_tag_$_0_$.vid);
  assume (= _symb$port_vlan_mapping$match_3 t$13);
  assume (= _symb$port_vlan_mapping$match_4 hdr.vlan_tag_$_1_$.vid);
  {
    assume (= _symb$port_vlan_mapping$action (_ bv1 1));
    _return$port_vlan_mapping.action_run := (_ bv0 1);
    meta.ingress_metadata.bd := _symb$port_vlan_mapping$set_bd_properties$arg$bd;
    meta.ingress_metadata.outer_bd := _symb$port_vlan_mapping$set_bd_properties$arg$bd;
    meta.acl_metadata.bd_label := _symb$port_vlan_mapping$set_bd_properties$arg$bd_label;
    meta.l2_metadata.stp_group := _symb$port_vlan_mapping$set_bd_properties$arg$stp_group;
    meta.l2_metadata.bd_stats_idx := _symb$port_vlan_mapping$set_bd_properties$arg$stats_idx;
    meta.l2_metadata.learning_enabled := _symb$port_vlan_mapping$set_bd_properties$arg$learning_enabled;
    meta.l3_metadata.vrf := _symb$port_vlan_mapping$set_bd_properties$arg$vrf;
    meta.ipv4_metadata.ipv4_unicast_enabled := _symb$port_vlan_mapping$set_bd_properties$arg$ipv4_unicast_enabled;
    meta.ipv6_metadata.ipv6_unicast_enabled := _symb$port_vlan_mapping$set_bd_properties$arg$ipv6_unicast_enabled;
    meta.ipv4_metadata.ipv4_urpf_mode := _symb$port_vlan_mapping$set_bd_properties$arg$ipv4_urpf_mode;
    meta.ipv6_metadata.ipv6_urpf_mode := _symb$port_vlan_mapping$set_bd_properties$arg$ipv6_urpf_mode;
    meta.l3_metadata.rmac_group := _symb$port_vlan_mapping$set_bd_properties$arg$rmac_group;
    meta.multicast_metadata.igmp_snooping_enabled := _symb$port_vlan_mapping$set_bd_properties$arg$igmp_snooping_enabled;
    meta.multicast_metadata.mld_snooping_enabled := _symb$port_vlan_mapping$set_bd_properties$arg$mld_snooping_enabled;
    meta.multicast_metadata.ipv4_multicast_enabled := _symb$port_vlan_mapping$set_bd_properties$arg$ipv4_multicast_enabled;
    meta.multicast_metadata.ipv6_multicast_enabled := _symb$port_vlan_mapping$set_bd_properties$arg$ipv6_multicast_enabled;
    meta.multicast_metadata.bd_mrpf_group := _symb$port_vlan_mapping$set_bd_properties$arg$mrpf_group;
    meta.multicast_metadata.ipv4_mcast_key_type := _symb$port_vlan_mapping$set_bd_properties$arg$ipv4_mcast_key_type;
    meta.multicast_metadata.ipv4_mcast_key := _symb$port_vlan_mapping$set_bd_properties$arg$ipv4_mcast_key;
    meta.multicast_metadata.ipv6_mcast_key_type := _symb$port_vlan_mapping$set_bd_properties$arg$ipv6_mcast_key_type;
    meta.multicast_metadata.ipv6_mcast_key := _symb$port_vlan_mapping$set_bd_properties$arg$ipv6_mcast_key
  } [] {
    assume (= _symb$port_vlan_mapping$action (_ bv0 1));
    _return$port_vlan_mapping.action_run := (_ bv1 1);
    meta.l2_metadata.port_vlan_mapping_miss := (_ bv1 1)
  };
  {
    assume (and
  (= meta.ingress_metadata.port_type (_ bv0 2))
  (not
    (= meta.l2_metadata.stp_group (_ bv0 10))));
    assume (= _symb$spanning_tree$match_0 meta.ingress_metadata.ifindex);
    assume (= _symb$spanning_tree$match_1 meta.l2_metadata.stp_group);
    assume (= _symb$spanning_tree$action (_ bv0 1));
    _return$spanning_tree.action_run := (_ bv0 1);
    meta.l2_metadata.stp_state := _symb$spanning_tree$set_stp_state$arg$stp_state
  } [] {
    assume (not
  (and
    (= meta.ingress_metadata.port_type (_ bv0 2))
    (not
      (= meta.l2_metadata.stp_group (_ bv0 10)))))
  };
  {
    assume (and
  (= meta.ingress_metadata.port_type (_ bv0 2))
  (= meta.security_metadata.ipsg_enabled (_ bv1 1)));
    assume (= _symb$ipsg$match_0 meta.ingress_metadata.ifindex);
    assume (= _symb$ipsg$match_1 meta.ingress_metadata.bd);
    assume (= _symb$ipsg$match_2 meta.l2_metadata.lkp_mac_sa);
    assume (= _symb$ipsg$match_3 meta.ipv4_metadata.lkp_ipv4_sa);
    assume (= _symb$ipsg$action (_ bv0 1));
    _return$ipsg.action_run := (_ bv0 1);
    t$14.hit := _return$ipsg.hit;
    t$14.miss := _return$ipsg.miss;
    t$14.action_run := _return$ipsg.action_run;
    {
      assume (= t$14.action_run (_ bv0 0));
      {
        assume (= _symb$ipsg_permit_special$match_0$DONTCARE (_ bv1 1))
      } [] {
        assume (not
  (= _symb$ipsg_permit_special$match_0$DONTCARE (_ bv1 1)));
        assume (= _symb$ipsg_permit_special$match_0 meta.l3_metadata.lkp_ip_proto)
      };
      {
        assume (= _symb$ipsg_permit_special$match_1$DONTCARE (_ bv1 1))
      } [] {
        assume (not
  (= _symb$ipsg_permit_special$match_1$DONTCARE (_ bv1 1)));
        assume (= _symb$ipsg_permit_special$match_1 meta.l3_metadata.lkp_l4_dport)
      };
      {
        assume (= _symb$ipsg_permit_special$match_2$DONTCARE (_ bv1 1))
      } [] {
        assume (not
  (= _symb$ipsg_permit_special$match_2$DONTCARE (_ bv1 1)));
        assume (= _symb$ipsg_permit_special$match_2 meta.ipv4_metadata.lkp_ipv4_da)
      };
      assume (= _symb$ipsg_permit_special$action (_ bv0 1));
      _return$ipsg_permit_special.action_run := (_ bv0 1);
      meta.security_metadata.ipsg_check_fail := (_ bv1 1)
    } [] {
      assume (not
  (= t$14.action_run (_ bv0 0)))
    }
  } [] {
    assume (not
  (and
    (= meta.ingress_metadata.port_type (_ bv0 2))
    (= meta.security_metadata.ipsg_enabled (_ bv1 1))))
  };
  {
    assume (= _symb$ipv4_racl$match_0$DONTCARE (_ bv1 1))
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_0$DONTCARE (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_0 meta.acl_metadata.bd_label)
  };
  {
    assume (= _symb$ipv4_racl$match_1$DONTCARE (_ bv1 1))
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_1$DONTCARE (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_1 meta.ipv4_metadata.lkp_ipv4_sa)
  };
  {
    assume (= _symb$ipv4_racl$match_2$DONTCARE (_ bv1 1))
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_2$DONTCARE (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_2 meta.ipv4_metadata.lkp_ipv4_da)
  };
  {
    assume (= _symb$ipv4_racl$match_3$DONTCARE (_ bv1 1))
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_3$DONTCARE (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_3 meta.l3_metadata.lkp_ip_proto)
  };
  {
    assume (= _symb$ipv4_racl$match_4$DONTCARE (_ bv1 1))
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_4$DONTCARE (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_4 meta.l3_metadata.lkp_l4_sport)
  };
  {
    assume (= _symb$ipv4_racl$match_5$DONTCARE (_ bv1 1))
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_5$DONTCARE (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_5 meta.l3_metadata.lkp_l4_dport)
  };
  {
    assume (= _symb$ipv4_racl$action (_ bv4 3));
    _return$ipv4_racl.action_run := (_ bv0 3)
  } [] {
    {
      assume (= _symb$ipv4_racl$action (_ bv3 3));
      _return$ipv4_racl.action_run := (_ bv1 3);
      meta.acl_metadata.racl_deny := (_ bv1 1);
      meta.acl_metadata.acl_stats_index := _symb$ipv4_racl$racl_deny$arg$acl_stats_index;
      meta.acl_metadata.acl_copy := _symb$ipv4_racl$racl_deny$arg$acl_copy;
      meta.fabric_metadata.reason_code := _symb$ipv4_racl$racl_deny$arg$acl_copy_reason
    } [] {
      {
        assume (= _symb$ipv4_racl$action (_ bv2 3));
        _return$ipv4_racl.action_run := (_ bv2 3);
        meta.acl_metadata.acl_stats_index := _symb$ipv4_racl$racl_permit$arg$acl_stats_index;
        meta.acl_metadata.acl_copy := _symb$ipv4_racl$racl_permit$arg$acl_copy;
        meta.fabric_metadata.reason_code := _symb$ipv4_racl$racl_permit$arg$acl_copy_reason
      } [] {
        {
          assume (= _symb$ipv4_racl$action (_ bv1 3));
          _return$ipv4_racl.action_run := (_ bv3 3);
          meta.acl_metadata.racl_redirect := (_ bv1 1);
          meta.acl_metadata.racl_nexthop := _symb$ipv4_racl$racl_redirect_nexthop$arg$nexthop_index;
          meta.acl_metadata.racl_nexthop_type := (_ bv0 1);
          meta.acl_metadata.acl_stats_index := _symb$ipv4_racl$racl_redirect_nexthop$arg$acl_stats_index;
          meta.acl_metadata.acl_copy := _symb$ipv4_racl$racl_redirect_nexthop$arg$acl_copy;
          meta.fabric_metadata.reason_code := _symb$ipv4_racl$racl_redirect_nexthop$arg$acl_copy_reason
        } [] {
          assume (= _symb$ipv4_racl$action (_ bv0 3));
          _return$ipv4_racl.action_run := (_ bv4 3);
          meta.acl_metadata.racl_redirect := (_ bv1 1);
          meta.acl_metadata.racl_nexthop := _symb$ipv4_racl$racl_redirect_ecmp$arg$ecmp_index;
          meta.acl_metadata.racl_nexthop_type := (_ bv1 1);
          meta.acl_metadata.acl_stats_index := _symb$ipv4_racl$racl_redirect_ecmp$arg$acl_stats_index;
          meta.acl_metadata.acl_copy := _symb$ipv4_racl$racl_redirect_ecmp$arg$acl_copy;
          meta.fabric_metadata.reason_code := _symb$ipv4_racl$racl_redirect_ecmp$arg$acl_copy_reason
        }
      }
    }
  };
  {
    assume (not
  (= meta.ipv4_metadata.ipv4_urpf_mode (_ bv0 2)));
    assume (= _symb$ipv4_urpf$match_0 meta.l3_metadata.vrf);
    assume (= _symb$ipv4_urpf$match_1 meta.ipv4_metadata.lkp_ipv4_sa);
    {
      assume (= _symb$ipv4_urpf$action (_ bv1 1));
      _return$ipv4_urpf.action_run := (_ bv0 1)
    } [] {
      assume (= _symb$ipv4_urpf$action (_ bv0 1));
      _return$ipv4_urpf.action_run := (_ bv1 1);
      meta.l3_metadata.urpf_hit := (_ bv1 1);
      meta.l3_metadata.urpf_bd_group := _symb$ipv4_urpf$ipv4_urpf_hit$arg$urpf_bd_group;
      meta.l3_metadata.urpf_mode := meta.ipv4_metadata.ipv4_urpf_mode
    };
    t$15.hit := _return$ipv4_urpf.hit;
    t$15.miss := _return$ipv4_urpf.miss;
    t$15.action_run := _return$ipv4_urpf.action_run;
    {
      assume (= t$15.action_run (_ bv0 1));
      assume (= _symb$ipv4_urpf_lpm$match_0 meta.l3_metadata.vrf);
      {
        assume (= _symb$ipv4_urpf_lpm$match_1$DONTCARE (_ bv1 1))
      } [] {
        assume (not
  (= _symb$ipv4_urpf_lpm$match_1$DONTCARE (_ bv1 1)));
        assume (= _symb$ipv4_urpf_lpm$match_1 meta.ipv4_metadata.lkp_ipv4_sa)
      };
      {
        assume (= _symb$ipv4_urpf_lpm$action (_ bv1 1));
        _return$ipv4_urpf_lpm.action_run := (_ bv0 1);
        meta.l3_metadata.urpf_hit := (_ bv1 1);
        meta.l3_metadata.urpf_bd_group := _symb$ipv4_urpf_lpm$ipv4_urpf_hit$arg$urpf_bd_group;
        meta.l3_metadata.urpf_mode := meta.ipv4_metadata.ipv4_urpf_mode
      } [] {
        assume (= _symb$ipv4_urpf_lpm$action (_ bv0 1));
        _return$ipv4_urpf_lpm.action_run := (_ bv1 1);
        meta.l3_metadata.urpf_check_fail := (_ bv1 1)
      }
    } [] {
      assume (not
  (= t$15.action_run (_ bv0 1)))
    }
  } [] {
    assume (= meta.ipv4_metadata.ipv4_urpf_mode (_ bv0 2))
  };
  assume (= _symb$ipv4_fib$match_0 meta.l3_metadata.vrf);
  assume (= _symb$ipv4_fib$match_1 meta.ipv4_metadata.lkp_ipv4_da);
  {
    assume (= _symb$ipv4_fib$action (_ bv2 2));
    _return$ipv4_fib.action_run := (_ bv0 2)
  } [] {
    {
      assume (= _symb$ipv4_fib$action (_ bv1 2));
      _return$ipv4_fib.action_run := (_ bv1 2);
      meta.l3_metadata.fib_hit := (_ bv1 1);
      meta.l3_metadata.fib_nexthop := _symb$ipv4_fib$fib_hit_nexthop$arg$nexthop_index;
      meta.l3_metadata.fib_nexthop_type := (_ bv0 1)
    } [] {
      assume (= _symb$ipv4_fib$action (_ bv0 2));
      _return$ipv4_fib.action_run := (_ bv2 2);
      meta.l3_metadata.fib_hit := (_ bv1 1);
      meta.l3_metadata.fib_nexthop := _symb$ipv4_fib$fib_hit_ecmp$arg$ecmp_index;
      meta.l3_metadata.fib_nexthop_type := (_ bv1 1)
    }
  };
  t$16.hit := _return$ipv4_fib.hit;
  t$16.miss := _return$ipv4_fib.miss;
  t$16.action_run := _return$ipv4_fib.action_run;
  {
    assume (= t$16.action_run (_ bv0 2));
    assume (= _symb$ipv4_fib_lpm$match_0 meta.l3_metadata.vrf);
    {
      assume (= _symb$ipv4_fib_lpm$match_1$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$ipv4_fib_lpm$match_1$DONTCARE (_ bv1 1)));
      assume (= _symb$ipv4_fib_lpm$match_1 meta.ipv4_metadata.lkp_ipv4_da)
    };
    {
      assume (= _symb$ipv4_fib_lpm$action (_ bv2 2));
      _return$ipv4_fib_lpm.action_run := (_ bv0 2)
    } [] {
      {
        assume (= _symb$ipv4_fib_lpm$action (_ bv1 2));
        _return$ipv4_fib_lpm.action_run := (_ bv1 2);
        meta.l3_metadata.fib_hit := (_ bv1 1);
        meta.l3_metadata.fib_nexthop := _symb$ipv4_fib_lpm$fib_hit_nexthop$arg$nexthop_index;
        meta.l3_metadata.fib_nexthop_type := (_ bv0 1)
      } [] {
        assume (= _symb$ipv4_fib_lpm$action (_ bv0 2));
        _return$ipv4_fib_lpm.action_run := (_ bv2 2);
        meta.l3_metadata.fib_hit := (_ bv1 1);
        meta.l3_metadata.fib_nexthop := _symb$ipv4_fib_lpm$fib_hit_ecmp$arg$ecmp_index;
        meta.l3_metadata.fib_nexthop_type := (_ bv1 1)
      }
    }
  } [] {
    assume (not
  (= t$16.action_run (_ bv0 2)))
  };
  {
    assume (not
  (= meta.ingress_metadata.bypass_lookups (_ bv65535 16)));
    {
      assume (= _symb$fwd_result$match_0$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_0$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_0 meta.l2_metadata.l2_redirect)
    };
    {
      assume (= _symb$fwd_result$match_1$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_1$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_1 meta.acl_metadata.acl_redirect)
    };
    {
      assume (= _symb$fwd_result$match_2$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_2$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_2 meta.acl_metadata.racl_redirect)
    };
    {
      assume (= _symb$fwd_result$match_3$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_3$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_3 meta.l3_metadata.rmac_hit)
    };
    {
      assume (= _symb$fwd_result$match_4$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_4$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_4 meta.l3_metadata.fib_hit)
    };
    {
      assume (= _symb$fwd_result$match_5$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_5$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_5 meta.l2_metadata.lkp_pkt_type)
    };
    {
      assume (= _symb$fwd_result$match_6$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_6$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_6 meta.l3_metadata.lkp_ip_type)
    };
    {
      assume (= _symb$fwd_result$match_7$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_7$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_7 meta.multicast_metadata.igmp_snooping_enabled)
    };
    {
      assume (= _symb$fwd_result$match_8$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_8$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_8 meta.multicast_metadata.mld_snooping_enabled)
    };
    {
      assume (= _symb$fwd_result$match_9$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_9$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_9 meta.multicast_metadata.mcast_route_hit)
    };
    {
      assume (= _symb$fwd_result$match_10$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_10$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_10 meta.multicast_metadata.mcast_bridge_hit)
    };
    {
      assume (= _symb$fwd_result$match_11$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_11$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_11 meta.multicast_metadata.mcast_rpf_group)
    };
    {
      assume (= _symb$fwd_result$match_12$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_12$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_12 meta.multicast_metadata.mcast_mode)
    };
    {
      assume (= _symb$fwd_result$action (_ bv5 3));
      _return$fwd_result.action_run := (_ bv0 3)
    } [] {
      {
        assume (= _symb$fwd_result$action (_ bv4 3));
        _return$fwd_result.action_run := (_ bv1 3);
        meta.l3_metadata.nexthop_index := meta.l2_metadata.l2_nexthop;
        meta.nexthop_metadata.nexthop_type := meta.l2_metadata.l2_nexthop_type;
        meta.ingress_metadata.egress_ifindex := (_ bv0 16);
        standard_metadata.mcast_grp := (_ bv0 16)
      } [] {
        {
          assume (= _symb$fwd_result$action (_ bv3 3));
          _return$fwd_result.action_run := (_ bv2 3);
          meta.l3_metadata.nexthop_index := meta.l3_metadata.fib_nexthop;
          meta.nexthop_metadata.nexthop_type := meta.l3_metadata.fib_nexthop_type;
          meta.l3_metadata.routed := (_ bv1 1);
          standard_metadata.mcast_grp := (_ bv0 16);
          meta.fabric_metadata.reason_code := (_ bv535 16)
        } [] {
          {
            assume (= _symb$fwd_result$action (_ bv2 3));
            _return$fwd_result.action_run := (_ bv3 3);
            meta.l3_metadata.routed := (_ bv0 1);
            standard_metadata.mcast_grp := (_ bv0 16);
            standard_metadata.egress_spec := (_ bv64 9);
            meta.ingress_metadata.egress_ifindex := (_ bv0 16)
          } [] {
            {
              assume (= _symb$fwd_result$action (_ bv1 3));
              _return$fwd_result.action_run := (_ bv4 3);
              meta.l3_metadata.nexthop_index := meta.acl_metadata.acl_nexthop;
              meta.nexthop_metadata.nexthop_type := meta.acl_metadata.acl_nexthop_type;
              meta.ingress_metadata.egress_ifindex := (_ bv0 16);
              standard_metadata.mcast_grp := (_ bv0 16)
            } [] {
              assume (= _symb$fwd_result$action (_ bv0 3));
              _return$fwd_result.action_run := (_ bv5 3);
              meta.l3_metadata.nexthop_index := meta.acl_metadata.racl_nexthop;
              meta.nexthop_metadata.nexthop_type := meta.acl_metadata.racl_nexthop_type;
              meta.l3_metadata.routed := (_ bv1 1);
              meta.ingress_metadata.egress_ifindex := (_ bv0 16);
              standard_metadata.mcast_grp := (_ bv0 16)
            }
          }
        }
      }
    }
  } [] {
    assume (= meta.ingress_metadata.bypass_lookups (_ bv65535 16))
  };
  {
    assume (= meta.nexthop_metadata.nexthop_type (_ bv1 1));
    assume (= _symb$ecmp_group$match_0 meta.l3_metadata.nexthop_index);
    assume (= _symb$ecmp_group$match_1 meta.hash_metadata.hash1);
    {
      assume (= _symb$ecmp_group$action (_ bv2 2));
      _return$ecmp_group.action_run := (_ bv0 2)
    } [] {
      {
        assume (= _symb$ecmp_group$action (_ bv1 2));
        _return$ecmp_group.action_run := (_ bv1 2);
        meta.ingress_metadata.egress_ifindex := _symb$ecmp_group$set_ecmp_nexthop_details$arg$ifindex;
        meta.l3_metadata.nexthop_index := _symb$ecmp_group$set_ecmp_nexthop_details$arg$nhop_index;
        meta.l3_metadata.same_bd_check := (bvxor meta.ingress_metadata.bd bd);
        meta.l2_metadata.same_if_check := (bvxor meta.l2_metadata.same_if_check ifindex);
        meta.tunnel_metadata.tunnel_if_check := (bvxor meta.tunnel_metadata.tunnel_terminate tunnel)
      } [] {
        assume (= _symb$ecmp_group$action (_ bv0 2));
        _return$ecmp_group.action_run := (_ bv2 2);
        standard_metadata.mcast_grp := _symb$ecmp_group$set_ecmp_nexthop_details_for_post_routed_flood$arg$uuc_mc_index;
        meta.l3_metadata.nexthop_index := _symb$ecmp_group$set_ecmp_nexthop_details_for_post_routed_flood$arg$nhop_index;
        meta.ingress_metadata.egress_ifindex := (_ bv0 16);
        meta.l3_metadata.same_bd_check := (bvxor meta.ingress_metadata.bd bd)
      }
    }
  } [] {
    assume (not
  (= meta.nexthop_metadata.nexthop_type (_ bv1 1)));
    assume (= _symb$nexthop$match_0 meta.l3_metadata.nexthop_index);
    {
      assume (= _symb$nexthop$action (_ bv2 2));
      _return$nexthop.action_run := (_ bv0 2)
    } [] {
      {
        assume (= _symb$nexthop$action (_ bv1 2));
        _return$nexthop.action_run := (_ bv1 2);
        meta.ingress_metadata.egress_ifindex := _symb$nexthop$set_nexthop_details$arg$ifindex;
        meta.l3_metadata.same_bd_check := (bvxor meta.ingress_metadata.bd bd);
        meta.l2_metadata.same_if_check := (bvxor meta.l2_metadata.same_if_check ifindex);
        meta.tunnel_metadata.tunnel_if_check := (bvxor meta.tunnel_metadata.tunnel_terminate tunnel)
      } [] {
        assume (= _symb$nexthop$action (_ bv0 2));
        _return$nexthop.action_run := (_ bv2 2);
        standard_metadata.mcast_grp := _symb$nexthop$set_nexthop_details_for_post_routed_flood$arg$uuc_mc_index;
        meta.ingress_metadata.egress_ifindex := (_ bv0 16);
        meta.l3_metadata.same_bd_check := (bvxor meta.ingress_metadata.bd bd)
      }
    }
  };
  {
    assume (= meta.egress_metadata.bypass (_ bv0 1));
    {
      assume (and
  (not
    (= standard_metadata.instance_type (_ bv0 32)))
  (not
    (= standard_metadata.instance_type (_ bv5 32))));
      assume (= _symb$mirror$match_0 meta.i2e_metadata.mirror_session_id);
      {
        assume (= _symb$mirror$action (_ bv2 2));
        _return$mirror.action_run := (_ bv0 2)
      } [] {
        {
          assume (= _symb$mirror$action (_ bv1 2));
          _return$mirror.action_run := (_ bv1 2);
          meta.l3_metadata.nexthop_index := _symb$mirror$set_mirror_nhop$arg$nhop_idx
        } [] {
          assume (= _symb$mirror$action (_ bv0 2));
          _return$mirror.action_run := (_ bv2 2);
          meta.egress_metadata.bd := _symb$mirror$set_mirror_bd$arg$bd
        }
      }
    } [] {
      assume (not
  (and
    (not
      (= standard_metadata.instance_type (_ bv0 32)))
    (not
      (= standard_metadata.instance_type (_ bv5 32)))))
    };
    assume (= _symb$egress_port_mapping$match_0 standard_metadata.egress_port);
    {
      assume (= _symb$egress_port_mapping$action (_ bv2 2));
      _return$egress_port_mapping.action_run := (_ bv0 2);
      meta.egress_metadata.port_type := (_ bv0 2);
      meta.egress_metadata.ifindex := _symb$egress_port_mapping$egress_port_type_normal$arg$ifindex
    } [] {
      {
        assume (= _symb$egress_port_mapping$action (_ bv1 2));
        _return$egress_port_mapping.action_run := (_ bv1 2);
        meta.egress_metadata.port_type := (_ bv1 2);
        meta.egress_metadata.ifindex := _symb$egress_port_mapping$egress_port_type_fabric$arg$ifindex;
        meta.tunnel_metadata.egress_tunnel_type := (_ bv15 5);
        meta.egress_metadata.ifindex := _symb$egress_port_mapping$egress_port_type_fabric$arg$ifindex
      } [] {
        assume (= _symb$egress_port_mapping$action (_ bv0 2));
        _return$egress_port_mapping.action_run := (_ bv2 2);
        meta.egress_metadata.port_type := (_ bv2 2);
        meta.egress_metadata.ifindex := _symb$egress_port_mapping$egress_port_type_cpu$arg$ifindex;
        meta.tunnel_metadata.egress_tunnel_type := (_ bv16 5);
        meta.egress_metadata.ifindex := _symb$egress_port_mapping$egress_port_type_cpu$arg$ifindex
      }
    };
    t$7.hit := _return$egress_port_mapping.hit;
    t$7.miss := _return$egress_port_mapping.miss;
    t$7.action_run := _return$egress_port_mapping.action_run;
    {
      assume (= t$7.action_run (_ bv0 2));
      {
        assume (or
  (= standard_metadata.instance_type (_ bv0 32))
  (= standard_metadata.instance_type (_ bv5 32)));
        assume (= _symb$vlan_decap$match_0 t$2);
        assume (= _symb$vlan_decap$match_1 t$3);
        {
          assume (= _symb$vlan_decap$action (_ bv2 2));
          _return$vlan_decap.action_run := (_ bv0 2)
        } [] {
          {
            assume (= _symb$vlan_decap$action (_ bv1 2));
            _return$vlan_decap.action_run := (_ bv1 2);
            hdr.ethernet.etherType := hdr.vlan_tag_$_0_$.etherType;
            hdr.vlan_tag_$_0_$.is_valid := (_ bv0 1)
          } [] {
            assume (= _symb$vlan_decap$action (_ bv0 2));
            _return$vlan_decap.action_run := (_ bv2 2);
            hdr.ethernet.etherType := hdr.vlan_tag_$_1_$.etherType;
            hdr.vlan_tag_$_0_$.is_valid := (_ bv0 1);
            hdr.vlan_tag_$_1_$.is_valid := (_ bv0 1)
          }
        }
      } [] {
        assume (not
  (or
    (= standard_metadata.instance_type (_ bv0 32))
    (= standard_metadata.instance_type (_ bv5 32))))
      };
      {
        assume (or
  (not
    (= meta.l3_metadata.nexthop_index (_ bv0 16)))
  (= meta.egress_metadata.routed (_ bv0 1)));
        assume (= _symb$rewrite$match_0 meta.l3_metadata.nexthop_index);
        {
          assume (= _symb$rewrite$action (_ bv4 3));
          _return$rewrite.action_run := (_ bv0 3)
        } [] {
          {
            assume (= _symb$rewrite$action (_ bv3 3));
            _return$rewrite.action_run := (_ bv1 3);
            meta.egress_metadata.routed := (_ bv0 1);
            meta.egress_metadata.bd := meta.ingress_metadata.bd;
            meta.egress_metadata.outer_bd := meta.ingress_metadata.bd
          } [] {
            {
              assume (= _symb$rewrite$action (_ bv2 3));
              _return$rewrite.action_run := (_ bv2 3);
              meta.egress_metadata.routed := (_ bv0 1);
              meta.egress_metadata.bd := meta.ingress_metadata.bd;
              meta.egress_metadata.outer_bd := meta.ingress_metadata.bd;
              meta.tunnel_metadata.tunnel_index := _symb$rewrite$set_l2_rewrite_with_tunnel$arg$tunnel_index;
              meta.tunnel_metadata.egress_tunnel_type := _symb$rewrite$set_l2_rewrite_with_tunnel$arg$tunnel_type
            } [] {
              {
                assume (= _symb$rewrite$action (_ bv1 3));
                _return$rewrite.action_run := (_ bv3 3);
                meta.egress_metadata.routed := (_ bv1 1);
                meta.egress_metadata.mac_da := _symb$rewrite$set_l3_rewrite$arg$dmac;
                meta.egress_metadata.bd := _symb$rewrite$set_l3_rewrite$arg$bd;
                meta.egress_metadata.outer_bd := _symb$rewrite$set_l3_rewrite$arg$bd;
                meta.l3_metadata.mtu_index := _symb$rewrite$set_l3_rewrite$arg$mtu_index
              } [] {
                assume (= _symb$rewrite$action (_ bv0 3));
                _return$rewrite.action_run := (_ bv4 3);
                meta.egress_metadata.routed := (_ bv1 1);
                meta.egress_metadata.mac_da := _symb$rewrite$set_l3_rewrite_with_tunnel$arg$dmac;
                meta.egress_metadata.bd := _symb$rewrite$set_l3_rewrite_with_tunnel$arg$bd;
                meta.egress_metadata.outer_bd := _symb$rewrite$set_l3_rewrite_with_tunnel$arg$bd;
                meta.tunnel_metadata.tunnel_index := _symb$rewrite$set_l3_rewrite_with_tunnel$arg$tunnel_index;
                meta.tunnel_metadata.egress_tunnel_type := _symb$rewrite$set_l3_rewrite_with_tunnel$arg$tunnel_type
              }
            }
          }
        }
      } [] {
        assume (not
  (or
    (not
      (= meta.l3_metadata.nexthop_index (_ bv0 16)))
    (= meta.egress_metadata.routed (_ bv0 1))))
      };
      assume (= _symb$egress_bd_map$match_0 meta.egress_metadata.bd);
      {
        assume (= _symb$egress_bd_map$action (_ bv1 1));
        _return$egress_bd_map.action_run := (_ bv0 1)
      } [] {
        assume (= _symb$egress_bd_map$action (_ bv0 1));
        _return$egress_bd_map.action_run := (_ bv1 1);
        meta.egress_metadata.smac_idx := _symb$egress_bd_map$set_egress_bd_properties$arg$smac_idx
      };
      {
        assume (= meta.egress_metadata.routed (_ bv1 1));
        assume (= _symb$l3_rewrite$match_0 t$4);
        {
          assume (= _symb$l3_rewrite$match_1$DONTCARE (_ bv1 1))
        } [] {
          assume (not
  (= _symb$l3_rewrite$match_1$DONTCARE (_ bv1 1)));
          assume (= _symb$l3_rewrite$match_1 ((_ extract 31 28) hdr.ipv4.dstAddr))
        };
        {
          assume (= _symb$l3_rewrite$action (_ bv1 1));
          _return$l3_rewrite.action_run := (_ bv0 1)
        } [] {
          assume (= _symb$l3_rewrite$action (_ bv0 1));
          _return$l3_rewrite.action_run := (_ bv1 1);
          hdr.ethernet.dstAddr := meta.egress_metadata.mac_da;
          hdr.ipv4.ttl := (bvsub hdr.ipv4.ttl (_ bv1 8))
        };
        assume (= _symb$smac_rewrite$match_0 meta.egress_metadata.smac_idx);
        assume (= _symb$smac_rewrite$action (_ bv0 1));
        _return$smac_rewrite.action_run := (_ bv0 1);
        hdr.ethernet.srcAddr := _symb$smac_rewrite$rewrite_smac$arg$smac
      } [] {
        assume (not
  (= meta.egress_metadata.routed (_ bv1 1)))
      };
      assume (= _symb$mtu$match_0 meta.l3_metadata.mtu_index);
      assume (= _symb$mtu$match_1 t$5);
      assume (= _symb$mtu$match_2 t$6);
      {
        assume (= _symb$mtu$action (_ bv2 2));
        _return$mtu.action_run := (_ bv0 2);
        meta.l3_metadata.l3_mtu_check := (_ bv65535 16)
      } [] {
        {
          assume (= _symb$mtu$action (_ bv1 2));
          _return$mtu.action_run := (_ bv1 2);
          meta.l3_metadata.l3_mtu_check := (bvsub l3_mtu hdr.ipv4.totalLen)
        } [] {
          assume (= _symb$mtu$action (_ bv0 2));
          _return$mtu.action_run := (_ bv2 2);
          meta.l3_metadata.l3_mtu_check := (bvsub l3_mtu hdr.ipv6.payloadLen)
        }
      }
    } [] {
      assume (not
  (= t$7.action_run (_ bv0 2)))
    };
    {
      assume (= meta.egress_metadata.port_type (_ bv0 2));
      assume (= _symb$egress_vlan_xlate$match_0 meta.egress_metadata.ifindex);
      assume (= _symb$egress_vlan_xlate$match_1 meta.egress_metadata.bd);
      {
        assume (= _symb$egress_vlan_xlate$action (_ bv2 2));
        _return$egress_vlan_xlate.action_run := (_ bv0 2)
      } [] {
        {
          assume (= _symb$egress_vlan_xlate$action (_ bv1 2));
          _return$egress_vlan_xlate.action_run := (_ bv1 2);
          hdr.vlan_tag_$_0_$.is_valid := (_ bv1 1);
          hdr.vlan_tag_$_0_$.etherType := hdr.ethernet.etherType;
          hdr.vlan_tag_$_0_$.vid := _symb$egress_vlan_xlate$set_egress_packet_vlan_tagged$arg$vlan_id;
          hdr.ethernet.etherType := (_ bv33024 16)
        } [] {
          assume (= _symb$egress_vlan_xlate$action (_ bv0 2));
          _return$egress_vlan_xlate.action_run := (_ bv2 2);
          hdr.vlan_tag_$_1_$.is_valid := (_ bv1 1);
          hdr.vlan_tag_$_0_$.is_valid := (_ bv1 1);
          hdr.vlan_tag_$_1_$.etherType := hdr.ethernet.etherType;
          hdr.vlan_tag_$_1_$.vid := _symb$egress_vlan_xlate$set_egress_packet_vlan_double_tagged$arg$c_tag;
          hdr.vlan_tag_$_0_$.etherType := (_ bv33024 16);
          hdr.vlan_tag_$_0_$.vid := _symb$egress_vlan_xlate$set_egress_packet_vlan_double_tagged$arg$s_tag;
          hdr.ethernet.etherType := (_ bv37120 16)
        }
      }
    } [] {
      assume (not
  (= meta.egress_metadata.port_type (_ bv0 2)))
    }
  } [] {
    assume (not
  (= meta.egress_metadata.bypass (_ bv0 1)))
  };
  {
    assume (= meta.egress_metadata.bypass (_ bv0 1));
    {
      assume (= _symb$egress_acl$match_0$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$egress_acl$match_0$DONTCARE (_ bv1 1)));
      assume (= _symb$egress_acl$match_0 standard_metadata.egress_port)
    };
    {
      assume (= _symb$egress_acl$match_1$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$egress_acl$match_1$DONTCARE (_ bv1 1)));
      assume (= _symb$egress_acl$match_1 meta.l3_metadata.l3_mtu_check)
    };
    {
      assume (= _symb$egress_acl$action (_ bv3 2));
      _return$egress_acl.action_run := (_ bv0 2)
    } [] {
      {
        assume (= _symb$egress_acl$action (_ bv2 2));
        _return$egress_acl.action_run := (_ bv1 2);
        meta.i2e_metadata.mirror_session_id := ((_ extract 15 0) _symb$egress_acl$egress_mirror$arg$session_id)
      } [] {
        {
          assume (= _symb$egress_acl$action (_ bv1 2));
          _return$egress_acl.action_run := (_ bv2 2);
          meta.i2e_metadata.mirror_session_id := ((_ extract 15 0) _symb$egress_acl$egress_mirror_drop$arg$session_id);
          standard_metadata.egress_spec := (_ bv511 9)
        } [] {
          assume (= _symb$egress_acl$action (_ bv0 2));
          _return$egress_acl.action_run := (_ bv3 2);
          meta.fabric_metadata.reason_code := _symb$egress_acl$egress_redirect_to_cpu$arg$reason_code;
          standard_metadata.egress_spec := (_ bv511 9)
        }
      }
    }
  } [] {
    assume (not
  (= meta.egress_metadata.bypass (_ bv0 1)))
  };
  assert (not
  (= standard_metadata.egress_spec (_ bv0 9)))
} [] {
  assume (not
  (= _state$accept$next (_ bv1 1)))
}

ConstProp'd:
_state$parse_ipv4$next := (_ bv0 1);
_state$accept$next := (_ bv0 1);
{
  assume (= hdr.ethernet.etherType (_ bv2048 16));
  _state$parse_ipv4$next := (_ bv1 1)
} [] {
  assume (not
  (= hdr.ethernet.etherType (_ bv2048 16)));
  _state$accept$next := (_ bv1 1)
};
{
  assume (= _state$parse_ipv4$next (_ bv1 1));
  _state$accept$next := (_ bv1 1)
} [] {
  assume (not
  (= _state$parse_ipv4$next (_ bv1 1)))
};
{
  assume (= _state$accept$next (_ bv1 1));
  assume (= _symb$ingress_port_mapping$match_0 standard_metadata.ingress_port);
  assume (= _symb$ingress_port_mapping$action (_ bv0 1));
  assume (= _symb$ingress_port_properties$match_0 standard_metadata.ingress_port);
  assume (= _symb$ingress_port_properties$action (_ bv0 1));
  assume (= _symb$switch_config_params$action (_ bv0 1));
  standard_metadata.egress_spec := (_ bv511 9);
  assume (= _symb$port_vlan_mapping$match_0 _symb$ingress_port_mapping$set_ifindex$arg$ifindex);
  assume (= _symb$port_vlan_mapping$match_1 t$12);
  assume (= _symb$port_vlan_mapping$match_2 hdr.vlan_tag_$_0_$.vid);
  assume (= _symb$port_vlan_mapping$match_3 t$13);
  assume (= _symb$port_vlan_mapping$match_4 hdr.vlan_tag_$_1_$.vid);
  {
    assume (= _symb$port_vlan_mapping$action (_ bv1 1));
    meta.ingress_metadata.bd := _symb$port_vlan_mapping$set_bd_properties$arg$bd;
    meta.acl_metadata.bd_label := _symb$port_vlan_mapping$set_bd_properties$arg$bd_label;
    meta.l2_metadata.stp_group := _symb$port_vlan_mapping$set_bd_properties$arg$stp_group;
    meta.l3_metadata.vrf := _symb$port_vlan_mapping$set_bd_properties$arg$vrf;
    meta.ipv4_metadata.ipv4_urpf_mode := _symb$port_vlan_mapping$set_bd_properties$arg$ipv4_urpf_mode;
    meta.multicast_metadata.igmp_snooping_enabled := _symb$port_vlan_mapping$set_bd_properties$arg$igmp_snooping_enabled;
    meta.multicast_metadata.mld_snooping_enabled := _symb$port_vlan_mapping$set_bd_properties$arg$mld_snooping_enabled
  } [] {
    assume (= _symb$port_vlan_mapping$action (_ bv0 1))
  };
  {
    assume (and
  (= _symb$ingress_port_mapping$set_ifindex$arg$port_type (_ bv0 2))
  (not
    (= meta.l2_metadata.stp_group (_ bv0 10))));
    assume (= _symb$spanning_tree$match_0 _symb$ingress_port_mapping$set_ifindex$arg$ifindex);
    assume (= _symb$spanning_tree$match_1 meta.l2_metadata.stp_group);
    assume (= _symb$spanning_tree$action (_ bv0 1))
  } [] {
    assume (not
  (and
    (= _symb$ingress_port_mapping$set_ifindex$arg$port_type (_ bv0 2))
    (not
      (= meta.l2_metadata.stp_group (_ bv0 10)))))
  };
  {
    assume (and
  (= _symb$ingress_port_mapping$set_ifindex$arg$port_type (_ bv0 2))
  (= meta.security_metadata.ipsg_enabled (_ bv1 1)));
    assume (= _symb$ipsg$match_0 _symb$ingress_port_mapping$set_ifindex$arg$ifindex);
    assume (= _symb$ipsg$match_1 meta.ingress_metadata.bd);
    assume (= _symb$ipsg$match_2 meta.l2_metadata.lkp_mac_sa);
    assume (= _symb$ipsg$match_3 meta.ipv4_metadata.lkp_ipv4_sa);
    assume (= _symb$ipsg$action (_ bv0 1));
    {
      assume (= _symb$ipsg_permit_special$match_0$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$ipsg_permit_special$match_0$DONTCARE (_ bv1 1)));
      assume (= _symb$ipsg_permit_special$match_0 meta.l3_metadata.lkp_ip_proto)
    };
    {
      assume (= _symb$ipsg_permit_special$match_1$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$ipsg_permit_special$match_1$DONTCARE (_ bv1 1)));
      assume (= _symb$ipsg_permit_special$match_1 meta.l3_metadata.lkp_l4_dport)
    };
    {
      assume (= _symb$ipsg_permit_special$match_2$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$ipsg_permit_special$match_2$DONTCARE (_ bv1 1)));
      assume (= _symb$ipsg_permit_special$match_2 meta.ipv4_metadata.lkp_ipv4_da)
    };
    assume (= _symb$ipsg_permit_special$action (_ bv0 1))
  } [] {
    assume (not
  (and
    (= _symb$ingress_port_mapping$set_ifindex$arg$port_type (_ bv0 2))
    (= meta.security_metadata.ipsg_enabled (_ bv1 1))))
  };
  {
    assume (= _symb$ipv4_racl$match_0$DONTCARE (_ bv1 1))
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_0$DONTCARE (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_0 meta.acl_metadata.bd_label)
  };
  {
    assume (= _symb$ipv4_racl$match_1$DONTCARE (_ bv1 1))
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_1$DONTCARE (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_1 meta.ipv4_metadata.lkp_ipv4_sa)
  };
  {
    assume (= _symb$ipv4_racl$match_2$DONTCARE (_ bv1 1))
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_2$DONTCARE (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_2 meta.ipv4_metadata.lkp_ipv4_da)
  };
  {
    assume (= _symb$ipv4_racl$match_3$DONTCARE (_ bv1 1))
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_3$DONTCARE (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_3 meta.l3_metadata.lkp_ip_proto)
  };
  {
    assume (= _symb$ipv4_racl$match_4$DONTCARE (_ bv1 1))
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_4$DONTCARE (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_4 meta.l3_metadata.lkp_l4_sport)
  };
  {
    assume (= _symb$ipv4_racl$match_5$DONTCARE (_ bv1 1))
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_5$DONTCARE (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_5 meta.l3_metadata.lkp_l4_dport)
  };
  {
    assume (= _symb$ipv4_racl$action (_ bv4 3))
  } [] {
    {
      assume (= _symb$ipv4_racl$action (_ bv3 3))
    } [] {
      {
        assume (= _symb$ipv4_racl$action (_ bv2 3))
      } [] {
        {
          assume (= _symb$ipv4_racl$action (_ bv1 3));
          meta.acl_metadata.racl_redirect := (_ bv1 1);
          meta.acl_metadata.racl_nexthop := _symb$ipv4_racl$racl_redirect_nexthop$arg$nexthop_index;
          meta.acl_metadata.racl_nexthop_type := (_ bv0 1)
        } [] {
          assume (= _symb$ipv4_racl$action (_ bv0 3));
          meta.acl_metadata.racl_redirect := (_ bv1 1);
          meta.acl_metadata.racl_nexthop := _symb$ipv4_racl$racl_redirect_ecmp$arg$ecmp_index;
          meta.acl_metadata.racl_nexthop_type := (_ bv1 1)
        }
      }
    }
  };
  {
    assume (not
  (= meta.ipv4_metadata.ipv4_urpf_mode (_ bv0 2)));
    assume (= _symb$ipv4_urpf$match_0 meta.l3_metadata.vrf);
    assume (= _symb$ipv4_urpf$match_1 meta.ipv4_metadata.lkp_ipv4_sa);
    {
      assume (= _symb$ipv4_urpf$action (_ bv1 1));
      _return$ipv4_urpf.action_run := (_ bv0 1)
    } [] {
      assume (= _symb$ipv4_urpf$action (_ bv0 1));
      _return$ipv4_urpf.action_run := (_ bv1 1)
    };
    {
      assume (= _return$ipv4_urpf.action_run (_ bv0 1));
      assume (= _symb$ipv4_urpf_lpm$match_0 meta.l3_metadata.vrf);
      {
        assume (= _symb$ipv4_urpf_lpm$match_1$DONTCARE (_ bv1 1))
      } [] {
        assume (not
  (= _symb$ipv4_urpf_lpm$match_1$DONTCARE (_ bv1 1)));
        assume (= _symb$ipv4_urpf_lpm$match_1 meta.ipv4_metadata.lkp_ipv4_sa)
      };
      {
        assume (= _symb$ipv4_urpf_lpm$action (_ bv1 1))
      } [] {
        assume (= _symb$ipv4_urpf_lpm$action (_ bv0 1))
      }
    } [] {
      assume (not
  (= _return$ipv4_urpf.action_run (_ bv0 1)))
    }
  } [] {
    assume (= meta.ipv4_metadata.ipv4_urpf_mode (_ bv0 2))
  };
  assume (= _symb$ipv4_fib$match_0 meta.l3_metadata.vrf);
  assume (= _symb$ipv4_fib$match_1 meta.ipv4_metadata.lkp_ipv4_da);
  {
    assume (= _symb$ipv4_fib$action (_ bv2 2));
    _return$ipv4_fib.action_run := (_ bv0 2)
  } [] {
    {
      assume (= _symb$ipv4_fib$action (_ bv1 2));
      _return$ipv4_fib.action_run := (_ bv1 2);
      meta.l3_metadata.fib_hit := (_ bv1 1);
      meta.l3_metadata.fib_nexthop := _symb$ipv4_fib$fib_hit_nexthop$arg$nexthop_index;
      meta.l3_metadata.fib_nexthop_type := (_ bv0 1)
    } [] {
      assume (= _symb$ipv4_fib$action (_ bv0 2));
      _return$ipv4_fib.action_run := (_ bv2 2);
      meta.l3_metadata.fib_hit := (_ bv1 1);
      meta.l3_metadata.fib_nexthop := _symb$ipv4_fib$fib_hit_ecmp$arg$ecmp_index;
      meta.l3_metadata.fib_nexthop_type := (_ bv1 1)
    }
  };
  {
    assume (= _return$ipv4_fib.action_run (_ bv0 2));
    assume (= _symb$ipv4_fib_lpm$match_0 meta.l3_metadata.vrf);
    {
      assume (= _symb$ipv4_fib_lpm$match_1$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$ipv4_fib_lpm$match_1$DONTCARE (_ bv1 1)));
      assume (= _symb$ipv4_fib_lpm$match_1 meta.ipv4_metadata.lkp_ipv4_da)
    };
    {
      assume (= _symb$ipv4_fib_lpm$action (_ bv2 2))
    } [] {
      {
        assume (= _symb$ipv4_fib_lpm$action (_ bv1 2));
        meta.l3_metadata.fib_hit := (_ bv1 1);
        meta.l3_metadata.fib_nexthop := _symb$ipv4_fib_lpm$fib_hit_nexthop$arg$nexthop_index;
        meta.l3_metadata.fib_nexthop_type := (_ bv0 1)
      } [] {
        assume (= _symb$ipv4_fib_lpm$action (_ bv0 2));
        meta.l3_metadata.fib_hit := (_ bv1 1);
        meta.l3_metadata.fib_nexthop := _symb$ipv4_fib_lpm$fib_hit_ecmp$arg$ecmp_index;
        meta.l3_metadata.fib_nexthop_type := (_ bv1 1)
      }
    }
  } [] {
    assume (not
  (= _return$ipv4_fib.action_run (_ bv0 2)))
  };
  {
    assume (not
  (= meta.ingress_metadata.bypass_lookups (_ bv65535 16)));
    {
      assume (= _symb$fwd_result$match_0$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_0$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_0 meta.l2_metadata.l2_redirect)
    };
    {
      assume (= _symb$fwd_result$match_1$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_1$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_1 meta.acl_metadata.acl_redirect)
    };
    {
      assume (= _symb$fwd_result$match_2$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_2$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_2 meta.acl_metadata.racl_redirect)
    };
    {
      assume (= _symb$fwd_result$match_3$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_3$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_3 meta.l3_metadata.rmac_hit)
    };
    {
      assume (= _symb$fwd_result$match_4$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_4$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_4 meta.l3_metadata.fib_hit)
    };
    {
      assume (= _symb$fwd_result$match_5$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_5$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_5 meta.l2_metadata.lkp_pkt_type)
    };
    {
      assume (= _symb$fwd_result$match_6$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_6$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_6 meta.l3_metadata.lkp_ip_type)
    };
    {
      assume (= _symb$fwd_result$match_7$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_7$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_7 meta.multicast_metadata.igmp_snooping_enabled)
    };
    {
      assume (= _symb$fwd_result$match_8$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_8$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_8 meta.multicast_metadata.mld_snooping_enabled)
    };
    {
      assume (= _symb$fwd_result$match_9$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_9$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_9 meta.multicast_metadata.mcast_route_hit)
    };
    {
      assume (= _symb$fwd_result$match_10$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_10$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_10 meta.multicast_metadata.mcast_bridge_hit)
    };
    {
      assume (= _symb$fwd_result$match_11$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_11$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_11 meta.multicast_metadata.mcast_rpf_group)
    };
    {
      assume (= _symb$fwd_result$match_12$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$fwd_result$match_12$DONTCARE (_ bv1 1)));
      assume (= _symb$fwd_result$match_12 meta.multicast_metadata.mcast_mode)
    };
    {
      assume (= _symb$fwd_result$action (_ bv5 3))
    } [] {
      {
        assume (= _symb$fwd_result$action (_ bv4 3));
        meta.l3_metadata.nexthop_index := meta.l2_metadata.l2_nexthop;
        meta.nexthop_metadata.nexthop_type := meta.l2_metadata.l2_nexthop_type
      } [] {
        {
          assume (= _symb$fwd_result$action (_ bv3 3));
          meta.l3_metadata.nexthop_index := meta.l3_metadata.fib_nexthop;
          meta.nexthop_metadata.nexthop_type := meta.l3_metadata.fib_nexthop_type
        } [] {
          {
            assume (= _symb$fwd_result$action (_ bv2 3));
            standard_metadata.egress_spec := (_ bv64 9)
          } [] {
            {
              assume (= _symb$fwd_result$action (_ bv1 3));
              meta.l3_metadata.nexthop_index := meta.acl_metadata.acl_nexthop;
              meta.nexthop_metadata.nexthop_type := meta.acl_metadata.acl_nexthop_type
            } [] {
              assume (= _symb$fwd_result$action (_ bv0 3));
              meta.l3_metadata.nexthop_index := meta.acl_metadata.racl_nexthop;
              meta.nexthop_metadata.nexthop_type := meta.acl_metadata.racl_nexthop_type
            }
          }
        }
      }
    }
  } [] {
    assume (= meta.ingress_metadata.bypass_lookups (_ bv65535 16))
  };
  {
    assume (= meta.nexthop_metadata.nexthop_type (_ bv1 1));
    assume (= _symb$ecmp_group$match_0 meta.l3_metadata.nexthop_index);
    assume (= _symb$ecmp_group$match_1 meta.hash_metadata.hash1);
    {
      assume (= _symb$ecmp_group$action (_ bv2 2))
    } [] {
      {
        assume (= _symb$ecmp_group$action (_ bv1 2));
        meta.l3_metadata.nexthop_index := _symb$ecmp_group$set_ecmp_nexthop_details$arg$nhop_index
      } [] {
        assume (= _symb$ecmp_group$action (_ bv0 2));
        meta.l3_metadata.nexthop_index := _symb$ecmp_group$set_ecmp_nexthop_details_for_post_routed_flood$arg$nhop_index
      }
    }
  } [] {
    assume (not
  (= meta.nexthop_metadata.nexthop_type (_ bv1 1)));
    assume (= _symb$nexthop$match_0 meta.l3_metadata.nexthop_index);
    {
      assume (= _symb$nexthop$action (_ bv2 2))
    } [] {
      {
        assume (= _symb$nexthop$action (_ bv1 2))
      } [] {
        assume (= _symb$nexthop$action (_ bv0 2))
      }
    }
  };
  {
    assume (= meta.egress_metadata.bypass (_ bv0 1));
    {
      assume (and
  (not
    (= standard_metadata.instance_type (_ bv0 32)))
  (not
    (= standard_metadata.instance_type (_ bv5 32))));
      assume (= _symb$mirror$match_0 meta.i2e_metadata.mirror_session_id);
      {
        assume (= _symb$mirror$action (_ bv2 2))
      } [] {
        {
          assume (= _symb$mirror$action (_ bv1 2));
          meta.l3_metadata.nexthop_index := _symb$mirror$set_mirror_nhop$arg$nhop_idx
        } [] {
          assume (= _symb$mirror$action (_ bv0 2));
          meta.egress_metadata.bd := _symb$mirror$set_mirror_bd$arg$bd
        }
      }
    } [] {
      assume (not
  (and
    (not
      (= standard_metadata.instance_type (_ bv0 32)))
    (not
      (= standard_metadata.instance_type (_ bv5 32)))))
    };
    assume (= _symb$egress_port_mapping$match_0 standard_metadata.egress_port);
    {
      assume (= _symb$egress_port_mapping$action (_ bv2 2));
      _return$egress_port_mapping.action_run := (_ bv0 2);
      meta.egress_metadata.port_type := (_ bv0 2);
      meta.egress_metadata.ifindex := _symb$egress_port_mapping$egress_port_type_normal$arg$ifindex
    } [] {
      {
        assume (= _symb$egress_port_mapping$action (_ bv1 2));
        _return$egress_port_mapping.action_run := (_ bv1 2);
        meta.egress_metadata.port_type := (_ bv1 2);
        meta.egress_metadata.ifindex := _symb$egress_port_mapping$egress_port_type_fabric$arg$ifindex
      } [] {
        assume (= _symb$egress_port_mapping$action (_ bv0 2));
        _return$egress_port_mapping.action_run := (_ bv2 2);
        meta.egress_metadata.port_type := (_ bv2 2);
        meta.egress_metadata.ifindex := _symb$egress_port_mapping$egress_port_type_cpu$arg$ifindex
      }
    };
    {
      assume (= _return$egress_port_mapping.action_run (_ bv0 2));
      {
        assume (or
  (= standard_metadata.instance_type (_ bv0 32))
  (= standard_metadata.instance_type (_ bv5 32)));
        assume (= _symb$vlan_decap$match_0 t$2);
        assume (= _symb$vlan_decap$match_1 t$3);
        {
          assume (= _symb$vlan_decap$action (_ bv2 2))
        } [] {
          {
            assume (= _symb$vlan_decap$action (_ bv1 2))
          } [] {
            assume (= _symb$vlan_decap$action (_ bv0 2))
          }
        }
      } [] {
        assume (not
  (or
    (= standard_metadata.instance_type (_ bv0 32))
    (= standard_metadata.instance_type (_ bv5 32))))
      };
      {
        assume (or
  (not
    (= meta.l3_metadata.nexthop_index (_ bv0 16)))
  (= meta.egress_metadata.routed (_ bv0 1)));
        assume (= _symb$rewrite$match_0 meta.l3_metadata.nexthop_index);
        {
          assume (= _symb$rewrite$action (_ bv4 3))
        } [] {
          {
            assume (= _symb$rewrite$action (_ bv3 3));
            meta.egress_metadata.routed := (_ bv0 1);
            meta.egress_metadata.bd := meta.ingress_metadata.bd
          } [] {
            {
              assume (= _symb$rewrite$action (_ bv2 3));
              meta.egress_metadata.routed := (_ bv0 1);
              meta.egress_metadata.bd := meta.ingress_metadata.bd
            } [] {
              {
                assume (= _symb$rewrite$action (_ bv1 3));
                meta.egress_metadata.routed := (_ bv1 1);
                meta.egress_metadata.bd := _symb$rewrite$set_l3_rewrite$arg$bd;
                meta.l3_metadata.mtu_index := _symb$rewrite$set_l3_rewrite$arg$mtu_index
              } [] {
                assume (= _symb$rewrite$action (_ bv0 3));
                meta.egress_metadata.routed := (_ bv1 1);
                meta.egress_metadata.bd := _symb$rewrite$set_l3_rewrite_with_tunnel$arg$bd
              }
            }
          }
        }
      } [] {
        assume (not
  (or
    (not
      (= meta.l3_metadata.nexthop_index (_ bv0 16)))
    (= meta.egress_metadata.routed (_ bv0 1))))
      };
      assume (= _symb$egress_bd_map$match_0 meta.egress_metadata.bd);
      {
        assume (= _symb$egress_bd_map$action (_ bv1 1))
      } [] {
        assume (= _symb$egress_bd_map$action (_ bv0 1));
        meta.egress_metadata.smac_idx := _symb$egress_bd_map$set_egress_bd_properties$arg$smac_idx
      };
      {
        assume (= meta.egress_metadata.routed (_ bv1 1));
        assume (= _symb$l3_rewrite$match_0 t$4);
        {
          assume (= _symb$l3_rewrite$match_1$DONTCARE (_ bv1 1))
        } [] {
          assume (not
  (= _symb$l3_rewrite$match_1$DONTCARE (_ bv1 1)));
          assume (= _symb$l3_rewrite$match_1 ((_ extract 31 28) hdr.ipv4.dstAddr))
        };
        {
          assume (= _symb$l3_rewrite$action (_ bv1 1))
        } [] {
          assume (= _symb$l3_rewrite$action (_ bv0 1))
        };
        assume (= _symb$smac_rewrite$match_0 meta.egress_metadata.smac_idx);
        assume (= _symb$smac_rewrite$action (_ bv0 1))
      } [] {
        assume (not
  (= meta.egress_metadata.routed (_ bv1 1)))
      };
      assume (= _symb$mtu$match_0 meta.l3_metadata.mtu_index);
      assume (= _symb$mtu$match_1 t$5);
      assume (= _symb$mtu$match_2 t$6);
      {
        assume (= _symb$mtu$action (_ bv2 2));
        meta.l3_metadata.l3_mtu_check := (_ bv65535 16)
      } [] {
        {
          assume (= _symb$mtu$action (_ bv1 2));
          meta.l3_metadata.l3_mtu_check := (bvsub l3_mtu hdr.ipv4.totalLen)
        } [] {
          assume (= _symb$mtu$action (_ bv0 2));
          meta.l3_metadata.l3_mtu_check := (bvsub l3_mtu hdr.ipv6.payloadLen)
        }
      }
    } [] {
      assume (not
  (= _return$egress_port_mapping.action_run (_ bv0 2)))
    };
    {
      assume (= meta.egress_metadata.port_type (_ bv0 2));
      assume (= _symb$egress_vlan_xlate$match_0 meta.egress_metadata.ifindex);
      assume (= _symb$egress_vlan_xlate$match_1 meta.egress_metadata.bd);
      {
        assume (= _symb$egress_vlan_xlate$action (_ bv2 2))
      } [] {
        {
          assume (= _symb$egress_vlan_xlate$action (_ bv1 2))
        } [] {
          assume (= _symb$egress_vlan_xlate$action (_ bv0 2))
        }
      }
    } [] {
      assume (not
  (= meta.egress_metadata.port_type (_ bv0 2)))
    }
  } [] {
    assume (not
  (= meta.egress_metadata.bypass (_ bv0 1)))
  };
  {
    assume (= meta.egress_metadata.bypass (_ bv0 1));
    {
      assume (= _symb$egress_acl$match_0$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$egress_acl$match_0$DONTCARE (_ bv1 1)));
      assume (= _symb$egress_acl$match_0 standard_metadata.egress_port)
    };
    {
      assume (= _symb$egress_acl$match_1$DONTCARE (_ bv1 1))
    } [] {
      assume (not
  (= _symb$egress_acl$match_1$DONTCARE (_ bv1 1)));
      assume (= _symb$egress_acl$match_1 meta.l3_metadata.l3_mtu_check)
    };
    {
      assume (= _symb$egress_acl$action (_ bv3 2))
    } [] {
      {
        assume (= _symb$egress_acl$action (_ bv2 2))
      } [] {
        {
          assume (= _symb$egress_acl$action (_ bv1 2));
          standard_metadata.egress_spec := (_ bv511 9)
        } [] {
          assume (= _symb$egress_acl$action (_ bv0 2));
          standard_metadata.egress_spec := (_ bv511 9)
        }
      }
    }
  } [] {
    assume (not
  (= meta.egress_metadata.bypass (_ bv0 1)))
  };
  assert (not
  (= standard_metadata.egress_spec (_ bv0 9)))
} [] {
  assume (not
  (= _state$accept$next (_ bv1 1)))
}

Passified:
assume (= _state$parse_ipv4$next$_$1 (_ bv0 1));
assume (= _state$accept$next$_$1 (_ bv0 1));
{
  assume (= hdr.ethernet.etherType$_$0 (_ bv2048 16));
  assume (= _state$parse_ipv4$next$_$2 (_ bv1 1));
  assume (= _state$accept$next$_$1 _state$accept$next$_$2)
} [] {
  assume (not
  (= hdr.ethernet.etherType$_$0 (_ bv2048 16)));
  assume (= _state$accept$next$_$2 (_ bv1 1));
  assume (= _state$parse_ipv4$next$_$1 _state$parse_ipv4$next$_$2)
};
{
  assume (= _state$parse_ipv4$next$_$2 (_ bv1 1));
  assume (= _state$accept$next$_$3 (_ bv1 1));
  assume true
} [] {
  assume (not
  (= _state$parse_ipv4$next$_$2 (_ bv1 1)));
  assume (= _state$accept$next$_$2 _state$accept$next$_$3)
};
{
  assume (= _state$accept$next$_$3 (_ bv1 1));
  assume (= _symb$ingress_port_mapping$match_0$_$0 standard_metadata.ingress_port$_$0);
  assume (= _symb$ingress_port_mapping$action$_$0 (_ bv0 1));
  assume (= _symb$ingress_port_properties$match_0$_$0 standard_metadata.ingress_port$_$0);
  assume (= _symb$ingress_port_properties$action$_$0 (_ bv0 1));
  assume (= _symb$switch_config_params$action$_$0 (_ bv0 1));
  assume (= standard_metadata.egress_spec$_$1 (_ bv511 9));
  assume (= _symb$port_vlan_mapping$match_0$_$0 _symb$ingress_port_mapping$set_ifindex$arg$ifindex$_$0);
  assume (= _symb$port_vlan_mapping$match_1$_$0 t$12$_$0);
  assume (= _symb$port_vlan_mapping$match_2$_$0 hdr.vlan_tag_$_0_$.vid$_$0);
  assume (= _symb$port_vlan_mapping$match_3$_$0 t$13$_$0);
  assume (= _symb$port_vlan_mapping$match_4$_$0 hdr.vlan_tag_$_1_$.vid$_$0);
  {
    assume (= _symb$port_vlan_mapping$action$_$0 (_ bv1 1));
    assume (= meta.ingress_metadata.bd$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$bd$_$0);
    assume (= meta.acl_metadata.bd_label$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$bd_label$_$0);
    assume (= meta.l2_metadata.stp_group$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$stp_group$_$0);
    assume (= meta.l3_metadata.vrf$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$vrf$_$0);
    assume (= meta.ipv4_metadata.ipv4_urpf_mode$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$ipv4_urpf_mode$_$0);
    assume (= meta.multicast_metadata.igmp_snooping_enabled$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$igmp_snooping_enabled$_$0);
    assume (= meta.multicast_metadata.mld_snooping_enabled$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$mld_snooping_enabled$_$0);
    assume true
  } [] {
    assume (= _symb$port_vlan_mapping$action$_$0 (_ bv0 1));
    assume (and
  (= meta.acl_metadata.bd_label$_$0 meta.acl_metadata.bd_label$_$1)
  (= meta.ingress_metadata.bd$_$0 meta.ingress_metadata.bd$_$1)
  (= meta.ipv4_metadata.ipv4_urpf_mode$_$0 meta.ipv4_metadata.ipv4_urpf_mode$_$1)
  (= meta.l2_metadata.stp_group$_$0 meta.l2_metadata.stp_group$_$1)
  (= meta.l3_metadata.vrf$_$0 meta.l3_metadata.vrf$_$1)
  (= meta.multicast_metadata.igmp_snooping_enabled$_$0 meta.multicast_metadata.igmp_snooping_enabled$_$1)
  (= meta.multicast_metadata.mld_snooping_enabled$_$0 meta.multicast_metadata.mld_snooping_enabled$_$1))
  };
  {
    assume (and
  (= _symb$ingress_port_mapping$set_ifindex$arg$port_type$_$0 (_ bv0 2))
  (not
    (= meta.l2_metadata.stp_group$_$1 (_ bv0 10))));
    assume (= _symb$spanning_tree$match_0$_$0 _symb$ingress_port_mapping$set_ifindex$arg$ifindex$_$0);
    assume (= _symb$spanning_tree$match_1$_$0 meta.l2_metadata.stp_group$_$1);
    assume (= _symb$spanning_tree$action$_$0 (_ bv0 1));
    assume true
  } [] {
    assume (not
  (and
    (= _symb$ingress_port_mapping$set_ifindex$arg$port_type$_$0 (_ bv0 2))
    (not
      (= meta.l2_metadata.stp_group$_$1 (_ bv0 10)))));
    assume true
  };
  {
    assume (and
  (= _symb$ingress_port_mapping$set_ifindex$arg$port_type$_$0 (_ bv0 2))
  (= meta.security_metadata.ipsg_enabled$_$0 (_ bv1 1)));
    assume (= _symb$ipsg$match_0$_$0 _symb$ingress_port_mapping$set_ifindex$arg$ifindex$_$0);
    assume (= _symb$ipsg$match_1$_$0 meta.ingress_metadata.bd$_$1);
    assume (= _symb$ipsg$match_2$_$0 meta.l2_metadata.lkp_mac_sa$_$0);
    assume (= _symb$ipsg$match_3$_$0 meta.ipv4_metadata.lkp_ipv4_sa$_$0);
    assume (= _symb$ipsg$action$_$0 (_ bv0 1));
    {
      assume (= _symb$ipsg_permit_special$match_0$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$ipsg_permit_special$match_0$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$ipsg_permit_special$match_0$_$0 meta.l3_metadata.lkp_ip_proto$_$0);
      assume true
    };
    {
      assume (= _symb$ipsg_permit_special$match_1$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$ipsg_permit_special$match_1$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$ipsg_permit_special$match_1$_$0 meta.l3_metadata.lkp_l4_dport$_$0);
      assume true
    };
    {
      assume (= _symb$ipsg_permit_special$match_2$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$ipsg_permit_special$match_2$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$ipsg_permit_special$match_2$_$0 meta.ipv4_metadata.lkp_ipv4_da$_$0);
      assume true
    };
    assume (= _symb$ipsg_permit_special$action$_$0 (_ bv0 1));
    assume true
  } [] {
    assume (not
  (and
    (= _symb$ingress_port_mapping$set_ifindex$arg$port_type$_$0 (_ bv0 2))
    (= meta.security_metadata.ipsg_enabled$_$0 (_ bv1 1))));
    assume true
  };
  {
    assume (= _symb$ipv4_racl$match_0$DONTCARE$_$0 (_ bv1 1));
    assume true
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_0$DONTCARE$_$0 (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_0$_$0 meta.acl_metadata.bd_label$_$1);
    assume true
  };
  {
    assume (= _symb$ipv4_racl$match_1$DONTCARE$_$0 (_ bv1 1));
    assume true
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_1$DONTCARE$_$0 (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_1$_$0 meta.ipv4_metadata.lkp_ipv4_sa$_$0);
    assume true
  };
  {
    assume (= _symb$ipv4_racl$match_2$DONTCARE$_$0 (_ bv1 1));
    assume true
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_2$DONTCARE$_$0 (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_2$_$0 meta.ipv4_metadata.lkp_ipv4_da$_$0);
    assume true
  };
  {
    assume (= _symb$ipv4_racl$match_3$DONTCARE$_$0 (_ bv1 1));
    assume true
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_3$DONTCARE$_$0 (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_3$_$0 meta.l3_metadata.lkp_ip_proto$_$0);
    assume true
  };
  {
    assume (= _symb$ipv4_racl$match_4$DONTCARE$_$0 (_ bv1 1));
    assume true
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_4$DONTCARE$_$0 (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_4$_$0 meta.l3_metadata.lkp_l4_sport$_$0);
    assume true
  };
  {
    assume (= _symb$ipv4_racl$match_5$DONTCARE$_$0 (_ bv1 1));
    assume true
  } [] {
    assume (not
  (= _symb$ipv4_racl$match_5$DONTCARE$_$0 (_ bv1 1)));
    assume (= _symb$ipv4_racl$match_5$_$0 meta.l3_metadata.lkp_l4_dport$_$0);
    assume true
  };
  {
    assume (= _symb$ipv4_racl$action$_$0 (_ bv4 3));
    assume (and
  (= meta.acl_metadata.racl_nexthop$_$0 meta.acl_metadata.racl_nexthop$_$1)
  (= meta.acl_metadata.racl_nexthop_type$_$0 meta.acl_metadata.racl_nexthop_type$_$1)
  (= meta.acl_metadata.racl_redirect$_$0 meta.acl_metadata.racl_redirect$_$1))
  } [] {
    {
      assume (= _symb$ipv4_racl$action$_$0 (_ bv3 3));
      assume (and
  (= meta.acl_metadata.racl_nexthop$_$0 meta.acl_metadata.racl_nexthop$_$1)
  (= meta.acl_metadata.racl_nexthop_type$_$0 meta.acl_metadata.racl_nexthop_type$_$1)
  (= meta.acl_metadata.racl_redirect$_$0 meta.acl_metadata.racl_redirect$_$1))
    } [] {
      {
        assume (= _symb$ipv4_racl$action$_$0 (_ bv2 3));
        assume (and
  (= meta.acl_metadata.racl_nexthop$_$0 meta.acl_metadata.racl_nexthop$_$1)
  (= meta.acl_metadata.racl_nexthop_type$_$0 meta.acl_metadata.racl_nexthop_type$_$1)
  (= meta.acl_metadata.racl_redirect$_$0 meta.acl_metadata.racl_redirect$_$1))
      } [] {
        {
          assume (= _symb$ipv4_racl$action$_$0 (_ bv1 3));
          assume (= meta.acl_metadata.racl_redirect$_$1 (_ bv1 1));
          assume (= meta.acl_metadata.racl_nexthop$_$1 _symb$ipv4_racl$racl_redirect_nexthop$arg$nexthop_index$_$0);
          assume (= meta.acl_metadata.racl_nexthop_type$_$1 (_ bv0 1));
          assume true
        } [] {
          assume (= _symb$ipv4_racl$action$_$0 (_ bv0 3));
          assume (= meta.acl_metadata.racl_redirect$_$1 (_ bv1 1));
          assume (= meta.acl_metadata.racl_nexthop$_$1 _symb$ipv4_racl$racl_redirect_ecmp$arg$ecmp_index$_$0);
          assume (= meta.acl_metadata.racl_nexthop_type$_$1 (_ bv1 1));
          assume true
        };
        assume true
      };
      assume true
    };
    assume true
  };
  {
    assume (not
  (= meta.ipv4_metadata.ipv4_urpf_mode$_$1 (_ bv0 2)));
    assume (= _symb$ipv4_urpf$match_0$_$0 meta.l3_metadata.vrf$_$1);
    assume (= _symb$ipv4_urpf$match_1$_$0 meta.ipv4_metadata.lkp_ipv4_sa$_$0);
    {
      assume (= _symb$ipv4_urpf$action$_$0 (_ bv1 1));
      assume (= _return$ipv4_urpf.action_run$_$1 (_ bv0 1));
      assume true
    } [] {
      assume (= _symb$ipv4_urpf$action$_$0 (_ bv0 1));
      assume (= _return$ipv4_urpf.action_run$_$1 (_ bv1 1));
      assume true
    };
    {
      assume (= _return$ipv4_urpf.action_run$_$1 (_ bv0 1));
      assume (= _symb$ipv4_urpf_lpm$match_0$_$0 meta.l3_metadata.vrf$_$1);
      {
        assume (= _symb$ipv4_urpf_lpm$match_1$DONTCARE$_$0 (_ bv1 1));
        assume true
      } [] {
        assume (not
  (= _symb$ipv4_urpf_lpm$match_1$DONTCARE$_$0 (_ bv1 1)));
        assume (= _symb$ipv4_urpf_lpm$match_1$_$0 meta.ipv4_metadata.lkp_ipv4_sa$_$0);
        assume true
      };
      {
        assume (= _symb$ipv4_urpf_lpm$action$_$0 (_ bv1 1));
        assume true
      } [] {
        assume (= _symb$ipv4_urpf_lpm$action$_$0 (_ bv0 1));
        assume true
      };
      assume true
    } [] {
      assume (not
  (= _return$ipv4_urpf.action_run$_$1 (_ bv0 1)));
      assume true
    };
    assume true
  } [] {
    assume (= meta.ipv4_metadata.ipv4_urpf_mode$_$1 (_ bv0 2));
    assume (= _return$ipv4_urpf.action_run$_$0 _return$ipv4_urpf.action_run$_$1)
  };
  assume (= _symb$ipv4_fib$match_0$_$0 meta.l3_metadata.vrf$_$1);
  assume (= _symb$ipv4_fib$match_1$_$0 meta.ipv4_metadata.lkp_ipv4_da$_$0);
  {
    assume (= _symb$ipv4_fib$action$_$0 (_ bv2 2));
    assume (= _return$ipv4_fib.action_run$_$1 (_ bv0 2));
    assume (and
  (= meta.l3_metadata.fib_hit$_$0 meta.l3_metadata.fib_hit$_$1)
  (= meta.l3_metadata.fib_nexthop$_$0 meta.l3_metadata.fib_nexthop$_$1)
  (= meta.l3_metadata.fib_nexthop_type$_$0 meta.l3_metadata.fib_nexthop_type$_$1))
  } [] {
    {
      assume (= _symb$ipv4_fib$action$_$0 (_ bv1 2));
      assume (= _return$ipv4_fib.action_run$_$1 (_ bv1 2));
      assume (= meta.l3_metadata.fib_hit$_$1 (_ bv1 1));
      assume (= meta.l3_metadata.fib_nexthop$_$1 _symb$ipv4_fib$fib_hit_nexthop$arg$nexthop_index$_$0);
      assume (= meta.l3_metadata.fib_nexthop_type$_$1 (_ bv0 1));
      assume true
    } [] {
      assume (= _symb$ipv4_fib$action$_$0 (_ bv0 2));
      assume (= _return$ipv4_fib.action_run$_$1 (_ bv2 2));
      assume (= meta.l3_metadata.fib_hit$_$1 (_ bv1 1));
      assume (= meta.l3_metadata.fib_nexthop$_$1 _symb$ipv4_fib$fib_hit_ecmp$arg$ecmp_index$_$0);
      assume (= meta.l3_metadata.fib_nexthop_type$_$1 (_ bv1 1));
      assume true
    };
    assume true
  };
  {
    assume (= _return$ipv4_fib.action_run$_$1 (_ bv0 2));
    assume (= _symb$ipv4_fib_lpm$match_0$_$0 meta.l3_metadata.vrf$_$1);
    {
      assume (= _symb$ipv4_fib_lpm$match_1$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$ipv4_fib_lpm$match_1$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$ipv4_fib_lpm$match_1$_$0 meta.ipv4_metadata.lkp_ipv4_da$_$0);
      assume true
    };
    {
      assume (= _symb$ipv4_fib_lpm$action$_$0 (_ bv2 2));
      assume (and
  (= meta.l3_metadata.fib_hit$_$1 meta.l3_metadata.fib_hit$_$2)
  (= meta.l3_metadata.fib_nexthop$_$1 meta.l3_metadata.fib_nexthop$_$2)
  (= meta.l3_metadata.fib_nexthop_type$_$1 meta.l3_metadata.fib_nexthop_type$_$2))
    } [] {
      {
        assume (= _symb$ipv4_fib_lpm$action$_$0 (_ bv1 2));
        assume (= meta.l3_metadata.fib_hit$_$2 (_ bv1 1));
        assume (= meta.l3_metadata.fib_nexthop$_$2 _symb$ipv4_fib_lpm$fib_hit_nexthop$arg$nexthop_index$_$0);
        assume (= meta.l3_metadata.fib_nexthop_type$_$2 (_ bv0 1));
        assume true
      } [] {
        assume (= _symb$ipv4_fib_lpm$action$_$0 (_ bv0 2));
        assume (= meta.l3_metadata.fib_hit$_$2 (_ bv1 1));
        assume (= meta.l3_metadata.fib_nexthop$_$2 _symb$ipv4_fib_lpm$fib_hit_ecmp$arg$ecmp_index$_$0);
        assume (= meta.l3_metadata.fib_nexthop_type$_$2 (_ bv1 1));
        assume true
      };
      assume true
    };
    assume true
  } [] {
    assume (not
  (= _return$ipv4_fib.action_run$_$1 (_ bv0 2)));
    assume (and
  (= meta.l3_metadata.fib_hit$_$1 meta.l3_metadata.fib_hit$_$2)
  (= meta.l3_metadata.fib_nexthop$_$1 meta.l3_metadata.fib_nexthop$_$2)
  (= meta.l3_metadata.fib_nexthop_type$_$1 meta.l3_metadata.fib_nexthop_type$_$2))
  };
  {
    assume (not
  (= meta.ingress_metadata.bypass_lookups$_$0 (_ bv65535 16)));
    {
      assume (= _symb$fwd_result$match_0$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_0$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_0$_$0 meta.l2_metadata.l2_redirect$_$0);
      assume true
    };
    {
      assume (= _symb$fwd_result$match_1$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_1$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_1$_$0 meta.acl_metadata.acl_redirect$_$0);
      assume true
    };
    {
      assume (= _symb$fwd_result$match_2$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_2$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_2$_$0 meta.acl_metadata.racl_redirect$_$1);
      assume true
    };
    {
      assume (= _symb$fwd_result$match_3$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_3$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_3$_$0 meta.l3_metadata.rmac_hit$_$0);
      assume true
    };
    {
      assume (= _symb$fwd_result$match_4$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_4$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_4$_$0 meta.l3_metadata.fib_hit$_$2);
      assume true
    };
    {
      assume (= _symb$fwd_result$match_5$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_5$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_5$_$0 meta.l2_metadata.lkp_pkt_type$_$0);
      assume true
    };
    {
      assume (= _symb$fwd_result$match_6$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_6$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_6$_$0 meta.l3_metadata.lkp_ip_type$_$0);
      assume true
    };
    {
      assume (= _symb$fwd_result$match_7$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_7$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_7$_$0 meta.multicast_metadata.igmp_snooping_enabled$_$1);
      assume true
    };
    {
      assume (= _symb$fwd_result$match_8$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_8$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_8$_$0 meta.multicast_metadata.mld_snooping_enabled$_$1);
      assume true
    };
    {
      assume (= _symb$fwd_result$match_9$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_9$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_9$_$0 meta.multicast_metadata.mcast_route_hit$_$0);
      assume true
    };
    {
      assume (= _symb$fwd_result$match_10$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_10$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_10$_$0 meta.multicast_metadata.mcast_bridge_hit$_$0);
      assume true
    };
    {
      assume (= _symb$fwd_result$match_11$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_11$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_11$_$0 meta.multicast_metadata.mcast_rpf_group$_$0);
      assume true
    };
    {
      assume (= _symb$fwd_result$match_12$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$fwd_result$match_12$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$fwd_result$match_12$_$0 meta.multicast_metadata.mcast_mode$_$0);
      assume true
    };
    {
      assume (= _symb$fwd_result$action$_$0 (_ bv5 3));
      assume (and
  (= meta.l3_metadata.nexthop_index$_$0 meta.l3_metadata.nexthop_index$_$1)
  (= meta.nexthop_metadata.nexthop_type$_$0 meta.nexthop_metadata.nexthop_type$_$1)
  (= standard_metadata.egress_spec$_$1 standard_metadata.egress_spec$_$2))
    } [] {
      {
        assume (= _symb$fwd_result$action$_$0 (_ bv4 3));
        assume (= meta.l3_metadata.nexthop_index$_$1 meta.l2_metadata.l2_nexthop$_$0);
        assume (= meta.nexthop_metadata.nexthop_type$_$1 meta.l2_metadata.l2_nexthop_type$_$0);
        assume (= standard_metadata.egress_spec$_$1 standard_metadata.egress_spec$_$2)
      } [] {
        {
          assume (= _symb$fwd_result$action$_$0 (_ bv3 3));
          assume (= meta.l3_metadata.nexthop_index$_$1 meta.l3_metadata.fib_nexthop$_$2);
          assume (= meta.nexthop_metadata.nexthop_type$_$1 meta.l3_metadata.fib_nexthop_type$_$2);
          assume (= standard_metadata.egress_spec$_$1 standard_metadata.egress_spec$_$2)
        } [] {
          {
            assume (= _symb$fwd_result$action$_$0 (_ bv2 3));
            assume (= standard_metadata.egress_spec$_$2 (_ bv64 9));
            assume (and
  (= meta.l3_metadata.nexthop_index$_$0 meta.l3_metadata.nexthop_index$_$1)
  (= meta.nexthop_metadata.nexthop_type$_$0 meta.nexthop_metadata.nexthop_type$_$1))
          } [] {
            {
              assume (= _symb$fwd_result$action$_$0 (_ bv1 3));
              assume (= meta.l3_metadata.nexthop_index$_$1 meta.acl_metadata.acl_nexthop$_$0);
              assume (= meta.nexthop_metadata.nexthop_type$_$1 meta.acl_metadata.acl_nexthop_type$_$0);
              assume true
            } [] {
              assume (= _symb$fwd_result$action$_$0 (_ bv0 3));
              assume (= meta.l3_metadata.nexthop_index$_$1 meta.acl_metadata.racl_nexthop$_$1);
              assume (= meta.nexthop_metadata.nexthop_type$_$1 meta.acl_metadata.racl_nexthop_type$_$1);
              assume true
            };
            assume (= standard_metadata.egress_spec$_$1 standard_metadata.egress_spec$_$2)
          };
          assume true
        };
        assume true
      };
      assume true
    };
    assume true
  } [] {
    assume (= meta.ingress_metadata.bypass_lookups$_$0 (_ bv65535 16));
    assume (and
  (= meta.l3_metadata.nexthop_index$_$0 meta.l3_metadata.nexthop_index$_$1)
  (= meta.nexthop_metadata.nexthop_type$_$0 meta.nexthop_metadata.nexthop_type$_$1)
  (= standard_metadata.egress_spec$_$1 standard_metadata.egress_spec$_$2))
  };
  {
    assume (= meta.nexthop_metadata.nexthop_type$_$1 (_ bv1 1));
    assume (= _symb$ecmp_group$match_0$_$0 meta.l3_metadata.nexthop_index$_$1);
    assume (= _symb$ecmp_group$match_1$_$0 meta.hash_metadata.hash1$_$0);
    {
      assume (= _symb$ecmp_group$action$_$0 (_ bv2 2));
      assume (= meta.l3_metadata.nexthop_index$_$1 meta.l3_metadata.nexthop_index$_$2)
    } [] {
      {
        assume (= _symb$ecmp_group$action$_$0 (_ bv1 2));
        assume (= meta.l3_metadata.nexthop_index$_$2 _symb$ecmp_group$set_ecmp_nexthop_details$arg$nhop_index$_$0);
        assume true
      } [] {
        assume (= _symb$ecmp_group$action$_$0 (_ bv0 2));
        assume (= meta.l3_metadata.nexthop_index$_$2 _symb$ecmp_group$set_ecmp_nexthop_details_for_post_routed_flood$arg$nhop_index$_$0);
        assume true
      };
      assume true
    };
    assume true
  } [] {
    assume (not
  (= meta.nexthop_metadata.nexthop_type$_$1 (_ bv1 1)));
    assume (= _symb$nexthop$match_0$_$0 meta.l3_metadata.nexthop_index$_$1);
    {
      assume (= _symb$nexthop$action$_$0 (_ bv2 2));
      assume true
    } [] {
      {
        assume (= _symb$nexthop$action$_$0 (_ bv1 2));
        assume true
      } [] {
        assume (= _symb$nexthop$action$_$0 (_ bv0 2));
        assume true
      };
      assume true
    };
    assume (= meta.l3_metadata.nexthop_index$_$1 meta.l3_metadata.nexthop_index$_$2)
  };
  {
    assume (= meta.egress_metadata.bypass$_$0 (_ bv0 1));
    {
      assume (and
  (not
    (= standard_metadata.instance_type$_$0 (_ bv0 32)))
  (not
    (= standard_metadata.instance_type$_$0 (_ bv5 32))));
      assume (= _symb$mirror$match_0$_$0 meta.i2e_metadata.mirror_session_id$_$0);
      {
        assume (= _symb$mirror$action$_$0 (_ bv2 2));
        assume (and
  (= meta.egress_metadata.bd$_$0 meta.egress_metadata.bd$_$1)
  (= meta.l3_metadata.nexthop_index$_$2 meta.l3_metadata.nexthop_index$_$3))
      } [] {
        {
          assume (= _symb$mirror$action$_$0 (_ bv1 2));
          assume (= meta.l3_metadata.nexthop_index$_$3 _symb$mirror$set_mirror_nhop$arg$nhop_idx$_$0);
          assume (= meta.egress_metadata.bd$_$0 meta.egress_metadata.bd$_$1)
        } [] {
          assume (= _symb$mirror$action$_$0 (_ bv0 2));
          assume (= meta.egress_metadata.bd$_$1 _symb$mirror$set_mirror_bd$arg$bd$_$0);
          assume (= meta.l3_metadata.nexthop_index$_$2 meta.l3_metadata.nexthop_index$_$3)
        };
        assume true
      };
      assume true
    } [] {
      assume (not
  (and
    (not
      (= standard_metadata.instance_type$_$0 (_ bv0 32)))
    (not
      (= standard_metadata.instance_type$_$0 (_ bv5 32)))));
      assume (and
  (= meta.egress_metadata.bd$_$0 meta.egress_metadata.bd$_$1)
  (= meta.l3_metadata.nexthop_index$_$2 meta.l3_metadata.nexthop_index$_$3))
    };
    assume (= _symb$egress_port_mapping$match_0$_$0 standard_metadata.egress_port$_$0);
    {
      assume (= _symb$egress_port_mapping$action$_$0 (_ bv2 2));
      assume (= _return$egress_port_mapping.action_run$_$1 (_ bv0 2));
      assume (= meta.egress_metadata.port_type$_$1 (_ bv0 2));
      assume (= meta.egress_metadata.ifindex$_$1 _symb$egress_port_mapping$egress_port_type_normal$arg$ifindex$_$0);
      assume true
    } [] {
      {
        assume (= _symb$egress_port_mapping$action$_$0 (_ bv1 2));
        assume (= _return$egress_port_mapping.action_run$_$1 (_ bv1 2));
        assume (= meta.egress_metadata.port_type$_$1 (_ bv1 2));
        assume (= meta.egress_metadata.ifindex$_$1 _symb$egress_port_mapping$egress_port_type_fabric$arg$ifindex$_$0);
        assume true
      } [] {
        assume (= _symb$egress_port_mapping$action$_$0 (_ bv0 2));
        assume (= _return$egress_port_mapping.action_run$_$1 (_ bv2 2));
        assume (= meta.egress_metadata.port_type$_$1 (_ bv2 2));
        assume (= meta.egress_metadata.ifindex$_$1 _symb$egress_port_mapping$egress_port_type_cpu$arg$ifindex$_$0);
        assume true
      };
      assume true
    };
    {
      assume (= _return$egress_port_mapping.action_run$_$1 (_ bv0 2));
      {
        assume (or
  (= standard_metadata.instance_type$_$0 (_ bv0 32))
  (= standard_metadata.instance_type$_$0 (_ bv5 32)));
        assume (= _symb$vlan_decap$match_0$_$0 t$2$_$0);
        assume (= _symb$vlan_decap$match_1$_$0 t$3$_$0);
        {
          assume (= _symb$vlan_decap$action$_$0 (_ bv2 2));
          assume true
        } [] {
          {
            assume (= _symb$vlan_decap$action$_$0 (_ bv1 2));
            assume true
          } [] {
            assume (= _symb$vlan_decap$action$_$0 (_ bv0 2));
            assume true
          };
          assume true
        };
        assume true
      } [] {
        assume (not
  (or
    (= standard_metadata.instance_type$_$0 (_ bv0 32))
    (= standard_metadata.instance_type$_$0 (_ bv5 32))));
        assume true
      };
      {
        assume (or
  (not
    (= meta.l3_metadata.nexthop_index$_$3 (_ bv0 16)))
  (= meta.egress_metadata.routed$_$0 (_ bv0 1)));
        assume (= _symb$rewrite$match_0$_$0 meta.l3_metadata.nexthop_index$_$3);
        {
          assume (= _symb$rewrite$action$_$0 (_ bv4 3));
          assume (and
  (= meta.egress_metadata.bd$_$1 meta.egress_metadata.bd$_$2)
  (= meta.egress_metadata.routed$_$0 meta.egress_metadata.routed$_$1)
  (= meta.l3_metadata.mtu_index$_$0 meta.l3_metadata.mtu_index$_$1))
        } [] {
          {
            assume (= _symb$rewrite$action$_$0 (_ bv3 3));
            assume (= meta.egress_metadata.routed$_$1 (_ bv0 1));
            assume (= meta.egress_metadata.bd$_$2 meta.ingress_metadata.bd$_$1);
            assume (= meta.l3_metadata.mtu_index$_$0 meta.l3_metadata.mtu_index$_$1)
          } [] {
            {
              assume (= _symb$rewrite$action$_$0 (_ bv2 3));
              assume (= meta.egress_metadata.routed$_$1 (_ bv0 1));
              assume (= meta.egress_metadata.bd$_$2 meta.ingress_metadata.bd$_$1);
              assume (= meta.l3_metadata.mtu_index$_$0 meta.l3_metadata.mtu_index$_$1)
            } [] {
              {
                assume (= _symb$rewrite$action$_$0 (_ bv1 3));
                assume (= meta.egress_metadata.routed$_$1 (_ bv1 1));
                assume (= meta.egress_metadata.bd$_$2 _symb$rewrite$set_l3_rewrite$arg$bd$_$0);
                assume (= meta.l3_metadata.mtu_index$_$1 _symb$rewrite$set_l3_rewrite$arg$mtu_index$_$0);
                assume true
              } [] {
                assume (= _symb$rewrite$action$_$0 (_ bv0 3));
                assume (= meta.egress_metadata.routed$_$1 (_ bv1 1));
                assume (= meta.egress_metadata.bd$_$2 _symb$rewrite$set_l3_rewrite_with_tunnel$arg$bd$_$0);
                assume (= meta.l3_metadata.mtu_index$_$0 meta.l3_metadata.mtu_index$_$1)
              };
              assume true
            };
            assume true
          };
          assume true
        };
        assume true
      } [] {
        assume (not
  (or
    (not
      (= meta.l3_metadata.nexthop_index$_$3 (_ bv0 16)))
    (= meta.egress_metadata.routed$_$0 (_ bv0 1))));
        assume (and
  (= meta.egress_metadata.bd$_$1 meta.egress_metadata.bd$_$2)
  (= meta.egress_metadata.routed$_$0 meta.egress_metadata.routed$_$1)
  (= meta.l3_metadata.mtu_index$_$0 meta.l3_metadata.mtu_index$_$1))
      };
      assume (= _symb$egress_bd_map$match_0$_$0 meta.egress_metadata.bd$_$2);
      {
        assume (= _symb$egress_bd_map$action$_$0 (_ bv1 1));
        assume (= meta.egress_metadata.smac_idx$_$0 meta.egress_metadata.smac_idx$_$1)
      } [] {
        assume (= _symb$egress_bd_map$action$_$0 (_ bv0 1));
        assume (= meta.egress_metadata.smac_idx$_$1 _symb$egress_bd_map$set_egress_bd_properties$arg$smac_idx$_$0);
        assume true
      };
      {
        assume (= meta.egress_metadata.routed$_$1 (_ bv1 1));
        assume (= _symb$l3_rewrite$match_0$_$0 t$4$_$0);
        {
          assume (= _symb$l3_rewrite$match_1$DONTCARE$_$0 (_ bv1 1));
          assume true
        } [] {
          assume (not
  (= _symb$l3_rewrite$match_1$DONTCARE$_$0 (_ bv1 1)));
          assume (= _symb$l3_rewrite$match_1$_$0 ((_ extract 31 28) hdr.ipv4.dstAddr$_$0));
          assume true
        };
        {
          assume (= _symb$l3_rewrite$action$_$0 (_ bv1 1));
          assume true
        } [] {
          assume (= _symb$l3_rewrite$action$_$0 (_ bv0 1));
          assume true
        };
        assume (= _symb$smac_rewrite$match_0$_$0 meta.egress_metadata.smac_idx$_$1);
        assume (= _symb$smac_rewrite$action$_$0 (_ bv0 1));
        assume true
      } [] {
        assume (not
  (= meta.egress_metadata.routed$_$1 (_ bv1 1)));
        assume true
      };
      assume (= _symb$mtu$match_0$_$0 meta.l3_metadata.mtu_index$_$1);
      assume (= _symb$mtu$match_1$_$0 t$5$_$0);
      assume (= _symb$mtu$match_2$_$0 t$6$_$0);
      {
        assume (= _symb$mtu$action$_$0 (_ bv2 2));
        assume (= meta.l3_metadata.l3_mtu_check$_$1 (_ bv65535 16));
        assume true
      } [] {
        {
          assume (= _symb$mtu$action$_$0 (_ bv1 2));
          assume (= meta.l3_metadata.l3_mtu_check$_$1 (bvsub l3_mtu$_$0 hdr.ipv4.totalLen$_$0));
          assume true
        } [] {
          assume (= _symb$mtu$action$_$0 (_ bv0 2));
          assume (= meta.l3_metadata.l3_mtu_check$_$1 (bvsub l3_mtu$_$0 hdr.ipv6.payloadLen$_$0));
          assume true
        };
        assume true
      };
      assume true
    } [] {
      assume (not
  (= _return$egress_port_mapping.action_run$_$1 (_ bv0 2)));
      assume (and
  (= meta.egress_metadata.bd$_$1 meta.egress_metadata.bd$_$2)
  (= meta.egress_metadata.routed$_$0 meta.egress_metadata.routed$_$1)
  (= meta.egress_metadata.smac_idx$_$0 meta.egress_metadata.smac_idx$_$1)
  (= meta.l3_metadata.l3_mtu_check$_$0 meta.l3_metadata.l3_mtu_check$_$1)
  (= meta.l3_metadata.mtu_index$_$0 meta.l3_metadata.mtu_index$_$1))
    };
    {
      assume (= meta.egress_metadata.port_type$_$1 (_ bv0 2));
      assume (= _symb$egress_vlan_xlate$match_0$_$0 meta.egress_metadata.ifindex$_$1);
      assume (= _symb$egress_vlan_xlate$match_1$_$0 meta.egress_metadata.bd$_$2);
      {
        assume (= _symb$egress_vlan_xlate$action$_$0 (_ bv2 2));
        assume true
      } [] {
        {
          assume (= _symb$egress_vlan_xlate$action$_$0 (_ bv1 2));
          assume true
        } [] {
          assume (= _symb$egress_vlan_xlate$action$_$0 (_ bv0 2));
          assume true
        };
        assume true
      };
      assume true
    } [] {
      assume (not
  (= meta.egress_metadata.port_type$_$1 (_ bv0 2)));
      assume true
    };
    assume true
  } [] {
    assume (not
  (= meta.egress_metadata.bypass$_$0 (_ bv0 1)));
    assume (and
  (= _return$egress_port_mapping.action_run$_$0 _return$egress_port_mapping.action_run$_$1)
  (= meta.egress_metadata.bd$_$0 meta.egress_metadata.bd$_$1)
  (= meta.egress_metadata.bd$_$1 meta.egress_metadata.bd$_$2)
  (= meta.egress_metadata.ifindex$_$0 meta.egress_metadata.ifindex$_$1)
  (= meta.egress_metadata.port_type$_$0 meta.egress_metadata.port_type$_$1)
  (= meta.egress_metadata.routed$_$0 meta.egress_metadata.routed$_$1)
  (= meta.egress_metadata.smac_idx$_$0 meta.egress_metadata.smac_idx$_$1)
  (= meta.l3_metadata.l3_mtu_check$_$0 meta.l3_metadata.l3_mtu_check$_$1)
  (= meta.l3_metadata.mtu_index$_$0 meta.l3_metadata.mtu_index$_$1)
  (= meta.l3_metadata.nexthop_index$_$2 meta.l3_metadata.nexthop_index$_$3))
  };
  {
    assume (= meta.egress_metadata.bypass$_$0 (_ bv0 1));
    {
      assume (= _symb$egress_acl$match_0$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$egress_acl$match_0$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$egress_acl$match_0$_$0 standard_metadata.egress_port$_$0);
      assume true
    };
    {
      assume (= _symb$egress_acl$match_1$DONTCARE$_$0 (_ bv1 1));
      assume true
    } [] {
      assume (not
  (= _symb$egress_acl$match_1$DONTCARE$_$0 (_ bv1 1)));
      assume (= _symb$egress_acl$match_1$_$0 meta.l3_metadata.l3_mtu_check$_$1);
      assume true
    };
    {
      assume (= _symb$egress_acl$action$_$0 (_ bv3 2));
      assume (= standard_metadata.egress_spec$_$2 standard_metadata.egress_spec$_$3)
    } [] {
      {
        assume (= _symb$egress_acl$action$_$0 (_ bv2 2));
        assume (= standard_metadata.egress_spec$_$2 standard_metadata.egress_spec$_$3)
      } [] {
        {
          assume (= _symb$egress_acl$action$_$0 (_ bv1 2));
          assume (= standard_metadata.egress_spec$_$3 (_ bv511 9));
          assume true
        } [] {
          assume (= _symb$egress_acl$action$_$0 (_ bv0 2));
          assume (= standard_metadata.egress_spec$_$3 (_ bv511 9));
          assume true
        };
        assume true
      };
      assume true
    };
    assume true
  } [] {
    assume (not
  (= meta.egress_metadata.bypass$_$0 (_ bv0 1)));
    assume (= standard_metadata.egress_spec$_$2 standard_metadata.egress_spec$_$3)
  };
  assert (not
  (= standard_metadata.egress_spec$_$3 (_ bv0 9)));
  assume true
} [] {
  assume (not
  (= _state$accept$next$_$3 (_ bv1 1)));
  assume (and
  (= _return$egress_port_mapping.action_run$_$0 _return$egress_port_mapping.action_run$_$1)
  (= _return$ipv4_fib.action_run$_$0 _return$ipv4_fib.action_run$_$1)
  (= _return$ipv4_urpf.action_run$_$0 _return$ipv4_urpf.action_run$_$1)
  (= meta.acl_metadata.bd_label$_$0 meta.acl_metadata.bd_label$_$1)
  (= meta.acl_metadata.racl_nexthop$_$0 meta.acl_metadata.racl_nexthop$_$1)
  (= meta.acl_metadata.racl_nexthop_type$_$0 meta.acl_metadata.racl_nexthop_type$_$1)
  (= meta.acl_metadata.racl_redirect$_$0 meta.acl_metadata.racl_redirect$_$1)
  (= meta.egress_metadata.bd$_$0 meta.egress_metadata.bd$_$1)
  (= meta.egress_metadata.bd$_$1 meta.egress_metadata.bd$_$2)
  (= meta.egress_metadata.ifindex$_$0 meta.egress_metadata.ifindex$_$1)
  (= meta.egress_metadata.port_type$_$0 meta.egress_metadata.port_type$_$1)
  (= meta.egress_metadata.routed$_$0 meta.egress_metadata.routed$_$1)
  (= meta.egress_metadata.smac_idx$_$0 meta.egress_metadata.smac_idx$_$1)
  (= meta.ingress_metadata.bd$_$0 meta.ingress_metadata.bd$_$1)
  (= meta.ipv4_metadata.ipv4_urpf_mode$_$0 meta.ipv4_metadata.ipv4_urpf_mode$_$1)
  (= meta.l2_metadata.stp_group$_$0 meta.l2_metadata.stp_group$_$1)
  (= meta.l3_metadata.fib_hit$_$0 meta.l3_metadata.fib_hit$_$1)
  (= meta.l3_metadata.fib_hit$_$1 meta.l3_metadata.fib_hit$_$2)
  (= meta.l3_metadata.fib_nexthop$_$0 meta.l3_metadata.fib_nexthop$_$1)
  (= meta.l3_metadata.fib_nexthop$_$1 meta.l3_metadata.fib_nexthop$_$2)
  (= meta.l3_metadata.fib_nexthop_type$_$0 meta.l3_metadata.fib_nexthop_type$_$1)
  (= meta.l3_metadata.fib_nexthop_type$_$1 meta.l3_metadata.fib_nexthop_type$_$2)
  (= meta.l3_metadata.l3_mtu_check$_$0 meta.l3_metadata.l3_mtu_check$_$1)
  (= meta.l3_metadata.mtu_index$_$0 meta.l3_metadata.mtu_index$_$1)
  (= meta.l3_metadata.nexthop_index$_$0 meta.l3_metadata.nexthop_index$_$1)
  (= meta.l3_metadata.nexthop_index$_$1 meta.l3_metadata.nexthop_index$_$2)
  (= meta.l3_metadata.nexthop_index$_$2 meta.l3_metadata.nexthop_index$_$3)
  (= meta.l3_metadata.vrf$_$0 meta.l3_metadata.vrf$_$1)
  (= meta.multicast_metadata.igmp_snooping_enabled$_$0 meta.multicast_metadata.igmp_snooping_enabled$_$1)
  (= meta.multicast_metadata.mld_snooping_enabled$_$0 meta.multicast_metadata.mld_snooping_enabled$_$1)
  (= meta.nexthop_metadata.nexthop_type$_$0 meta.nexthop_metadata.nexthop_type$_$1)
  (= standard_metadata.egress_spec$_$0 standard_metadata.egress_spec$_$1)
  (= standard_metadata.egress_spec$_$1 standard_metadata.egress_spec$_$2)
  (= standard_metadata.egress_spec$_$2 standard_metadata.egress_spec$_$3))
} 

 And its VC: 
(declare-const _symb$ecmp_group$action$_$0 (_ BitVec 2))
(declare-const _symb$ecmp_group$match_0$_$0 (_ BitVec 16))
(declare-const _symb$ecmp_group$match_1$_$0 (_ BitVec 16))
(declare-const _symb$ecmp_group$set_ecmp_nexthop_details$arg$nhop_index$_$0 (_ BitVec 16))
(declare-const _symb$ecmp_group$set_ecmp_nexthop_details_for_post_routed_flood$arg$nhop_index$_$0 (_ BitVec 16))
(declare-const _symb$egress_acl$action$_$0 (_ BitVec 2))
(declare-const _symb$egress_acl$match_0$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$egress_acl$match_0$_$0 (_ BitVec 9))
(declare-const _symb$egress_acl$match_1$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$egress_acl$match_1$_$0 (_ BitVec 16))
(declare-const _symb$egress_bd_map$action$_$0 (_ BitVec 1))
(declare-const _symb$egress_bd_map$match_0$_$0 (_ BitVec 16))
(declare-const _symb$egress_bd_map$set_egress_bd_properties$arg$smac_idx$_$0 (_ BitVec 9))
(declare-const _symb$egress_port_mapping$action$_$0 (_ BitVec 2))
(declare-const _symb$egress_port_mapping$egress_port_type_cpu$arg$ifindex$_$0 (_ BitVec 16))
(declare-const _symb$egress_port_mapping$egress_port_type_fabric$arg$ifindex$_$0 (_ BitVec 16))
(declare-const _symb$egress_port_mapping$egress_port_type_normal$arg$ifindex$_$0 (_ BitVec 16))
(declare-const _symb$egress_port_mapping$match_0$_$0 (_ BitVec 9))
(declare-const _symb$egress_vlan_xlate$action$_$0 (_ BitVec 2))
(declare-const _symb$egress_vlan_xlate$match_0$_$0 (_ BitVec 16))
(declare-const _symb$egress_vlan_xlate$match_1$_$0 (_ BitVec 16))
(declare-const _symb$fwd_result$action$_$0 (_ BitVec 3))
(declare-const _symb$fwd_result$match_0$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_0$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_1$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_1$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_10$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_10$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_11$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_11$_$0 (_ BitVec 16))
(declare-const _symb$fwd_result$match_12$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_12$_$0 (_ BitVec 2))
(declare-const _symb$fwd_result$match_2$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_2$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_3$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_3$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_4$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_4$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_5$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_5$_$0 (_ BitVec 3))
(declare-const _symb$fwd_result$match_6$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_6$_$0 (_ BitVec 2))
(declare-const _symb$fwd_result$match_7$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_7$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_8$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_8$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_9$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$fwd_result$match_9$_$0 (_ BitVec 1))
(declare-const _symb$ingress_port_mapping$action$_$0 (_ BitVec 1))
(declare-const _symb$ingress_port_mapping$match_0$_$0 (_ BitVec 9))
(declare-const _symb$ingress_port_mapping$set_ifindex$arg$ifindex$_$0 (_ BitVec 16))
(declare-const _symb$ingress_port_mapping$set_ifindex$arg$port_type$_$0 (_ BitVec 2))
(declare-const _symb$ingress_port_properties$action$_$0 (_ BitVec 1))
(declare-const _symb$ingress_port_properties$match_0$_$0 (_ BitVec 9))
(declare-const _symb$ipsg$action$_$0 (_ BitVec 1))
(declare-const _symb$ipsg$match_0$_$0 (_ BitVec 16))
(declare-const _symb$ipsg$match_1$_$0 (_ BitVec 16))
(declare-const _symb$ipsg$match_2$_$0 (_ BitVec 48))
(declare-const _symb$ipsg$match_3$_$0 (_ BitVec 32))
(declare-const _symb$ipsg_permit_special$action$_$0 (_ BitVec 1))
(declare-const _symb$ipsg_permit_special$match_0$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$ipsg_permit_special$match_0$_$0 (_ BitVec 8))
(declare-const _symb$ipsg_permit_special$match_1$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$ipsg_permit_special$match_1$_$0 (_ BitVec 16))
(declare-const _symb$ipsg_permit_special$match_2$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$ipsg_permit_special$match_2$_$0 (_ BitVec 32))
(declare-const _symb$ipv4_fib$action$_$0 (_ BitVec 2))
(declare-const _symb$ipv4_fib$fib_hit_ecmp$arg$ecmp_index$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_fib$fib_hit_nexthop$arg$nexthop_index$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_fib$match_0$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_fib$match_1$_$0 (_ BitVec 32))
(declare-const _symb$ipv4_fib_lpm$action$_$0 (_ BitVec 2))
(declare-const _symb$ipv4_fib_lpm$fib_hit_ecmp$arg$ecmp_index$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_fib_lpm$fib_hit_nexthop$arg$nexthop_index$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_fib_lpm$match_0$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_fib_lpm$match_1$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$ipv4_fib_lpm$match_1$_$0 (_ BitVec 32))
(declare-const _symb$ipv4_racl$action$_$0 (_ BitVec 3))
(declare-const _symb$ipv4_racl$match_0$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$ipv4_racl$match_0$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_racl$match_1$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$ipv4_racl$match_1$_$0 (_ BitVec 32))
(declare-const _symb$ipv4_racl$match_2$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$ipv4_racl$match_2$_$0 (_ BitVec 32))
(declare-const _symb$ipv4_racl$match_3$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$ipv4_racl$match_3$_$0 (_ BitVec 8))
(declare-const _symb$ipv4_racl$match_4$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$ipv4_racl$match_4$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_racl$match_5$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$ipv4_racl$match_5$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_racl$racl_redirect_ecmp$arg$ecmp_index$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_racl$racl_redirect_nexthop$arg$nexthop_index$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_urpf$action$_$0 (_ BitVec 1))
(declare-const _symb$ipv4_urpf$match_0$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_urpf$match_1$_$0 (_ BitVec 32))
(declare-const _symb$ipv4_urpf_lpm$match_0$_$0 (_ BitVec 16))
(declare-const _symb$ipv4_urpf_lpm$match_1$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$ipv4_urpf_lpm$match_1$_$0 (_ BitVec 32))
(declare-const _symb$l3_rewrite$match_0$_$0 (_ BitVec 1))
(declare-const _symb$l3_rewrite$match_1$DONTCARE$_$0 (_ BitVec 1))
(declare-const _symb$l3_rewrite$match_1$_$0 (_ BitVec 4))
(declare-const _symb$mirror$action$_$0 (_ BitVec 2))
(declare-const _symb$mirror$match_0$_$0 (_ BitVec 16))
(declare-const _symb$mirror$set_mirror_bd$arg$bd$_$0 (_ BitVec 16))
(declare-const _symb$mirror$set_mirror_nhop$arg$nhop_idx$_$0 (_ BitVec 16))
(declare-const _symb$mtu$action$_$0 (_ BitVec 2))
(declare-const _symb$mtu$match_0$_$0 (_ BitVec 8))
(declare-const _symb$mtu$match_1$_$0 (_ BitVec 1))
(declare-const _symb$mtu$match_2$_$0 (_ BitVec 1))
(declare-const _symb$nexthop$action$_$0 (_ BitVec 2))
(declare-const _symb$nexthop$match_0$_$0 (_ BitVec 16))
(declare-const _symb$port_vlan_mapping$action$_$0 (_ BitVec 1))
(declare-const _symb$port_vlan_mapping$match_0$_$0 (_ BitVec 16))
(declare-const _symb$port_vlan_mapping$match_1$_$0 (_ BitVec 1))
(declare-const _symb$port_vlan_mapping$match_2$_$0 (_ BitVec 12))
(declare-const _symb$port_vlan_mapping$match_3$_$0 (_ BitVec 1))
(declare-const _symb$port_vlan_mapping$match_4$_$0 (_ BitVec 12))
(declare-const _symb$port_vlan_mapping$set_bd_properties$arg$bd$_$0 (_ BitVec 16))
(declare-const _symb$port_vlan_mapping$set_bd_properties$arg$bd_label$_$0 (_ BitVec 16))
(declare-const _symb$port_vlan_mapping$set_bd_properties$arg$igmp_snooping_enabled$_$0 (_ BitVec 1))
(declare-const _symb$port_vlan_mapping$set_bd_properties$arg$ipv4_urpf_mode$_$0 (_ BitVec 2))
(declare-const _symb$port_vlan_mapping$set_bd_properties$arg$mld_snooping_enabled$_$0 (_ BitVec 1))
(declare-const _symb$port_vlan_mapping$set_bd_properties$arg$stp_group$_$0 (_ BitVec 10))
(declare-const _symb$port_vlan_mapping$set_bd_properties$arg$vrf$_$0 (_ BitVec 16))
(declare-const _symb$rewrite$action$_$0 (_ BitVec 3))
(declare-const _symb$rewrite$match_0$_$0 (_ BitVec 16))
(declare-const _symb$rewrite$set_l3_rewrite$arg$bd$_$0 (_ BitVec 16))
(declare-const _symb$rewrite$set_l3_rewrite$arg$mtu_index$_$0 (_ BitVec 8))
(declare-const _symb$rewrite$set_l3_rewrite_with_tunnel$arg$bd$_$0 (_ BitVec 16))
(declare-const _symb$smac_rewrite$action$_$0 (_ BitVec 1))
(declare-const _symb$smac_rewrite$match_0$_$0 (_ BitVec 9))
(declare-const _symb$spanning_tree$action$_$0 (_ BitVec 1))
(declare-const _symb$spanning_tree$match_0$_$0 (_ BitVec 16))
(declare-const _symb$spanning_tree$match_1$_$0 (_ BitVec 10))
(declare-const _symb$switch_config_params$action$_$0 (_ BitVec 1))
(declare-const _symb$vlan_decap$action$_$0 (_ BitVec 2))
(declare-const _symb$vlan_decap$match_0$_$0 (_ BitVec 1))
(declare-const _symb$vlan_decap$match_1$_$0 (_ BitVec 1))
 
 (forall ((_return$egress_port_mapping.action_run$_$0 (_ BitVec 2)) (_return$egress_port_mapping.action_run$_$1 (_ BitVec 2)) (_return$ipv4_fib.action_run$_$1 (_ BitVec 2)) (_return$ipv4_urpf.action_run$_$0 (_ BitVec 1)) (_return$ipv4_urpf.action_run$_$1 (_ BitVec 1)) (_state$accept$next$_$1 (_ BitVec 1)) (_state$accept$next$_$2 (_ BitVec 1)) (_state$accept$next$_$3 (_ BitVec 1)) (_state$parse_ipv4$next$_$1 (_ BitVec 1)) (_state$parse_ipv4$next$_$2 (_ BitVec 1)) (hdr.ethernet.etherType$_$0 (_ BitVec 16)) (hdr.ipv4.dstAddr$_$0 (_ BitVec 32)) (hdr.ipv4.totalLen$_$0 (_ BitVec 16)) (hdr.ipv6.payloadLen$_$0 (_ BitVec 16)) (hdr.vlan_tag_$_0_$.vid$_$0 (_ BitVec 12)) (hdr.vlan_tag_$_1_$.vid$_$0 (_ BitVec 12)) (l3_mtu$_$0 (_ BitVec 16)) (meta.acl_metadata.acl_nexthop$_$0 (_ BitVec 16)) (meta.acl_metadata.acl_nexthop_type$_$0 (_ BitVec 1)) (meta.acl_metadata.acl_redirect$_$0 (_ BitVec 1)) (meta.acl_metadata.bd_label$_$0 (_ BitVec 16)) (meta.acl_metadata.bd_label$_$1 (_ BitVec 16)) (meta.acl_metadata.racl_nexthop$_$0 (_ BitVec 16)) (meta.acl_metadata.racl_nexthop$_$1 (_ BitVec 16)) (meta.acl_metadata.racl_nexthop_type$_$0 (_ BitVec 1)) (meta.acl_metadata.racl_nexthop_type$_$1 (_ BitVec 1)) (meta.acl_metadata.racl_redirect$_$0 (_ BitVec 1)) (meta.acl_metadata.racl_redirect$_$1 (_ BitVec 1)) (meta.egress_metadata.bd$_$0 (_ BitVec 16)) (meta.egress_metadata.bd$_$1 (_ BitVec 16)) (meta.egress_metadata.bd$_$2 (_ BitVec 16)) (meta.egress_metadata.bypass$_$0 (_ BitVec 1)) (meta.egress_metadata.ifindex$_$0 (_ BitVec 16)) (meta.egress_metadata.ifindex$_$1 (_ BitVec 16)) (meta.egress_metadata.port_type$_$0 (_ BitVec 2)) (meta.egress_metadata.port_type$_$1 (_ BitVec 2)) (meta.egress_metadata.routed$_$0 (_ BitVec 1)) (meta.egress_metadata.routed$_$1 (_ BitVec 1)) (meta.egress_metadata.smac_idx$_$0 (_ BitVec 9)) (meta.egress_metadata.smac_idx$_$1 (_ BitVec 9)) (meta.hash_metadata.hash1$_$0 (_ BitVec 16)) (meta.i2e_metadata.mirror_session_id$_$0 (_ BitVec 16)) (meta.ingress_metadata.bd$_$0 (_ BitVec 16)) (meta.ingress_metadata.bd$_$1 (_ BitVec 16)) (meta.ingress_metadata.bypass_lookups$_$0 (_ BitVec 16)) (meta.ipv4_metadata.ipv4_urpf_mode$_$0 (_ BitVec 2)) (meta.ipv4_metadata.ipv4_urpf_mode$_$1 (_ BitVec 2)) (meta.ipv4_metadata.lkp_ipv4_da$_$0 (_ BitVec 32)) (meta.ipv4_metadata.lkp_ipv4_sa$_$0 (_ BitVec 32)) (meta.l2_metadata.l2_nexthop$_$0 (_ BitVec 16)) (meta.l2_metadata.l2_nexthop_type$_$0 (_ BitVec 1)) (meta.l2_metadata.l2_redirect$_$0 (_ BitVec 1)) (meta.l2_metadata.lkp_mac_sa$_$0 (_ BitVec 48)) (meta.l2_metadata.lkp_pkt_type$_$0 (_ BitVec 3)) (meta.l2_metadata.stp_group$_$0 (_ BitVec 10)) (meta.l2_metadata.stp_group$_$1 (_ BitVec 10)) (meta.l3_metadata.fib_hit$_$0 (_ BitVec 1)) (meta.l3_metadata.fib_hit$_$1 (_ BitVec 1)) (meta.l3_metadata.fib_hit$_$2 (_ BitVec 1)) (meta.l3_metadata.fib_nexthop$_$0 (_ BitVec 16)) (meta.l3_metadata.fib_nexthop$_$1 (_ BitVec 16)) (meta.l3_metadata.fib_nexthop$_$2 (_ BitVec 16)) (meta.l3_metadata.fib_nexthop_type$_$0 (_ BitVec 1)) (meta.l3_metadata.fib_nexthop_type$_$1 (_ BitVec 1)) (meta.l3_metadata.fib_nexthop_type$_$2 (_ BitVec 1)) (meta.l3_metadata.l3_mtu_check$_$0 (_ BitVec 16)) (meta.l3_metadata.l3_mtu_check$_$1 (_ BitVec 16)) (meta.l3_metadata.lkp_ip_proto$_$0 (_ BitVec 8)) (meta.l3_metadata.lkp_ip_type$_$0 (_ BitVec 2)) (meta.l3_metadata.lkp_l4_dport$_$0 (_ BitVec 16)) (meta.l3_metadata.lkp_l4_sport$_$0 (_ BitVec 16)) (meta.l3_metadata.mtu_index$_$0 (_ BitVec 8)) (meta.l3_metadata.mtu_index$_$1 (_ BitVec 8)) (meta.l3_metadata.nexthop_index$_$0 (_ BitVec 16)) (meta.l3_metadata.nexthop_index$_$1 (_ BitVec 16)) (meta.l3_metadata.nexthop_index$_$2 (_ BitVec 16)) (meta.l3_metadata.nexthop_index$_$3 (_ BitVec 16)) (meta.l3_metadata.rmac_hit$_$0 (_ BitVec 1)) (meta.l3_metadata.vrf$_$0 (_ BitVec 16)) (meta.l3_metadata.vrf$_$1 (_ BitVec 16)) (meta.multicast_metadata.igmp_snooping_enabled$_$0 (_ BitVec 1)) (meta.multicast_metadata.igmp_snooping_enabled$_$1 (_ BitVec 1)) (meta.multicast_metadata.mcast_bridge_hit$_$0 (_ BitVec 1)) (meta.multicast_metadata.mcast_mode$_$0 (_ BitVec 2)) (meta.multicast_metadata.mcast_route_hit$_$0 (_ BitVec 1)) (meta.multicast_metadata.mcast_rpf_group$_$0 (_ BitVec 16)) (meta.multicast_metadata.mld_snooping_enabled$_$0 (_ BitVec 1)) (meta.multicast_metadata.mld_snooping_enabled$_$1 (_ BitVec 1)) (meta.nexthop_metadata.nexthop_type$_$0 (_ BitVec 1)) (meta.nexthop_metadata.nexthop_type$_$1 (_ BitVec 1)) (meta.security_metadata.ipsg_enabled$_$0 (_ BitVec 1)) (standard_metadata.egress_port$_$0 (_ BitVec 9)) (standard_metadata.egress_spec$_$1 (_ BitVec 9)) (standard_metadata.egress_spec$_$2 (_ BitVec 9)) (standard_metadata.egress_spec$_$3 (_ BitVec 9)) (standard_metadata.ingress_port$_$0 (_ BitVec 9)) (standard_metadata.instance_type$_$0 (_ BitVec 32)) (t$12$_$0 (_ BitVec 1)) (t$13$_$0 (_ BitVec 1)) (t$2$_$0 (_ BitVec 1)) (t$3$_$0 (_ BitVec 1)) (t$4$_$0 (_ BitVec 1)) (t$5$_$0 (_ BitVec 1)) (t$6$_$0 (_ BitVec 1)) ) 
 (or
  (not
    (= _state$accept$next$_$1 (_ bv0 1)))
  (not
    (= _state$parse_ipv4$next$_$1 (_ bv0 1)))
  (not
    (= _state$accept$next$_$3 (_ bv1 1)))
  (not
    (= _symb$ingress_port_mapping$match_0$_$0 _symb$ingress_port_properties$match_0$_$0))
  (not
    (= _symb$ingress_port_mapping$action$_$0 (_ bv0 1)))
  (not
    (= _symb$ingress_port_mapping$match_0$_$0 standard_metadata.ingress_port$_$0))
  (not
    (= _symb$ingress_port_properties$action$_$0 (_ bv0 1)))
  (not
    (= _symb$switch_config_params$action$_$0 (_ bv0 1)))
  (not
    (= standard_metadata.egress_spec$_$1 (_ bv511 9)))
  (not
    (= _symb$port_vlan_mapping$match_0$_$0 _symb$ingress_port_mapping$set_ifindex$arg$ifindex$_$0))
  (not
    (= _symb$port_vlan_mapping$match_1$_$0 t$12$_$0))
  (not
    (= _symb$port_vlan_mapping$match_2$_$0 hdr.vlan_tag_$_0_$.vid$_$0))
  (not
    (= _symb$port_vlan_mapping$match_3$_$0 t$13$_$0))
  (not
    (= _symb$port_vlan_mapping$match_4$_$0 hdr.vlan_tag_$_1_$.vid$_$0))
  (not
    (= _symb$ipv4_fib$match_0$_$0 meta.l3_metadata.vrf$_$1))
  (not
    (= standard_metadata.egress_spec$_$3 (_ bv0 9)))
  (not
    (= _symb$ipv4_fib$match_1$_$0 meta.ipv4_metadata.lkp_ipv4_da$_$0))
  (and
    (or
      (not
        (= _state$parse_ipv4$next$_$2 (_ bv1 1)))
      (not
        (= _state$accept$next$_$1 _state$accept$next$_$2))
      (not
        (= hdr.ethernet.etherType$_$0 (_ bv2048 16))))
    (or
      (not
        (= _state$parse_ipv4$next$_$1 _state$parse_ipv4$next$_$2))
      (not
        (= _state$accept$next$_$2 (_ bv1 1)))
      (= hdr.ethernet.etherType$_$0 (_ bv2048 16))))
  (and
    (not
      (= _state$parse_ipv4$next$_$2 (_ bv1 1)))
    (or
      (not
        (= _state$accept$next$_$2 (_ bv1 1)))
      (= _state$parse_ipv4$next$_$2 (_ bv1 1))))
  (and
    (or
      (not
        (= meta.ingress_metadata.bd$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$bd$_$0))
      (not
        (= _symb$port_vlan_mapping$action$_$0 (_ bv1 1)))
      (not
        (= meta.acl_metadata.bd_label$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$bd_label$_$0))
      (not
        (= meta.l2_metadata.stp_group$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$stp_group$_$0))
      (not
        (= _symb$ipv4_fib$match_0$_$0 _symb$port_vlan_mapping$set_bd_properties$arg$vrf$_$0))
      (not
        (= meta.ipv4_metadata.ipv4_urpf_mode$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$ipv4_urpf_mode$_$0))
      (not
        (= meta.multicast_metadata.mld_snooping_enabled$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$mld_snooping_enabled$_$0))
      (not
        (= meta.multicast_metadata.igmp_snooping_enabled$_$1 _symb$port_vlan_mapping$set_bd_properties$arg$igmp_snooping_enabled$_$0)))
    (or
      (not
        (= meta.acl_metadata.bd_label$_$0 meta.acl_metadata.bd_label$_$1))
      (not
        (= _symb$port_vlan_mapping$action$_$0 (_ bv0 1)))
      (not
        (= meta.ingress_metadata.bd$_$0 meta.ingress_metadata.bd$_$1))
      (not
        (= meta.ipv4_metadata.ipv4_urpf_mode$_$0 meta.ipv4_metadata.ipv4_urpf_mode$_$1))
      (not
        (= meta.l2_metadata.stp_group$_$0 meta.l2_metadata.stp_group$_$1))
      (not
        (= meta.l3_metadata.vrf$_$0 _symb$ipv4_fib$match_0$_$0))
      (not
        (= meta.multicast_metadata.mld_snooping_enabled$_$0 meta.multicast_metadata.mld_snooping_enabled$_$1))
      (not
        (= meta.multicast_metadata.igmp_snooping_enabled$_$0 meta.multicast_metadata.igmp_snooping_enabled$_$1))))
  (and
    (and
      (or
        (not
          (= _symb$ingress_port_mapping$set_ifindex$arg$port_type$_$0 (_ bv0 2)))
        (not
          (= _symb$spanning_tree$match_0$_$0 _symb$ingress_port_mapping$set_ifindex$arg$ifindex$_$0))
        (not
          (= _symb$spanning_tree$action$_$0 (_ bv0 1)))
        (not
          (= _symb$spanning_tree$match_1$_$0 meta.l2_metadata.stp_group$_$1))
        (= _symb$spanning_tree$match_1$_$0 (_ bv0 10)))
      (= _symb$ingress_port_mapping$set_ifindex$arg$port_type$_$0 (_ bv0 2)))
    (not
      (= meta.l2_metadata.stp_group$_$1 (_ bv0 10))))
  (and
    (or
      (not
        (= meta.security_metadata.ipsg_enabled$_$0 (_ bv1 1)))
      (not
        (= _symb$ingress_port_mapping$set_ifindex$arg$port_type$_$0 (_ bv0 2)))
      (not
        (= _symb$ipsg$match_0$_$0 _symb$ingress_port_mapping$set_ifindex$arg$ifindex$_$0))
      (not
        (= _symb$ipsg$match_1$_$0 meta.ingress_metadata.bd$_$1))
      (not
        (= _symb$ipsg$match_2$_$0 meta.l2_metadata.lkp_mac_sa$_$0))
      (not
        (= _symb$ipsg$match_3$_$0 meta.ipv4_metadata.lkp_ipv4_sa$_$0))
      (not
        (= _symb$ipsg_permit_special$action$_$0 (_ bv0 1)))
      (not
        (= _symb$ipsg$action$_$0 (_ bv0 1)))
      (and
        (not
          (= _symb$ipsg_permit_special$match_0$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$ipsg_permit_special$match_0$_$0 meta.l3_metadata.lkp_ip_proto$_$0))
          (= _symb$ipsg_permit_special$match_0$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$ipsg_permit_special$match_1$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$ipsg_permit_special$match_1$_$0 meta.l3_metadata.lkp_l4_dport$_$0))
          (= _symb$ipsg_permit_special$match_1$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$ipsg_permit_special$match_2$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$ipsg_permit_special$match_2$_$0 _symb$ipv4_fib$match_1$_$0))
          (= _symb$ipsg_permit_special$match_2$DONTCARE$_$0 (_ bv1 1)))))
    (= _symb$ingress_port_mapping$set_ifindex$arg$port_type$_$0 (_ bv0 2))
    (= meta.security_metadata.ipsg_enabled$_$0 (_ bv1 1)))
  (and
    (not
      (= _symb$ipv4_racl$match_0$DONTCARE$_$0 (_ bv1 1)))
    (or
      (not
        (= _symb$ipv4_racl$match_0$_$0 meta.acl_metadata.bd_label$_$1))
      (= _symb$ipv4_racl$match_0$DONTCARE$_$0 (_ bv1 1))))
  (and
    (not
      (= _symb$ipv4_racl$match_1$DONTCARE$_$0 (_ bv1 1)))
    (or
      (not
        (= _symb$ipv4_racl$match_1$_$0 meta.ipv4_metadata.lkp_ipv4_sa$_$0))
      (= _symb$ipv4_racl$match_1$DONTCARE$_$0 (_ bv1 1))))
  (and
    (not
      (= _symb$ipv4_racl$match_2$DONTCARE$_$0 (_ bv1 1)))
    (or
      (not
        (= _symb$ipv4_racl$match_2$_$0 _symb$ipv4_fib$match_1$_$0))
      (= _symb$ipv4_racl$match_2$DONTCARE$_$0 (_ bv1 1))))
  (and
    (not
      (= _symb$ipv4_racl$match_3$DONTCARE$_$0 (_ bv1 1)))
    (or
      (not
        (= _symb$ipv4_racl$match_3$_$0 meta.l3_metadata.lkp_ip_proto$_$0))
      (= _symb$ipv4_racl$match_3$DONTCARE$_$0 (_ bv1 1))))
  (and
    (not
      (= _symb$ipv4_racl$match_4$DONTCARE$_$0 (_ bv1 1)))
    (or
      (not
        (= _symb$ipv4_racl$match_4$_$0 meta.l3_metadata.lkp_l4_sport$_$0))
      (= _symb$ipv4_racl$match_4$DONTCARE$_$0 (_ bv1 1))))
  (and
    (not
      (= _symb$ipv4_racl$match_5$DONTCARE$_$0 (_ bv1 1)))
    (or
      (not
        (= _symb$ipv4_racl$match_5$_$0 meta.l3_metadata.lkp_l4_dport$_$0))
      (= _symb$ipv4_racl$match_5$DONTCARE$_$0 (_ bv1 1))))
  (and
    (or
      (not
        (= meta.acl_metadata.racl_nexthop$_$0 meta.acl_metadata.racl_nexthop$_$1))
      (not
        (= _symb$ipv4_racl$action$_$0 (_ bv4 3)))
      (not
        (= meta.acl_metadata.racl_redirect$_$0 meta.acl_metadata.racl_redirect$_$1))
      (not
        (= meta.acl_metadata.racl_nexthop_type$_$0 meta.acl_metadata.racl_nexthop_type$_$1)))
    (or
      (not
        (= meta.acl_metadata.racl_nexthop$_$0 meta.acl_metadata.racl_nexthop$_$1))
      (not
        (= _symb$ipv4_racl$action$_$0 (_ bv3 3)))
      (not
        (= meta.acl_metadata.racl_redirect$_$0 meta.acl_metadata.racl_redirect$_$1))
      (not
        (= meta.acl_metadata.racl_nexthop_type$_$0 meta.acl_metadata.racl_nexthop_type$_$1)))
    (or
      (not
        (= meta.acl_metadata.racl_nexthop$_$0 meta.acl_metadata.racl_nexthop$_$1))
      (not
        (= _symb$ipv4_racl$action$_$0 (_ bv2 3)))
      (not
        (= meta.acl_metadata.racl_redirect$_$0 meta.acl_metadata.racl_redirect$_$1))
      (not
        (= meta.acl_metadata.racl_nexthop_type$_$0 meta.acl_metadata.racl_nexthop_type$_$1)))
    (or
      (not
        (= meta.acl_metadata.racl_redirect$_$1 (_ bv1 1)))
      (not
        (= _symb$ipv4_racl$action$_$0 (_ bv1 3)))
      (not
        (= meta.acl_metadata.racl_nexthop_type$_$1 (_ bv0 1)))
      (not
        (= meta.acl_metadata.racl_nexthop$_$1 _symb$ipv4_racl$racl_redirect_nexthop$arg$nexthop_index$_$0)))
    (or
      (not
        (= meta.acl_metadata.racl_redirect$_$1 (_ bv1 1)))
      (not
        (= _symb$ipv4_racl$action$_$0 (_ bv0 3)))
      (not
        (= meta.acl_metadata.racl_nexthop_type$_$1 (_ bv1 1)))
      (not
        (= meta.acl_metadata.racl_nexthop$_$1 _symb$ipv4_racl$racl_redirect_ecmp$arg$ecmp_index$_$0))))
  (and
    (or
      (not
        (= _symb$ipv4_urpf$match_1$_$0 meta.ipv4_metadata.lkp_ipv4_sa$_$0))
      (not
        (= _symb$ipv4_urpf$match_0$_$0 _symb$ipv4_fib$match_0$_$0))
      (= meta.ipv4_metadata.ipv4_urpf_mode$_$1 (_ bv0 2))
      (and
        (or
          (not
            (= _symb$ipv4_urpf$action$_$0 (_ bv1 1)))
          (not
            (= _return$ipv4_urpf.action_run$_$1 (_ bv0 1))))
        (or
          (not
            (= _symb$ipv4_urpf$action$_$0 (_ bv0 1)))
          (not
            (= _return$ipv4_urpf.action_run$_$1 (_ bv1 1)))))
      (and
        (= _return$ipv4_urpf.action_run$_$1 (_ bv0 1))
        (or
          (not
            (= _symb$ipv4_urpf_lpm$match_0$_$0 _symb$ipv4_fib$match_0$_$0))
          (and
            (not
              (= _symb$ipv4_urpf_lpm$match_1$DONTCARE$_$0 (_ bv1 1)))
            (or
              (not
                (= _symb$ipv4_urpf_lpm$match_1$_$0 meta.ipv4_metadata.lkp_ipv4_sa$_$0))
              (= _symb$ipv4_urpf_lpm$match_1$DONTCARE$_$0 (_ bv1 1)))))))
    (or
      (not
        (= meta.ipv4_metadata.ipv4_urpf_mode$_$1 (_ bv0 2)))
      (not
        (= _return$ipv4_urpf.action_run$_$0 _return$ipv4_urpf.action_run$_$1))))
  (and
    (or
      (not
        (= _return$ipv4_fib.action_run$_$1 (_ bv0 2)))
      (not
        (= _symb$ipv4_fib$action$_$0 (_ bv2 2)))
      (not
        (= meta.l3_metadata.fib_hit$_$0 meta.l3_metadata.fib_hit$_$1))
      (not
        (= meta.l3_metadata.fib_nexthop_type$_$0 meta.l3_metadata.fib_nexthop_type$_$1))
      (not
        (= meta.l3_metadata.fib_nexthop$_$0 meta.l3_metadata.fib_nexthop$_$1)))
    (or
      (not
        (= _return$ipv4_fib.action_run$_$1 (_ bv1 2)))
      (not
        (= _symb$ipv4_fib$action$_$0 (_ bv1 2)))
      (not
        (= meta.l3_metadata.fib_hit$_$1 (_ bv1 1)))
      (not
        (= meta.l3_metadata.fib_nexthop_type$_$1 (_ bv0 1)))
      (not
        (= meta.l3_metadata.fib_nexthop$_$1 _symb$ipv4_fib$fib_hit_nexthop$arg$nexthop_index$_$0)))
    (or
      (not
        (= _return$ipv4_fib.action_run$_$1 (_ bv2 2)))
      (not
        (= _symb$ipv4_fib$action$_$0 (_ bv0 2)))
      (not
        (= meta.l3_metadata.fib_hit$_$1 (_ bv1 1)))
      (not
        (= meta.l3_metadata.fib_nexthop_type$_$1 (_ bv1 1)))
      (not
        (= meta.l3_metadata.fib_nexthop$_$1 _symb$ipv4_fib$fib_hit_ecmp$arg$ecmp_index$_$0))))
  (and
    (or
      (not
        (= _return$ipv4_fib.action_run$_$1 (_ bv0 2)))
      (not
        (= _symb$ipv4_fib_lpm$match_0$_$0 meta.l3_metadata.vrf$_$1))
      (and
        (not
          (= _symb$ipv4_fib_lpm$match_1$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$ipv4_fib_lpm$match_1$_$0 meta.ipv4_metadata.lkp_ipv4_da$_$0))
          (= _symb$ipv4_fib_lpm$match_1$DONTCARE$_$0 (_ bv1 1))))
      (and
        (or
          (not
            (= meta.l3_metadata.fib_hit$_$1 meta.l3_metadata.fib_hit$_$2))
          (not
            (= _symb$ipv4_fib_lpm$action$_$0 (_ bv2 2)))
          (not
            (= meta.l3_metadata.fib_nexthop_type$_$1 meta.l3_metadata.fib_nexthop_type$_$2))
          (not
            (= meta.l3_metadata.fib_nexthop$_$1 meta.l3_metadata.fib_nexthop$_$2)))
        (or
          (not
            (= meta.l3_metadata.fib_hit$_$2 (_ bv1 1)))
          (not
            (= _symb$ipv4_fib_lpm$action$_$0 (_ bv1 2)))
          (not
            (= meta.l3_metadata.fib_nexthop_type$_$2 (_ bv0 1)))
          (not
            (= meta.l3_metadata.fib_nexthop$_$2 _symb$ipv4_fib_lpm$fib_hit_nexthop$arg$nexthop_index$_$0)))
        (or
          (not
            (= meta.l3_metadata.fib_hit$_$2 (_ bv1 1)))
          (not
            (= _symb$ipv4_fib_lpm$action$_$0 (_ bv0 2)))
          (not
            (= meta.l3_metadata.fib_nexthop_type$_$2 (_ bv1 1)))
          (not
            (= meta.l3_metadata.fib_nexthop$_$2 _symb$ipv4_fib_lpm$fib_hit_ecmp$arg$ecmp_index$_$0)))))
    (or
      (not
        (= meta.l3_metadata.fib_nexthop$_$1 meta.l3_metadata.fib_nexthop$_$2))
      (not
        (= meta.l3_metadata.fib_hit$_$1 meta.l3_metadata.fib_hit$_$2))
      (not
        (= meta.l3_metadata.fib_nexthop_type$_$1 meta.l3_metadata.fib_nexthop_type$_$2))
      (= _return$ipv4_fib.action_run$_$1 (_ bv0 2))))
  (and
    (or
      (= meta.ingress_metadata.bypass_lookups$_$0 (_ bv65535 16))
      (and
        (not
          (= _symb$fwd_result$match_0$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_0$_$0 meta.l2_metadata.l2_redirect$_$0))
          (= _symb$fwd_result$match_0$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$fwd_result$match_1$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_1$_$0 meta.acl_metadata.acl_redirect$_$0))
          (= _symb$fwd_result$match_1$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$fwd_result$match_2$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_2$_$0 meta.acl_metadata.racl_redirect$_$1))
          (= _symb$fwd_result$match_2$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$fwd_result$match_3$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_3$_$0 meta.l3_metadata.rmac_hit$_$0))
          (= _symb$fwd_result$match_3$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$fwd_result$match_4$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_4$_$0 meta.l3_metadata.fib_hit$_$2))
          (= _symb$fwd_result$match_4$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$fwd_result$match_5$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_5$_$0 meta.l2_metadata.lkp_pkt_type$_$0))
          (= _symb$fwd_result$match_5$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$fwd_result$match_6$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_6$_$0 meta.l3_metadata.lkp_ip_type$_$0))
          (= _symb$fwd_result$match_6$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$fwd_result$match_7$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_7$_$0 meta.multicast_metadata.igmp_snooping_enabled$_$1))
          (= _symb$fwd_result$match_7$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$fwd_result$match_8$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_8$_$0 meta.multicast_metadata.mld_snooping_enabled$_$1))
          (= _symb$fwd_result$match_8$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$fwd_result$match_9$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_9$_$0 meta.multicast_metadata.mcast_route_hit$_$0))
          (= _symb$fwd_result$match_9$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$fwd_result$match_10$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_10$_$0 meta.multicast_metadata.mcast_bridge_hit$_$0))
          (= _symb$fwd_result$match_10$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$fwd_result$match_11$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_11$_$0 meta.multicast_metadata.mcast_rpf_group$_$0))
          (= _symb$fwd_result$match_11$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$fwd_result$match_12$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$fwd_result$match_12$_$0 meta.multicast_metadata.mcast_mode$_$0))
          (= _symb$fwd_result$match_12$DONTCARE$_$0 (_ bv1 1))))
      (and
        (or
          (not
            (= meta.l3_metadata.nexthop_index$_$0 meta.l3_metadata.nexthop_index$_$1))
          (not
            (= _symb$fwd_result$action$_$0 (_ bv5 3)))
          (not
            (= standard_metadata.egress_spec$_$1 standard_metadata.egress_spec$_$2))
          (not
            (= meta.nexthop_metadata.nexthop_type$_$0 meta.nexthop_metadata.nexthop_type$_$1)))
        (or
          (not
            (= meta.l3_metadata.nexthop_index$_$1 meta.l2_metadata.l2_nexthop$_$0))
          (not
            (= _symb$fwd_result$action$_$0 (_ bv4 3)))
          (not
            (= standard_metadata.egress_spec$_$1 standard_metadata.egress_spec$_$2))
          (not
            (= meta.nexthop_metadata.nexthop_type$_$1 meta.l2_metadata.l2_nexthop_type$_$0)))
        (or
          (not
            (= meta.l3_metadata.nexthop_index$_$1 meta.l3_metadata.fib_nexthop$_$2))
          (not
            (= _symb$fwd_result$action$_$0 (_ bv3 3)))
          (not
            (= standard_metadata.egress_spec$_$1 standard_metadata.egress_spec$_$2))
          (not
            (= meta.nexthop_metadata.nexthop_type$_$1 meta.l3_metadata.fib_nexthop_type$_$2)))
        (or
          (not
            (= standard_metadata.egress_spec$_$2 (_ bv64 9)))
          (not
            (= _symb$fwd_result$action$_$0 (_ bv2 3)))
          (not
            (= meta.nexthop_metadata.nexthop_type$_$0 meta.nexthop_metadata.nexthop_type$_$1))
          (not
            (= meta.l3_metadata.nexthop_index$_$0 meta.l3_metadata.nexthop_index$_$1)))
        (or
          (not
            (= standard_metadata.egress_spec$_$1 standard_metadata.egress_spec$_$2))
          (and
            (or
              (not
                (= meta.l3_metadata.nexthop_index$_$1 meta.acl_metadata.acl_nexthop$_$0))
              (not
                (= meta.nexthop_metadata.nexthop_type$_$1 meta.acl_metadata.acl_nexthop_type$_$0))
              (not
                (= _symb$fwd_result$action$_$0 (_ bv1 3))))
            (or
              (not
                (= meta.l3_metadata.nexthop_index$_$1 meta.acl_metadata.racl_nexthop$_$1))
              (not
                (= meta.nexthop_metadata.nexthop_type$_$1 meta.acl_metadata.racl_nexthop_type$_$1))
              (not
                (= _symb$fwd_result$action$_$0 (_ bv0 3))))))))
    (or
      (not
        (= meta.l3_metadata.nexthop_index$_$0 meta.l3_metadata.nexthop_index$_$1))
      (not
        (= meta.ingress_metadata.bypass_lookups$_$0 (_ bv65535 16)))
      (not
        (= standard_metadata.egress_spec$_$1 standard_metadata.egress_spec$_$2))
      (not
        (= meta.nexthop_metadata.nexthop_type$_$0 meta.nexthop_metadata.nexthop_type$_$1))))
  (and
    (or
      (not
        (= _symb$ecmp_group$match_0$_$0 meta.l3_metadata.nexthop_index$_$1))
      (not
        (= _symb$ecmp_group$match_1$_$0 meta.hash_metadata.hash1$_$0))
      (not
        (= meta.nexthop_metadata.nexthop_type$_$1 (_ bv1 1)))
      (and
        (or
          (not
            (= _symb$ecmp_group$action$_$0 (_ bv2 2)))
          (not
            (= meta.l3_metadata.nexthop_index$_$1 meta.l3_metadata.nexthop_index$_$2)))
        (or
          (not
            (= _symb$ecmp_group$action$_$0 (_ bv1 2)))
          (not
            (= meta.l3_metadata.nexthop_index$_$2 _symb$ecmp_group$set_ecmp_nexthop_details$arg$nhop_index$_$0)))
        (or
          (not
            (= _symb$ecmp_group$action$_$0 (_ bv0 2)))
          (not
            (= meta.l3_metadata.nexthop_index$_$2 _symb$ecmp_group$set_ecmp_nexthop_details_for_post_routed_flood$arg$nhop_index$_$0)))))
    (or
      (not
        (= _symb$nexthop$match_0$_$0 meta.l3_metadata.nexthop_index$_$2))
      (not
        (= meta.l3_metadata.nexthop_index$_$1 _symb$nexthop$match_0$_$0))
      (= meta.nexthop_metadata.nexthop_type$_$1 (_ bv1 1))
      (and
        (and
          (not
            (= _symb$nexthop$action$_$0 (_ bv2 2)))
          (not
            (= _symb$nexthop$action$_$0 (_ bv1 2))))
        (not
          (= _symb$nexthop$action$_$0 (_ bv0 2))))))
  (and
    (or
      (not
        (= _symb$egress_port_mapping$match_0$_$0 standard_metadata.egress_port$_$0))
      (not
        (= meta.egress_metadata.bypass$_$0 (_ bv0 1)))
      (and
        (or
          (not
            (= _symb$mirror$match_0$_$0 meta.i2e_metadata.mirror_session_id$_$0))
          (= standard_metadata.instance_type$_$0 (_ bv0 32))
          (= standard_metadata.instance_type$_$0 (_ bv5 32))
          (and
            (or
              (not
                (= meta.egress_metadata.bd$_$0 meta.egress_metadata.bd$_$1))
              (not
                (= meta.l3_metadata.nexthop_index$_$2 meta.l3_metadata.nexthop_index$_$3))
              (not
                (= _symb$mirror$action$_$0 (_ bv2 2))))
            (or
              (not
                (= meta.l3_metadata.nexthop_index$_$3 _symb$mirror$set_mirror_nhop$arg$nhop_idx$_$0))
              (not
                (= meta.egress_metadata.bd$_$0 meta.egress_metadata.bd$_$1))
              (not
                (= _symb$mirror$action$_$0 (_ bv1 2))))
            (or
              (not
                (= meta.egress_metadata.bd$_$1 _symb$mirror$set_mirror_bd$arg$bd$_$0))
              (not
                (= meta.l3_metadata.nexthop_index$_$2 meta.l3_metadata.nexthop_index$_$3))
              (not
                (= _symb$mirror$action$_$0 (_ bv0 2))))))
        (or
          (not
            (= meta.l3_metadata.nexthop_index$_$2 meta.l3_metadata.nexthop_index$_$3))
          (not
            (= meta.egress_metadata.bd$_$0 meta.egress_metadata.bd$_$1))
          (and
            (not
              (= standard_metadata.instance_type$_$0 (_ bv0 32)))
            (not
              (= standard_metadata.instance_type$_$0 (_ bv5 32))))))
      (and
        (or
          (not
            (= _return$egress_port_mapping.action_run$_$1 (_ bv0 2)))
          (not
            (= _symb$egress_port_mapping$action$_$0 (_ bv2 2)))
          (not
            (= meta.egress_metadata.ifindex$_$1 _symb$egress_port_mapping$egress_port_type_normal$arg$ifindex$_$0))
          (not
            (= meta.egress_metadata.port_type$_$1 (_ bv0 2))))
        (or
          (not
            (= _return$egress_port_mapping.action_run$_$1 (_ bv1 2)))
          (not
            (= _symb$egress_port_mapping$action$_$0 (_ bv1 2)))
          (not
            (= meta.egress_metadata.ifindex$_$1 _symb$egress_port_mapping$egress_port_type_fabric$arg$ifindex$_$0))
          (not
            (= meta.egress_metadata.port_type$_$1 (_ bv1 2))))
        (or
          (not
            (= _return$egress_port_mapping.action_run$_$1 (_ bv2 2)))
          (not
            (= _symb$egress_port_mapping$action$_$0 (_ bv0 2)))
          (not
            (= meta.egress_metadata.ifindex$_$1 _symb$egress_port_mapping$egress_port_type_cpu$arg$ifindex$_$0))
          (not
            (= meta.egress_metadata.port_type$_$1 (_ bv2 2)))))
      (and
        (or
          (not
            (= _return$egress_port_mapping.action_run$_$1 (_ bv0 2)))
          (not
            (= _symb$egress_bd_map$match_0$_$0 meta.egress_metadata.bd$_$2))
          (not
            (= _symb$mtu$match_0$_$0 meta.l3_metadata.mtu_index$_$1))
          (not
            (= _symb$mtu$match_2$_$0 t$6$_$0))
          (not
            (= _symb$mtu$match_1$_$0 t$5$_$0))
          (and
            (or
              (not
                (= _symb$vlan_decap$match_1$_$0 t$3$_$0))
              (not
                (= _symb$vlan_decap$match_0$_$0 t$2$_$0))
              (and
                (not
                  (= standard_metadata.instance_type$_$0 (_ bv0 32)))
                (not
                  (= standard_metadata.instance_type$_$0 (_ bv5 32))))
              (and
                (and
                  (not
                    (= _symb$vlan_decap$action$_$0 (_ bv2 2)))
                  (not
                    (= _symb$vlan_decap$action$_$0 (_ bv1 2))))
                (not
                  (= _symb$vlan_decap$action$_$0 (_ bv0 2)))))
            (or
              (= standard_metadata.instance_type$_$0 (_ bv0 32))
              (= standard_metadata.instance_type$_$0 (_ bv5 32))))
          (and
            (or
              (not
                (= _symb$rewrite$match_0$_$0 meta.l3_metadata.nexthop_index$_$3))
              (and
                (= _symb$rewrite$match_0$_$0 (_ bv0 16))
                (not
                  (= meta.egress_metadata.routed$_$0 (_ bv0 1))))
              (and
                (or
                  (not
                    (= meta.egress_metadata.bd$_$1 _symb$egress_bd_map$match_0$_$0))
                  (not
                    (= _symb$rewrite$action$_$0 (_ bv4 3)))
                  (not
                    (= meta.l3_metadata.mtu_index$_$0 _symb$mtu$match_0$_$0))
                  (not
                    (= meta.egress_metadata.routed$_$0 meta.egress_metadata.routed$_$1)))
                (or
                  (not
                    (= meta.egress_metadata.routed$_$1 (_ bv0 1)))
                  (not
                    (= _symb$rewrite$action$_$0 (_ bv3 3)))
                  (not
                    (= meta.l3_metadata.mtu_index$_$0 _symb$mtu$match_0$_$0))
                  (not
                    (= _symb$egress_bd_map$match_0$_$0 meta.ingress_metadata.bd$_$1)))
                (or
                  (not
                    (= meta.egress_metadata.routed$_$1 (_ bv0 1)))
                  (not
                    (= _symb$rewrite$action$_$0 (_ bv2 3)))
                  (not
                    (= meta.l3_metadata.mtu_index$_$0 _symb$mtu$match_0$_$0))
                  (not
                    (= _symb$egress_bd_map$match_0$_$0 meta.ingress_metadata.bd$_$1)))
                (or
                  (not
                    (= meta.egress_metadata.routed$_$1 (_ bv1 1)))
                  (not
                    (= _symb$rewrite$action$_$0 (_ bv1 3)))
                  (not
                    (= _symb$mtu$match_0$_$0 _symb$rewrite$set_l3_rewrite$arg$mtu_index$_$0))
                  (not
                    (= _symb$egress_bd_map$match_0$_$0 _symb$rewrite$set_l3_rewrite$arg$bd$_$0)))
                (or
                  (not
                    (= meta.egress_metadata.routed$_$1 (_ bv1 1)))
                  (not
                    (= _symb$rewrite$action$_$0 (_ bv0 3)))
                  (not
                    (= meta.l3_metadata.mtu_index$_$0 _symb$mtu$match_0$_$0))
                  (not
                    (= _symb$egress_bd_map$match_0$_$0 _symb$rewrite$set_l3_rewrite_with_tunnel$arg$bd$_$0)))))
            (or
              (not
                (= meta.egress_metadata.routed$_$0 meta.egress_metadata.routed$_$1))
              (not
                (= meta.egress_metadata.bd$_$1 _symb$egress_bd_map$match_0$_$0))
              (not
                (= meta.l3_metadata.mtu_index$_$0 _symb$mtu$match_0$_$0))
              (not
                (= meta.l3_metadata.nexthop_index$_$3 (_ bv0 16)))
              (= meta.egress_metadata.routed$_$1 (_ bv0 1))))
          (and
            (or
              (not
                (= _symb$egress_bd_map$action$_$0 (_ bv1 1)))
              (not
                (= meta.egress_metadata.smac_idx$_$0 meta.egress_metadata.smac_idx$_$1)))
            (or
              (not
                (= _symb$egress_bd_map$action$_$0 (_ bv0 1)))
              (not
                (= meta.egress_metadata.smac_idx$_$1 _symb$egress_bd_map$set_egress_bd_properties$arg$smac_idx$_$0))))
          (and
            (= meta.egress_metadata.routed$_$1 (_ bv1 1))
            (or
              (not
                (= _symb$l3_rewrite$match_0$_$0 t$4$_$0))
              (not
                (= _symb$smac_rewrite$action$_$0 (_ bv0 1)))
              (not
                (= _symb$smac_rewrite$match_0$_$0 meta.egress_metadata.smac_idx$_$1))
              (and
                (not
                  (= _symb$l3_rewrite$match_1$DONTCARE$_$0 (_ bv1 1)))
                (or
                  (not
                    (= _symb$l3_rewrite$match_1$_$0 ((_ extract 31 28) hdr.ipv4.dstAddr$_$0)))
                  (= _symb$l3_rewrite$match_1$DONTCARE$_$0 (_ bv1 1))))))
          (and
            (or
              (not
                (= _symb$mtu$action$_$0 (_ bv2 2)))
              (not
                (= meta.l3_metadata.l3_mtu_check$_$1 (_ bv65535 16))))
            (or
              (not
                (= _symb$mtu$action$_$0 (_ bv1 2)))
              (not
                (= meta.l3_metadata.l3_mtu_check$_$1 (bvsub l3_mtu$_$0 hdr.ipv4.totalLen$_$0))))
            (or
              (not
                (= _symb$mtu$action$_$0 (_ bv0 2)))
              (not
                (= meta.l3_metadata.l3_mtu_check$_$1 (bvsub l3_mtu$_$0 hdr.ipv6.payloadLen$_$0))))))
        (or
          (not
            (= meta.egress_metadata.routed$_$0 meta.egress_metadata.routed$_$1))
          (not
            (= meta.egress_metadata.bd$_$1 meta.egress_metadata.bd$_$2))
          (not
            (= meta.egress_metadata.smac_idx$_$0 meta.egress_metadata.smac_idx$_$1))
          (not
            (= meta.l3_metadata.l3_mtu_check$_$0 meta.l3_metadata.l3_mtu_check$_$1))
          (not
            (= meta.l3_metadata.mtu_index$_$0 meta.l3_metadata.mtu_index$_$1))
          (= _return$egress_port_mapping.action_run$_$1 (_ bv0 2))))
      (and
        (= meta.egress_metadata.port_type$_$1 (_ bv0 2))
        (or
          (not
            (= _symb$egress_vlan_xlate$match_1$_$0 meta.egress_metadata.bd$_$2))
          (not
            (= _symb$egress_vlan_xlate$match_0$_$0 meta.egress_metadata.ifindex$_$1))
          (and
            (and
              (not
                (= _symb$egress_vlan_xlate$action$_$0 (_ bv2 2)))
              (not
                (= _symb$egress_vlan_xlate$action$_$0 (_ bv1 2))))
            (not
              (= _symb$egress_vlan_xlate$action$_$0 (_ bv0 2)))))))
    (or
      (not
        (= meta.egress_metadata.bd$_$0 meta.egress_metadata.bd$_$2))
      (not
        (= _return$egress_port_mapping.action_run$_$0 _return$egress_port_mapping.action_run$_$1))
      (not
        (= meta.egress_metadata.bd$_$1 meta.egress_metadata.bd$_$2))
      (not
        (= meta.egress_metadata.ifindex$_$0 meta.egress_metadata.ifindex$_$1))
      (not
        (= meta.egress_metadata.port_type$_$0 meta.egress_metadata.port_type$_$1))
      (not
        (= meta.egress_metadata.routed$_$0 meta.egress_metadata.routed$_$1))
      (not
        (= meta.egress_metadata.smac_idx$_$0 meta.egress_metadata.smac_idx$_$1))
      (not
        (= meta.l3_metadata.l3_mtu_check$_$0 meta.l3_metadata.l3_mtu_check$_$1))
      (not
        (= meta.l3_metadata.mtu_index$_$0 meta.l3_metadata.mtu_index$_$1))
      (not
        (= meta.l3_metadata.nexthop_index$_$2 meta.l3_metadata.nexthop_index$_$3))
      (= meta.egress_metadata.bypass$_$0 (_ bv0 1))))
  (and
    (or
      (not
        (= meta.egress_metadata.bypass$_$0 (_ bv0 1)))
      (and
        (not
          (= _symb$egress_acl$match_0$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$egress_acl$match_0$_$0 standard_metadata.egress_port$_$0))
          (= _symb$egress_acl$match_0$DONTCARE$_$0 (_ bv1 1))))
      (and
        (not
          (= _symb$egress_acl$match_1$DONTCARE$_$0 (_ bv1 1)))
        (or
          (not
            (= _symb$egress_acl$match_1$_$0 meta.l3_metadata.l3_mtu_check$_$1))
          (= _symb$egress_acl$match_1$DONTCARE$_$0 (_ bv1 1))))
      (and
        (or
          (not
            (= _symb$egress_acl$action$_$0 (_ bv3 2)))
          (not
            (= standard_metadata.egress_spec$_$2 (_ bv0 9))))
        (or
          (not
            (= _symb$egress_acl$action$_$0 (_ bv2 2)))
          (not
            (= standard_metadata.egress_spec$_$2 (_ bv0 9))))))
    (or
      (not
        (= standard_metadata.egress_spec$_$2 (_ bv0 9)))
      (= meta.egress_metadata.bypass$_$0 (_ bv0 1)))))) 

